2018-07-24 21:34:44 -Starting BootdoApplication on SKY-2017 with PID 7064 (E:\myIdeaProject\bootdo\target\classes started by Administrator in E:\myIdeaProject\bootdo)
2018-07-24 21:34:44 -Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2018-07-24 21:34:44 -The following profiles are active: dev
2018-07-24 21:34:45 -HV000001: Hibernate Validator 5.3.6.Final
2018-07-24 21:34:45 -Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@614ca7df: startup date [Tue Jul 24 21:34:45 CST 2018]; root of context hierarchy
2018-07-24 21:34:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2018-07-24 21:34:48 -Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$b5195ac8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration' of type [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$$EnhancerBySpringCGLIB$$a98d1f6c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'spring.cache-org.springframework.boot.autoconfigure.cache.CacheProperties' of type [org.springframework.boot.autoconfigure.cache.CacheProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'cacheManagerCustomizers' of type [org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration' of type [org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration$$EnhancerBySpringCGLIB$$442bec6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'ehCacheCacheManager' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'cacheManager' of type [org.springframework.cache.ehcache.EhCacheCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'cacheAutoConfigurationValidator' of type [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$CacheManagerValidator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6c0724aa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:49 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$5e605351] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -No configuration found. Configuring ehcache from ehcache-failsafe.xml  found in the classpath: jar:file:/C:/Users/Administrator/.m2/repository/net/sf/ehcache/ehcache-core/2.5.3/ehcache-core-2.5.3.jar!/ehcache-failsafe.xml
2018-07-24 21:34:50 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2018-07-24 21:34:50 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2018-07-24 21:34:50 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:34:50 -Tomcat initialized with port(s): 80 (http)
2018-07-24 21:34:50 -Starting service [Tomcat]
2018-07-24 21:34:50 -Starting Servlet Engine: Apache Tomcat/8.5.23
2018-07-24 21:34:51 -Initializing Spring embedded WebApplicationContext
2018-07-24 21:34:51 -Root WebApplicationContext: initialization completed in 6305 ms
2018-07-24 21:34:52 -Mapping filter: 'characterEncodingFilter' to: [/*]
2018-07-24 21:34:52 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-07-24 21:34:52 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-07-24 21:34:52 -Mapping filter: 'requestContextFilter' to: [/*]
2018-07-24 21:34:52 -Mapping filter: 'springSecurityFilterChain' to: [/*]
2018-07-24 21:34:52 -Filter xssFilter was not registered (disabled)
2018-07-24 21:34:52 -Mapping filter: 'webStatFilter' to urls: [/*]
2018-07-24 21:34:52 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2018-07-24 21:34:52 -Mapping servlet: 'statViewServlet' to [/druid/*]
2018-07-24 21:34:52 -Mapping servlet: 'dispatcherServlet' to [/]
2018-07-24 21:34:52 -{dataSource-1} inited
2018-07-24 21:34:54 -ProcessEngine default created
2018-07-24 21:34:56 -ApplicationContext registed-->org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@614ca7df: startup date [Tue Jul 24 21:34:45 CST 2018]; root of context hierarchy
2018-07-24 21:34:56 -Using default implementation for ThreadExecutor
2018-07-24 21:34:56 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2018-07-24 21:34:56 -Quartz Scheduler v.2.2.1 created.
2018-07-24 21:34:56 -RAMJobStore initialized.
2018-07-24 21:34:56 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2018-07-24 21:34:56 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2018-07-24 21:34:56 -Quartz scheduler version: 2.2.1
2018-07-24 21:34:56 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@21280cbb
2018-07-24 21:34:57 -Initializing ExecutorService  'clientInboundChannelExecutor'
2018-07-24 21:34:57 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2018-07-24 21:34:58 -Mapped "{[/activiti/model/{id}],methods=[DELETE]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ModelController.remove(java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/activiti/model/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.ModelController.list(int,int)
2018-07-24 21:34:58 -Mapped "{[/activiti/model/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ModelController.batchRemove(java.lang.String[])
2018-07-24 21:34:58 -Mapped "{[/activiti/model],methods=[GET]}" onto org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.ModelController.model()
2018-07-24 21:34:58 -Mapped "{[/activiti/model/add]}" onto public void com.bootdo.activiti.controller.ModelController.newModel(javax.servlet.http.HttpServletResponse) throws java.io.UnsupportedEncodingException
2018-07-24 21:34:58 -Mapped "{[/activiti/model/{modelId}/json],methods=[GET]}" onto public com.fasterxml.jackson.databind.node.ObjectNode com.bootdo.activiti.controller.ModelController.getEditorJson(java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/activiti/editor/stencilset],methods=[GET],produces=[application/json;charset=utf-8]}" onto public java.lang.String com.bootdo.activiti.controller.ModelController.getStencilset()
2018-07-24 21:34:58 -Mapped "{[/activiti/model/edit/{id}],methods=[GET]}" onto public void com.bootdo.activiti.controller.ModelController.edit(javax.servlet.http.HttpServletResponse,java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/activiti/model/deploy/{id}],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ModelController.deploy(java.lang.String) throws java.lang.Exception
2018-07-24 21:34:58 -Mapped "{[/activiti/model/{modelId}/save],methods=[PUT]}" onto public void com.bootdo.activiti.controller.ModelController.saveModel(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/activiti/model/export/{id}],methods=[GET]}" onto public void com.bootdo.activiti.controller.ModelController.exportToXml(java.lang.String,javax.servlet.http.HttpServletResponse)
2018-07-24 21:34:58 -Mapped "{[/activiti/process/add],methods=[GET]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.ProcessController.add()
2018-07-24 21:34:58 -Mapped "{[/activiti/process/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.remove(java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/activiti/process/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.ProcessController.list(int,int)
2018-07-24 21:34:58 -Mapped "{[/activiti/process/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.batchRemove(java.lang.String[])
2018-07-24 21:34:58 -Mapped "{[/activiti/process],methods=[GET]}" onto org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.ProcessController.process()
2018-07-24 21:34:58 -Mapped "{[/activiti/process/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.deploy(java.lang.String,java.lang.String,org.springframework.web.multipart.MultipartFile)
2018-07-24 21:34:58 -Mapped "{[/activiti/process/resource/read/{xml}/{id}]}" onto public void com.bootdo.activiti.controller.ProcessController.resourceRead(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-24 21:34:58 -Mapped "{[/activiti/process/convertToModel/{procDefId}]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.convertToModel(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes) throws java.io.UnsupportedEncodingException,javax.xml.stream.XMLStreamException
2018-07-24 21:34:58 -Mapped "{[/act/salary/form],methods=[GET]}" onto java.lang.String com.bootdo.activiti.controller.SalaryController.add()
2018-07-24 21:34:58 -Mapped "{[/act/salary/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.remove(java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/act/salary/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.remove(java.lang.String[])
2018-07-24 21:34:58 -Mapped "{[/act/salary/update]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.update(com.bootdo.activiti.domain.SalaryDO)
2018-07-24 21:34:58 -Mapped "{[/act/salary/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.SalaryController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/act/salary/form/{taskId}],methods=[GET]}" onto java.lang.String com.bootdo.activiti.controller.SalaryController.edit(java.lang.String,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/act/salary],methods=[GET]}" onto java.lang.String com.bootdo.activiti.controller.SalaryController.Salary()
2018-07-24 21:34:58 -Mapped "{[/act/salary/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.saveOrUpdate(com.bootdo.activiti.domain.SalaryDO)
2018-07-24 21:34:58 -Mapped "{[/activiti/task/form/{procDefId}/{taskId}],methods=[GET]}" onto public void com.bootdo.activiti.controller.TaskController.form(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2018-07-24 21:34:58 -Mapped "{[/activiti/task/gotoList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.TaskController.list(int,int)
2018-07-24 21:34:58 -Mapped "{[/activiti/task/goto],methods=[GET]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.TaskController.gotoTask()
2018-07-24 21:34:58 -Mapped "{[/activiti/task/form/{procDefId}],methods=[GET]}" onto public void com.bootdo.activiti.controller.TaskController.startForm(java.lang.String,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2018-07-24 21:34:58 -Mapped "{[/activiti/task/todo],methods=[GET]}" onto org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.TaskController.todo()
2018-07-24 21:34:58 -Mapped "{[/activiti/task/todoList],methods=[GET]}" onto java.util.List<com.bootdo.activiti.vo.TaskVO> com.bootdo.activiti.controller.TaskController.todoList()
2018-07-24 21:34:58 -Mapped "{[/activiti/task/trace/photo/{procDefId}/{execId}]}" onto public void com.bootdo.activiti.controller.TaskController.tracePhoto(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-24 21:34:58 -Mapped "{[/blog/open/post/{cid}],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.BlogController.post(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/blog/open/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.blog.controller.BlogController.opentList(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/blog],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.BlogController.blog()
2018-07-24 21:34:58 -Mapped "{[/blog/open/page/{categories}],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.BlogController.about(java.lang.String,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/add],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.ContentController.add()
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.remove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/update]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.update(com.bootdo.blog.domain.ContentDO)
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.blog.controller.ContentController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.save(com.bootdo.blog.domain.ContentDO)
2018-07-24 21:34:58 -Mapped "{[/blog/bContent/edit/{cid}],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.ContentController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/blog/bContent],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.ContentController.bContent()
2018-07-24 21:34:58 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2018-07-24 21:34:58 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2018-07-24 21:34:58 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2018-07-24 21:34:58 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2018-07-24 21:34:58 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2018-07-24 21:34:58 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2018-07-24 21:34:58 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2018-07-24 21:34:58 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2018-07-24 21:34:58 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2018-07-24 21:34:58 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2018-07-24 21:34:58 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2018-07-24 21:34:58 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2018-07-24 21:34:58 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2018-07-24 21:34:58 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2018-07-24 21:34:58 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2018-07-24 21:34:58 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-24 21:34:58 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-24 21:34:58 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2018-07-24 21:34:58 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2018-07-24 21:34:58 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2018-07-24 21:34:58 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2018-07-24 21:34:58 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2018-07-24 21:34:58 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2018-07-24 21:34:58 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2018-07-24 21:34:58 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2018-07-24 21:34:58 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2018-07-24 21:34:58 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login()
2018-07-24 21:34:58 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2018-07-24 21:34:58 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2018-07-24 21:34:58 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2018-07-24 21:34:58 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2018-07-24 21:34:58 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2018-07-24 21:34:58 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2018-07-24 21:34:58 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2018-07-24 21:34:58 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2018-07-24 21:34:58 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2018-07-24 21:34:58 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2018-07-24 21:34:58 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2018-07-24 21:34:58 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2018-07-24 21:34:58 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:34:58 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2018-07-24 21:34:58 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2018-07-24 21:34:58 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2018-07-24 21:34:58 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2018-07-24 21:34:58 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2018-07-24 21:34:58 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2018-07-24 21:34:58 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2018-07-24 21:34:58 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2018-07-24 21:34:58 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2018-07-24 21:34:58 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2018-07-24 21:34:58 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2018-07-24 21:34:58 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2018-07-24 21:34:58 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2018-07-24 21:34:58 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2018-07-24 21:34:59 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2018-07-24 21:34:59 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2018-07-24 21:34:59 -Initializing ExecutorService  'brokerChannelExecutor'
2018-07-24 21:35:01 -Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@614ca7df: startup date [Tue Jul 24 21:34:45 CST 2018]; root of context hierarchy
2018-07-24 21:35:01 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:35:01 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:35:01 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:35:01 -Detected @ExceptionHandler methods in BDExceptionHandler
2018-07-24 21:35:01 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:35:03 -

Using default security password: 5f7c41f0-f583-4bc3-b44c-6f048bae8143

2018-07-24 21:35:03 -Creating filter chain: OrRequestMatcher [requestMatchers=[Ant [pattern='/css/**'], Ant [pattern='/js/**'], Ant [pattern='/images/**'], Ant [pattern='/webjars/**'], Ant [pattern='/**/favicon.ico'], Ant [pattern='/error']]], []
2018-07-24 21:35:03 -Creating filter chain: org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration$ApplicationNoWebSecurityConfigurerAdapter$1@3e55eeb9, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@44a13699, org.springframework.security.web.context.SecurityContextPersistenceFilter@335896bd, org.springframework.security.web.header.HeaderWriterFilter@3abadb65, org.springframework.security.web.csrf.CsrfFilter@719bb60d, org.springframework.security.web.authentication.logout.LogoutFilter@7074da1d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@666b91db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6c9e74f3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1253b822, org.springframework.security.web.session.SessionManagementFilter@54e18a46, org.springframework.security.web.access.ExceptionTranslationFilter@69944a90]
2018-07-24 21:35:04 -Registering beans for JMX exposure on startup
2018-07-24 21:35:04 -Bean with name 'dataSource' has been autodetected for JMX exposure
2018-07-24 21:35:04 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2018-07-24 21:35:04 -Starting beans in phase 2147483647
2018-07-24 21:35:04 -Context refreshed
2018-07-24 21:35:04 -Found 1 custom documentation plugin(s)
2018-07-24 21:35:04 -Scanning for api listing references
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_1
2018-07-24 21:35:05 -Generating unique operation named: addUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: editUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_2
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_3
2018-07-24 21:35:05 -Generating unique operation named: saveUsingPOST_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingHEAD_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPOST_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPUT_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPATCH_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingDELETE_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingOPTIONS_1
2018-07-24 21:35:05 -Generating unique operation named: updateUsingTRACE_1
2018-07-24 21:35:05 -Generating unique operation named: addUsingGET_2
2018-07-24 21:35:05 -Generating unique operation named: editUsingGET_2
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_2
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_4
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_5
2018-07-24 21:35:05 -Generating unique operation named: saveUsingPOST_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingGET_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingHEAD_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPOST_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPUT_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPATCH_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingDELETE_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingOPTIONS_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingTRACE_2
2018-07-24 21:35:05 -Generating unique operation named: addUsingGET_3
2018-07-24 21:35:05 -Generating unique operation named: editUsingGET_3
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_3
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_6
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_7
2018-07-24 21:35:05 -Generating unique operation named: saveUsingPOST_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingGET_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingHEAD_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPOST_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPUT_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPATCH_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingDELETE_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingOPTIONS_3
2018-07-24 21:35:05 -Generating unique operation named: updateUsingTRACE_3
2018-07-24 21:35:05 -Generating unique operation named: editUsingGET_4
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_4
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPOST_4
2018-07-24 21:35:05 -Generating unique operation named: addUsingGET_4
2018-07-24 21:35:05 -Generating unique operation named: editUsingGET_5
2018-07-24 21:35:05 -Generating unique operation named: infoUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingHEAD_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingPOST_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingPUT_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingPATCH_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingDELETE_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingOPTIONS_1
2018-07-24 21:35:05 -Generating unique operation named: infoUsingTRACE_1
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_5
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_8
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_9
2018-07-24 21:35:05 -Generating unique operation named: saveUsingPOST_4
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPOST_5
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_6
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_10
2018-07-24 21:35:05 -Generating unique operation named: welcomeUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: addUsingGET_5
2018-07-24 21:35:05 -Generating unique operation named: editUsingGET_6
2018-07-24 21:35:05 -Generating unique operation named: listUsingGET_7
2018-07-24 21:35:05 -Generating unique operation named: removeUsingPOST_11
2018-07-24 21:35:05 -Generating unique operation named: saveUsingPOST_5
2018-07-24 21:35:05 -Generating unique operation named: treeUsingGET_1
2018-07-24 21:35:05 -Generating unique operation named: treeUsingGET_2
2018-07-24 21:35:05 -Generating unique operation named: updateUsingPOST_6
2018-07-24 21:35:05 -Generating unique operation named: batchRemoveUsingPOST_1
2018-07-24 21:35:06 -Generating unique operation named: editUsingGET_7
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_8
2018-07-24 21:35:06 -Generating unique operation named: addUsingGET_6
2018-07-24 21:35:06 -Generating unique operation named: editUsingGET_8
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_9
2018-07-24 21:35:06 -Generating unique operation named: removeUsingPOST_12
2018-07-24 21:35:06 -Generating unique operation named: removeUsingPOST_13
2018-07-24 21:35:06 -Generating unique operation named: saveUsingPOST_6
2018-07-24 21:35:06 -Generating unique operation named: updateUsingGET_4
2018-07-24 21:35:06 -Generating unique operation named: updateUsingHEAD_4
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPOST_7
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPUT_4
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPATCH_4
2018-07-24 21:35:06 -Generating unique operation named: updateUsingDELETE_4
2018-07-24 21:35:06 -Generating unique operation named: updateUsingOPTIONS_4
2018-07-24 21:35:06 -Generating unique operation named: updateUsingTRACE_4
2018-07-24 21:35:06 -Generating unique operation named: addUsingGET_7
2018-07-24 21:35:06 -Generating unique operation named: batchRemoveUsingPOST_2
2018-07-24 21:35:06 -Generating unique operation named: deployUsingPOST_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_10
2018-07-24 21:35:06 -Generating unique operation named: removeUsingPOST_14
2018-07-24 21:35:06 -Generating unique operation named: addUsingGET_8
2018-07-24 21:35:06 -Generating unique operation named: batchRemoveUsingPOST_3
2018-07-24 21:35:06 -Generating unique operation named: editUsingGET_9
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_11
2018-07-24 21:35:06 -Generating unique operation named: saveUsingPOST_7
2018-07-24 21:35:06 -Generating unique operation named: saveUsingPOST_8
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPOST_8
2018-07-24 21:35:06 -Generating unique operation named: addUsingGET_9
2018-07-24 21:35:06 -Generating unique operation named: editUsingGET_10
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_12
2018-07-24 21:35:06 -Generating unique operation named: removeUsingPOST_15
2018-07-24 21:35:06 -Generating unique operation named: removeUsingPOST_16
2018-07-24 21:35:06 -Generating unique operation named: updateUsingGET_5
2018-07-24 21:35:06 -Generating unique operation named: updateUsingHEAD_5
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPOST_9
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPUT_5
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPATCH_5
2018-07-24 21:35:06 -Generating unique operation named: updateUsingDELETE_5
2018-07-24 21:35:06 -Generating unique operation named: updateUsingOPTIONS_5
2018-07-24 21:35:06 -Generating unique operation named: updateUsingTRACE_5
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_13
2018-07-24 21:35:06 -Generating unique operation named: listUsingHEAD_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingPOST_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingPUT_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingPATCH_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingDELETE_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingOPTIONS_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingTRACE_1
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_14
2018-07-24 21:35:06 -Generating unique operation named: addUsingGET_10
2018-07-24 21:35:06 -Generating unique operation named: batchRemoveUsingPOST_4
2018-07-24 21:35:06 -Generating unique operation named: editUsingGET_11
2018-07-24 21:35:06 -Generating unique operation named: listUsingGET_15
2018-07-24 21:35:06 -Generating unique operation named: removeUsingPOST_17
2018-07-24 21:35:06 -Generating unique operation named: saveUsingPOST_9
2018-07-24 21:35:06 -Generating unique operation named: treeUsingGET_3
2018-07-24 21:35:06 -Generating unique operation named: treeViewUsingGET_1
2018-07-24 21:35:06 -Generating unique operation named: updateUsingPOST_10
2018-07-24 21:35:06 -Starting Quartz Scheduler now
2018-07-24 21:35:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2018-07-24 21:35:06 -Starting...
2018-07-24 21:35:06 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2018-07-24 21:35:06 -Started.
2018-07-24 21:35:06 -Initializing ProtocolHandler ["http-nio-80"]
2018-07-24 21:35:06 -Starting ProtocolHandler ["http-nio-80"]
2018-07-24 21:35:06 -Using a shared selector for servlet write/read
2018-07-24 21:35:06 -Tomcat started on port(s): 80 (http)
2018-07-24 21:35:06 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2018-07-24 21:35:06 -==> Parameters: 
2018-07-24 21:35:06 -<==      Total: 1
2018-07-24 21:35:06 -Started BootdoApplication in 23.066 seconds (JVM running for 25.977)
2018-07-24 21:35:59 -WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2018-07-24 21:38:58 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2018-07-24 21:38:58 -FrameworkServlet 'dispatcherServlet': initialization started
2018-07-24 21:38:58 -FrameworkServlet 'dispatcherServlet': initialization completed in 48 ms
2018-07-24 21:38:58 -Enabling session validation scheduler...
2018-07-24 21:38:58 -请求地址 : http://localhost/
2018-07-24 21:38:58 -HTTP METHOD : GET
2018-07-24 21:38:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 21:38:58 -参数 : [{}]
2018-07-24 21:38:58 -耗时 : 4
2018-07-24 21:38:58 -返回值 : redirect:/blog
2018-07-24 21:38:58 -请求地址 : http://localhost/blog
2018-07-24 21:38:58 -HTTP METHOD : GET
2018-07-24 21:38:58 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 21:38:58 -参数 : []
2018-07-24 21:38:58 -耗时 : 1
2018-07-24 21:38:58 -返回值 : blog/index/main
2018-07-24 21:38:58 -[THYMELEAF] INITIALIZING TEMPLATE ENGINE
2018-07-24 21:38:58 -[THYMELEAF] INITIALIZING TEMPLATE RESOLVER: org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver
2018-07-24 21:38:58 -[THYMELEAF] TEMPLATE RESOLVER INITIALIZED OK
2018-07-24 21:38:58 -[THYMELEAF] INITIALIZING MESSAGE RESOLVER: org.thymeleaf.spring4.messageresolver.SpringMessageResolver
2018-07-24 21:38:58 -[THYMELEAF] MESSAGE RESOLVER INITIALIZED OK
2018-07-24 21:38:58 -[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Cache Factory implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template modes:
[THYMELEAF]     * LEGACYHTML5
[THYMELEAF]     * XML
[THYMELEAF]     * HTML5
[THYMELEAF]     * VALIDXHTML
[THYMELEAF]     * VALIDXML
[THYMELEAF]     * XHTML
[THYMELEAF] * Template resolvers (in order):
[THYMELEAF]     * org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver
[THYMELEAF] * Message resolvers (in order):
[THYMELEAF]     * org.thymeleaf.spring4.messageresolver.SpringMessageResolver
[THYMELEAF] * Dialect [1 of 3]: org.thymeleaf.spring4.dialect.SpringStandardDialect
[THYMELEAF]     * Prefix: "th"
[THYMELEAF] * Dialect [2 of 3]: at.pollux.thymeleaf.shiro.dialect.ShiroDialect
[THYMELEAF]     * Prefix: "shiro"
[THYMELEAF] * Dialect [3 of 3]: nz.net.ultraq.thymeleaf.LayoutDialect
[THYMELEAF]     * Prefix: "layout"
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
2018-07-24 21:38:58 -[THYMELEAF] TEMPLATE ENGINE INITIALIZED
2018-07-24 21:38:59 -请求地址 : http://localhost/blog/open/list
2018-07-24 21:38:59 -HTTP METHOD : GET
2018-07-24 21:38:59 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 21:38:59 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 21:38:59 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 21:38:59 -==> Parameters: article(String)
2018-07-24 21:38:59 -<==      Total: 10
2018-07-24 21:38:59 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 21:38:59 -==> Parameters: article(String)
2018-07-24 21:38:59 -<==      Total: 1
2018-07-24 21:38:59 -耗时 : 98
2018-07-24 21:38:59 -返回值 : com.bootdo.common.utils.PageUtils@1b09c0c3
2018-07-24 21:39:02 -请求地址 : http://localhost/login
2018-07-24 21:39:02 -HTTP METHOD : GET
2018-07-24 21:39:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2018-07-24 21:39:02 -参数 : []
2018-07-24 21:39:02 -耗时 : 0
2018-07-24 21:39:02 -返回值 : login
2018-07-24 21:39:09 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:39:09 -==> Parameters: admin(String)
2018-07-24 21:39:09 -<==      Total: 1
2018-07-24 21:39:09 -请求地址 : http://localhost/login
2018-07-24 21:39:09 -HTTP METHOD : POST
2018-07-24 21:39:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 21:39:09 -参数 : [admin, 111111]
2018-07-24 21:39:09 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:39:09 -==> Parameters: admin(String)
2018-07-24 21:39:09 -<==      Total: 1
2018-07-24 21:39:09 -耗时 : 25
2018-07-24 21:39:09 -返回值 : {msg=操作成功, code=0}
2018-07-24 21:39:09 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2018-07-24 21:39:09 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:39:09 -==> Parameters: 1(Long), admin(String), 登录(String), 26(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 21:39:09.46(Timestamp)
2018-07-24 21:39:09 -<==    Updates: 1
2018-07-24 21:39:09 -请求地址 : http://localhost/index
2018-07-24 21:39:09 -HTTP METHOD : GET
2018-07-24 21:39:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:39:09 -参数 : [{}]
2018-07-24 21:39:09 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:39:09 -==> Parameters: 1(Long)
2018-07-24 21:39:09 -<==      Total: 27
2018-07-24 21:39:09 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:39:09 -==> Parameters: 138(Long)
2018-07-24 21:39:09 -<==      Total: 0
2018-07-24 21:39:09 -耗时 : 46
2018-07-24 21:39:09 -返回值 : index_v1
2018-07-24 21:39:09 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:39:09 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 46(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:39:09.613(Timestamp)
2018-07-24 21:39:09 -<==    Updates: 1
2018-07-24 21:39:09 -请求地址 : http://localhost/main
2018-07-24 21:39:09 -HTTP METHOD : GET
2018-07-24 21:39:09 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:39:09 -参数 : []
2018-07-24 21:39:09 -耗时 : 0
2018-07-24 21:39:09 -返回值 : main
2018-07-24 21:39:09 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:39:09 -HTTP METHOD : GET
2018-07-24 21:39:09 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:39:09 -参数 : []
2018-07-24 21:39:09 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:39:09 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:39:09 -<==      Total: 3
2018-07-24 21:39:09 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:39:09 -==> Parameters: 1(Long)
2018-07-24 21:39:09 -<==      Total: 1
2018-07-24 21:39:09 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:39:09 -==> Parameters: 1(Long)
2018-07-24 21:39:09 -<==      Total: 1
2018-07-24 21:39:09 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:39:09 -==> Parameters: 1(Long)
2018-07-24 21:39:09 -<==      Total: 1
2018-07-24 21:39:09 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:39:09 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:39:09 -<==      Total: 1
2018-07-24 21:39:09 -耗时 : 35
2018-07-24 21:39:09 -返回值 : com.bootdo.common.utils.PageUtils@6d1e2315
2018-07-24 21:39:10 -请求地址 : http://localhost/main
2018-07-24 21:39:10 -HTTP METHOD : GET
2018-07-24 21:39:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:39:10 -参数 : []
2018-07-24 21:39:10 -耗时 : 0
2018-07-24 21:39:10 -返回值 : main
2018-07-24 21:41:55 -请求地址 : http://localhost/sys/user/personal
2018-07-24 21:41:55 -HTTP METHOD : GET
2018-07-24 21:41:55 -CLASS_METHOD : com.bootdo.system.controller.UserController.personal
2018-07-24 21:41:55 -参数 : [{}]
2018-07-24 21:41:55 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 21:41:55 -==> Parameters: 1(Long)
2018-07-24 21:41:55 -<==      Total: 1
2018-07-24 21:41:55 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:41:55 -==> Parameters: 1(Long)
2018-07-24 21:41:55 -<==      Total: 1
2018-07-24 21:41:55 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 21:41:55 -==> Parameters: 6(Long)
2018-07-24 21:41:55 -<==      Total: 1
2018-07-24 21:41:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 21:41:55 -==> Parameters: hobby(String)
2018-07-24 21:41:55 -<==      Total: 2
2018-07-24 21:41:55 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 21:41:55 -==> Parameters: sex(String)
2018-07-24 21:41:55 -<==      Total: 2
2018-07-24 21:41:55 -耗时 : 72
2018-07-24 21:41:55 -返回值 : system/user/personal
2018-07-24 21:43:36 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2018-07-24 21:43:36 -==> Parameters: 1(Long)
2018-07-24 21:43:36 -<==      Total: 47
2018-07-24 21:43:36 -请求地址 : http://localhost/sys/user/updatePeronal
2018-07-24 21:43:36 -HTTP METHOD : POST
2018-07-24 21:43:36 -CLASS_METHOD : com.bootdo.system.controller.UserController.updatePeronal
2018-07-24 21:43:36 -参数 : [UserDO{userId=1, username='null', name='超级管理员', password='null', deptId=null, deptName='null', email='admin@example.com', mobile='17699999999', status=null, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=null, sex=96, birth=Thu Dec 14 00:00:00 CST 2017, picId=null, liveAddress='ccc', hobby='122;121;', province='安徽省', city='合肥市', district='肥西县'}]
2018-07-24 21:43:36 -==>  Preparing: update sys_user SET `name` = ?, `email` = ?, `mobile` = ?, `sex` = ?, `birth` = ?, `live_address` = ?, `hobby` = ?, `province` = ?, `city` = ?, `district` = ? where user_id = ? 
2018-07-24 21:43:36 -==> Parameters: 超级管理员(String), admin@example.com(String), 17699999999(String), 96(Long), 2017-12-14 00:00:00.0(Timestamp), ccc(String), 122;121;(String), 安徽省(String), 合肥市(String), 肥西县(String), 1(Long)
2018-07-24 21:43:36 -<==    Updates: 1
2018-07-24 21:43:36 -耗时 : 28
2018-07-24 21:43:36 -返回值 : {msg=操作成功, code=0}
2018-07-24 21:43:36 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:43:36 -==> Parameters: 1(Long), admin(String), 更新用户(String), 29(Integer), com.bootdo.system.controller.UserController.updatePeronal()(String), null, 127.0.0.1(String), 2018-07-24 21:43:36.65(Timestamp)
2018-07-24 21:43:36 -<==    Updates: 1
2018-07-24 21:45:12 -请求地址 : http://localhost/sys/user/personal
2018-07-24 21:45:12 -HTTP METHOD : GET
2018-07-24 21:45:12 -CLASS_METHOD : com.bootdo.system.controller.UserController.personal
2018-07-24 21:45:12 -参数 : [{}]
2018-07-24 21:45:12 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 21:45:12 -==> Parameters: 1(Long)
2018-07-24 21:45:12 -<==      Total: 1
2018-07-24 21:45:12 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:45:12 -==> Parameters: 1(Long)
2018-07-24 21:45:12 -<==      Total: 1
2018-07-24 21:45:12 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 21:45:12 -==> Parameters: 6(Long)
2018-07-24 21:45:12 -<==      Total: 1
2018-07-24 21:45:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 21:45:12 -==> Parameters: hobby(String)
2018-07-24 21:45:12 -<==      Total: 2
2018-07-24 21:45:12 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 21:45:12 -==> Parameters: sex(String)
2018-07-24 21:45:12 -<==      Total: 2
2018-07-24 21:45:12 -耗时 : 48
2018-07-24 21:45:12 -返回值 : system/user/personal
2018-07-24 21:45:48 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:45:48 -==> Parameters: 1(Long), admin(String), error(String), null, http://localhost/index(String), org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported(String), null, 2018-07-24 21:45:48.317(Timestamp)
2018-07-24 21:45:48 -Request method 'POST' not supported
org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:207)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:374)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:314)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:352)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:940)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:208)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2018-07-24 21:45:48 -<==    Updates: 1
2018-07-24 21:45:49 -请求地址 : http://localhost/index
2018-07-24 21:45:49 -HTTP METHOD : GET
2018-07-24 21:45:49 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:45:49 -参数 : [{}]
2018-07-24 21:45:49 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:45:49 -==> Parameters: 1(Long)
2018-07-24 21:45:49 -<==      Total: 27
2018-07-24 21:45:49 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:45:49 -==> Parameters: 138(Long)
2018-07-24 21:45:49 -<==      Total: 0
2018-07-24 21:45:49 -耗时 : 19
2018-07-24 21:45:49 -返回值 : index_v1
2018-07-24 21:45:49 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:45:49 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 19(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:45:49.949(Timestamp)
2018-07-24 21:45:49 -<==    Updates: 1
2018-07-24 21:45:50 -请求地址 : http://localhost/main
2018-07-24 21:45:50 -HTTP METHOD : GET
2018-07-24 21:45:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:45:50 -参数 : []
2018-07-24 21:45:50 -耗时 : 0
2018-07-24 21:45:50 -返回值 : main
2018-07-24 21:45:50 -请求地址 : http://localhost/main
2018-07-24 21:45:50 -HTTP METHOD : GET
2018-07-24 21:45:50 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:45:50 -参数 : []
2018-07-24 21:45:50 -耗时 : 1
2018-07-24 21:45:50 -返回值 : main
2018-07-24 21:52:23 -请求地址 : http://localhost/
2018-07-24 21:52:23 -HTTP METHOD : GET
2018-07-24 21:52:23 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 21:52:23 -参数 : [{}]
2018-07-24 21:52:23 -耗时 : 2
2018-07-24 21:52:23 -返回值 : redirect:/blog
2018-07-24 21:52:23 -请求地址 : http://localhost/blog
2018-07-24 21:52:23 -HTTP METHOD : GET
2018-07-24 21:52:23 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 21:52:23 -参数 : []
2018-07-24 21:52:23 -耗时 : 1
2018-07-24 21:52:23 -返回值 : blog/index/main
2018-07-24 21:52:23 -请求地址 : http://localhost/blog/open/list
2018-07-24 21:52:23 -HTTP METHOD : GET
2018-07-24 21:52:23 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 21:52:23 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 21:52:23 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 21:52:23 -==> Parameters: article(String)
2018-07-24 21:52:23 -<==      Total: 10
2018-07-24 21:52:23 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 21:52:23 -==> Parameters: article(String)
2018-07-24 21:52:23 -<==      Total: 1
2018-07-24 21:52:23 -耗时 : 20
2018-07-24 21:52:23 -返回值 : com.bootdo.common.utils.PageUtils@4ad2a3ae
2018-07-24 21:52:24 -请求地址 : http://localhost/login
2018-07-24 21:52:24 -HTTP METHOD : GET
2018-07-24 21:52:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2018-07-24 21:52:24 -参数 : []
2018-07-24 21:52:24 -耗时 : 0
2018-07-24 21:52:24 -返回值 : login
2018-07-24 21:52:28 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:52:28 -==> Parameters: admin(String)
2018-07-24 21:52:28 -<==      Total: 1
2018-07-24 21:52:28 -请求地址 : http://localhost/login
2018-07-24 21:52:28 -HTTP METHOD : POST
2018-07-24 21:52:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 21:52:28 -参数 : [admin, 2]
2018-07-24 21:52:28 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:52:28 -==> Parameters: admin(String)
2018-07-24 21:52:28 -<==      Total: 1
2018-07-24 21:52:28 -耗时 : 5
2018-07-24 21:52:28 -返回值 : {msg=用户或密码错误, code=500}
2018-07-24 21:52:28 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:52:28 -==> Parameters: -1(Long), 获取用户信息为空(String), 登录(String), 5(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 21:52:28.069(Timestamp)
2018-07-24 21:52:28 -<==    Updates: 1
2018-07-24 21:52:31 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:52:31 -==> Parameters: admin1(String)
2018-07-24 21:52:31 -<==      Total: 0
2018-07-24 21:52:31 -Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - admin1, rememberMe=false (0:0:0:0:0:0:0:1)].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:653)
	at java.util.ArrayList.get(ArrayList.java:429)
	at com.bootdo.system.shiro.UserRealm.doGetAuthenticationInfo(UserRealm.java:52)
	at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:568)
	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180)
	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267)
	at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198)
	at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106)
	at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:270)
	at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:256)
	at org.apache.shiro.web.filter.authc.AuthenticatingFilter.executeLogin(AuthenticatingFilter.java:53)
	at org.apache.shiro.web.filter.authc.FormAuthenticationFilter.onAccessDenied(FormAuthenticationFilter.java:154)
	at org.apache.shiro.web.filter.AccessControlFilter.onAccessDenied(AccessControlFilter.java:133)
	at org.apache.shiro.web.filter.AccessControlFilter.onPreHandle(AccessControlFilter.java:162)
	at org.apache.shiro.web.filter.PathMatchingFilter.isFilterChainContinued(PathMatchingFilter.java:203)
	at org.apache.shiro.web.filter.PathMatchingFilter.preHandle(PathMatchingFilter.java:178)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:131)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:208)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2018-07-24 21:52:31 -请求地址 : http://localhost/login
2018-07-24 21:52:31 -HTTP METHOD : POST
2018-07-24 21:52:31 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 21:52:31 -参数 : [admin1, 2]
2018-07-24 21:52:31 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:52:31 -==> Parameters: admin1(String)
2018-07-24 21:52:31 -<==      Total: 0
2018-07-24 21:52:31 -Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - admin1, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:653)
	at java.util.ArrayList.get(ArrayList.java:429)
	at com.bootdo.system.shiro.UserRealm.doGetAuthenticationInfo(UserRealm.java:52)
	at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:568)
	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180)
	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267)
	at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198)
	at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106)
	at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:270)
	at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:256)
	at com.bootdo.system.controller.LoginController.ajaxLogin(LoginController.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:741)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)
	at com.bootdo.common.aspect.WebLogAspect.doAround(WebLogAspect.java:57)
	at sun.reflect.GeneratedMethodAccessor133.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:52)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)
	at com.bootdo.common.aspect.LogAspect.around(LogAspect.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)
	at com.bootdo.system.controller.LoginController$$EnhancerBySpringCGLIB$$7af10bff.ajaxLogin(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:208)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2018-07-24 21:52:31 -耗时 : 5
2018-07-24 21:52:31 -返回值 : {msg=用户或密码错误, code=500}
2018-07-24 21:52:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:52:31 -==> Parameters: -1(Long), 获取用户信息为空(String), 登录(String), 6(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 21:52:31.636(Timestamp)
2018-07-24 21:52:31 -<==    Updates: 1
2018-07-24 21:52:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:52:38 -==> Parameters: admin(String)
2018-07-24 21:52:38 -<==      Total: 1
2018-07-24 21:52:38 -请求地址 : http://localhost/login
2018-07-24 21:52:38 -HTTP METHOD : POST
2018-07-24 21:52:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 21:52:38 -参数 : [admin, 111111]
2018-07-24 21:52:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:52:38 -==> Parameters: admin(String)
2018-07-24 21:52:38 -<==      Total: 1
2018-07-24 21:52:38 -耗时 : 3
2018-07-24 21:52:38 -返回值 : {msg=操作成功, code=0}
2018-07-24 21:52:38 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:52:38 -==> Parameters: 1(Long), admin(String), 登录(String), 3(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 21:52:38.672(Timestamp)
2018-07-24 21:52:38 -<==    Updates: 1
2018-07-24 21:52:38 -请求地址 : http://localhost/index
2018-07-24 21:52:38 -HTTP METHOD : GET
2018-07-24 21:52:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:52:38 -参数 : [{}]
2018-07-24 21:52:38 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:52:38 -==> Parameters: 1(Long)
2018-07-24 21:52:38 -<==      Total: 27
2018-07-24 21:52:38 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:52:38 -==> Parameters: 138(Long)
2018-07-24 21:52:38 -<==      Total: 0
2018-07-24 21:52:38 -耗时 : 12
2018-07-24 21:52:38 -返回值 : index_v1
2018-07-24 21:52:38 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:52:38 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 12(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:52:38.701(Timestamp)
2018-07-24 21:52:38 -<==    Updates: 1
2018-07-24 21:52:38 -请求地址 : http://localhost/main
2018-07-24 21:52:38 -HTTP METHOD : GET
2018-07-24 21:52:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:52:38 -参数 : []
2018-07-24 21:52:38 -耗时 : 0
2018-07-24 21:52:38 -返回值 : main
2018-07-24 21:52:38 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:52:38 -HTTP METHOD : GET
2018-07-24 21:52:38 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:52:38 -参数 : []
2018-07-24 21:52:38 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:52:38 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:52:38 -<==      Total: 3
2018-07-24 21:52:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:52:38 -==> Parameters: 1(Long)
2018-07-24 21:52:38 -<==      Total: 1
2018-07-24 21:52:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:52:38 -==> Parameters: 1(Long)
2018-07-24 21:52:38 -<==      Total: 1
2018-07-24 21:52:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:52:38 -==> Parameters: 1(Long)
2018-07-24 21:52:38 -<==      Total: 1
2018-07-24 21:52:38 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:52:38 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:52:38 -<==      Total: 1
2018-07-24 21:52:38 -耗时 : 14
2018-07-24 21:52:38 -返回值 : com.bootdo.common.utils.PageUtils@38fc9279
2018-07-24 21:52:38 -请求地址 : http://localhost/main
2018-07-24 21:52:38 -HTTP METHOD : GET
2018-07-24 21:52:38 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:52:38 -参数 : []
2018-07-24 21:52:38 -耗时 : 0
2018-07-24 21:52:38 -返回值 : main
2018-07-24 21:58:10 -请求地址 : http://localhost/index
2018-07-24 21:58:10 -HTTP METHOD : GET
2018-07-24 21:58:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:58:10 -参数 : [{}]
2018-07-24 21:58:10 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:58:10 -==> Parameters: 1(Long)
2018-07-24 21:58:10 -<==      Total: 27
2018-07-24 21:58:10 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:58:10 -==> Parameters: 138(Long)
2018-07-24 21:58:10 -<==      Total: 0
2018-07-24 21:58:10 -耗时 : 10
2018-07-24 21:58:10 -返回值 : index_v1
2018-07-24 21:58:10 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:58:10 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 10(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:58:10.578(Timestamp)
2018-07-24 21:58:10 -<==    Updates: 1
2018-07-24 21:58:10 -请求地址 : http://localhost/main
2018-07-24 21:58:10 -HTTP METHOD : GET
2018-07-24 21:58:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:10 -参数 : []
2018-07-24 21:58:10 -耗时 : 0
2018-07-24 21:58:10 -返回值 : main
2018-07-24 21:58:10 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:58:10 -HTTP METHOD : GET
2018-07-24 21:58:10 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:58:10 -参数 : []
2018-07-24 21:58:10 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:58:10 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:58:10 -<==      Total: 3
2018-07-24 21:58:10 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:10 -==> Parameters: 1(Long)
2018-07-24 21:58:10 -<==      Total: 1
2018-07-24 21:58:10 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:10 -==> Parameters: 1(Long)
2018-07-24 21:58:10 -<==      Total: 1
2018-07-24 21:58:10 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:10 -==> Parameters: 1(Long)
2018-07-24 21:58:10 -<==      Total: 1
2018-07-24 21:58:10 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:58:10 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:58:10 -<==      Total: 1
2018-07-24 21:58:10 -耗时 : 18
2018-07-24 21:58:10 -返回值 : com.bootdo.common.utils.PageUtils@6d1dee0c
2018-07-24 21:58:10 -请求地址 : http://localhost/main
2018-07-24 21:58:10 -HTTP METHOD : GET
2018-07-24 21:58:10 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:10 -参数 : []
2018-07-24 21:58:10 -耗时 : 0
2018-07-24 21:58:10 -返回值 : main
2018-07-24 21:58:21 -请求地址 : http://localhost/index
2018-07-24 21:58:21 -HTTP METHOD : GET
2018-07-24 21:58:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:58:21 -参数 : [{}]
2018-07-24 21:58:21 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:58:21 -==> Parameters: 1(Long)
2018-07-24 21:58:21 -<==      Total: 27
2018-07-24 21:58:21 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:58:21 -==> Parameters: 138(Long)
2018-07-24 21:58:21 -<==      Total: 0
2018-07-24 21:58:21 -耗时 : 10
2018-07-24 21:58:21 -返回值 : index_v1
2018-07-24 21:58:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:58:21 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 10(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:58:21.167(Timestamp)
2018-07-24 21:58:21 -<==    Updates: 1
2018-07-24 21:58:21 -请求地址 : http://localhost/main
2018-07-24 21:58:21 -HTTP METHOD : GET
2018-07-24 21:58:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:21 -参数 : []
2018-07-24 21:58:21 -耗时 : 0
2018-07-24 21:58:21 -返回值 : main
2018-07-24 21:58:21 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:58:21 -HTTP METHOD : GET
2018-07-24 21:58:21 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:58:21 -参数 : []
2018-07-24 21:58:21 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:58:21 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:58:21 -<==      Total: 3
2018-07-24 21:58:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:21 -==> Parameters: 1(Long)
2018-07-24 21:58:21 -<==      Total: 1
2018-07-24 21:58:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:21 -==> Parameters: 1(Long)
2018-07-24 21:58:21 -<==      Total: 1
2018-07-24 21:58:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:21 -==> Parameters: 1(Long)
2018-07-24 21:58:21 -<==      Total: 1
2018-07-24 21:58:21 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:58:21 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:58:21 -<==      Total: 1
2018-07-24 21:58:21 -耗时 : 12
2018-07-24 21:58:21 -返回值 : com.bootdo.common.utils.PageUtils@56ae1131
2018-07-24 21:58:21 -请求地址 : http://localhost/main
2018-07-24 21:58:21 -HTTP METHOD : GET
2018-07-24 21:58:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:21 -参数 : []
2018-07-24 21:58:21 -耗时 : 1
2018-07-24 21:58:21 -返回值 : main
2018-07-24 21:58:21 -请求地址 : http://localhost/index
2018-07-24 21:58:21 -HTTP METHOD : GET
2018-07-24 21:58:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:58:21 -参数 : [{}]
2018-07-24 21:58:21 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:58:21 -==> Parameters: 1(Long)
2018-07-24 21:58:21 -<==      Total: 27
2018-07-24 21:58:21 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:58:21 -==> Parameters: 138(Long)
2018-07-24 21:58:21 -<==      Total: 0
2018-07-24 21:58:21 -耗时 : 11
2018-07-24 21:58:21 -返回值 : index_v1
2018-07-24 21:58:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:58:21 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 11(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:58:21.906(Timestamp)
2018-07-24 21:58:21 -<==    Updates: 1
2018-07-24 21:58:21 -请求地址 : http://localhost/main
2018-07-24 21:58:21 -HTTP METHOD : GET
2018-07-24 21:58:21 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:21 -参数 : []
2018-07-24 21:58:21 -耗时 : 1
2018-07-24 21:58:21 -返回值 : main
2018-07-24 21:58:22 -请求地址 : http://localhost/index
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:58:22 -参数 : [{}]
2018-07-24 21:58:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 27
2018-07-24 21:58:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:58:22 -==> Parameters: 138(Long)
2018-07-24 21:58:22 -<==      Total: 0
2018-07-24 21:58:22 -耗时 : 10
2018-07-24 21:58:22 -返回值 : index_v1
2018-07-24 21:58:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:58:22 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 11(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:58:22.108(Timestamp)
2018-07-24 21:58:22 -<==    Updates: 1
2018-07-24 21:58:22 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:58:22 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:58:22 -<==      Total: 3
2018-07-24 21:58:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -耗时 : 13
2018-07-24 21:58:22 -返回值 : com.bootdo.common.utils.PageUtils@5589e4ff
2018-07-24 21:58:22 -请求地址 : http://localhost/main
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -耗时 : 0
2018-07-24 21:58:22 -返回值 : main
2018-07-24 21:58:22 -请求地址 : http://localhost/index
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:58:22 -参数 : [{}]
2018-07-24 21:58:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 27
2018-07-24 21:58:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:58:22 -==> Parameters: 138(Long)
2018-07-24 21:58:22 -<==      Total: 0
2018-07-24 21:58:22 -耗时 : 10
2018-07-24 21:58:22 -返回值 : index_v1
2018-07-24 21:58:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:58:22 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 10(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:58:22.281(Timestamp)
2018-07-24 21:58:22 -<==    Updates: 1
2018-07-24 21:58:22 -请求地址 : http://localhost/main
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -耗时 : 0
2018-07-24 21:58:22 -返回值 : main
2018-07-24 21:58:22 -请求地址 : http://localhost/index
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:58:22 -参数 : [{}]
2018-07-24 21:58:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 27
2018-07-24 21:58:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:58:22 -==> Parameters: 138(Long)
2018-07-24 21:58:22 -<==      Total: 0
2018-07-24 21:58:22 -耗时 : 9
2018-07-24 21:58:22 -返回值 : index_v1
2018-07-24 21:58:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:58:22 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 9(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:58:22.384(Timestamp)
2018-07-24 21:58:22 -<==    Updates: 1
2018-07-24 21:58:22 -请求地址 : http://localhost/main
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -耗时 : 1
2018-07-24 21:58:22 -返回值 : main
2018-07-24 21:58:22 -请求地址 : http://localhost/main
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -耗时 : 1
2018-07-24 21:58:22 -返回值 : main
2018-07-24 21:58:22 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:58:22 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:58:22 -<==      Total: 3
2018-07-24 21:58:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:58:22 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:58:22 -<==      Total: 1
2018-07-24 21:58:22 -耗时 : 14
2018-07-24 21:58:22 -返回值 : com.bootdo.common.utils.PageUtils@40628745
2018-07-24 21:58:22 -请求地址 : http://localhost/main
2018-07-24 21:58:22 -HTTP METHOD : GET
2018-07-24 21:58:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:58:22 -参数 : []
2018-07-24 21:58:22 -耗时 : 1
2018-07-24 21:58:22 -返回值 : main
2018-07-24 21:58:36 -Starting BootdoApplication on SKY-2017 with PID 9576 (E:\myIdeaProject\bootdo\target\classes started by Administrator in E:\myIdeaProject\bootdo)
2018-07-24 21:58:36 -Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2018-07-24 21:58:36 -The following profiles are active: dev
2018-07-24 21:58:36 -HV000001: Hibernate Validator 5.3.6.Final
2018-07-24 21:58:36 -Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@614ca7df: startup date [Tue Jul 24 21:58:36 CST 2018]; root of context hierarchy
2018-07-24 21:58:39 -Multiple Spring Data modules found, entering strict repository configuration mode!
2018-07-24 21:58:40 -Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$8d80178f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration' of type [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$$EnhancerBySpringCGLIB$$81f3dc33] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'spring.cache-org.springframework.boot.autoconfigure.cache.CacheProperties' of type [org.springframework.boot.autoconfigure.cache.CacheProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'cacheManagerCustomizers' of type [org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration' of type [org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration$$EnhancerBySpringCGLIB$$1c92a931] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'ehCacheCacheManager' of type [net.sf.ehcache.CacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'cacheManager' of type [org.springframework.cache.ehcache.EhCacheCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'cacheAutoConfigurationValidator' of type [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$CacheManagerValidator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$446de171] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:40 -Bean 'shiroConfig' of type [com.bootdo.system.config.ShiroConfig$$EnhancerBySpringCGLIB$$36c71018] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:41 -Bean 'userRealm' of type [com.bootdo.system.shiro.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:41 -No configuration found. Configuring ehcache from ehcache-failsafe.xml  found in the classpath: jar:file:/C:/Users/Administrator/.m2/repository/net/sf/ehcache/ehcache-core/2.5.3/ehcache-core-2.5.3.jar!/ehcache-failsafe.xml
2018-07-24 21:58:41 -Bean 'ehCacheManager' of type [org.apache.shiro.cache.ehcache.EhCacheManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:41 -Cache with name 'com.bootdo.system.shiro.UserRealm.authorizationCache' does not yet exist.  Creating now.
2018-07-24 21:58:41 -Added EhCache named [com.bootdo.system.shiro.UserRealm.authorizationCache]
2018-07-24 21:58:41 -Bean 'sessionDAO' of type [org.apache.shiro.session.mgt.eis.MemorySessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:41 -Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:41 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:41 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-24 21:58:42 -Tomcat initialized with port(s): 80 (http)
2018-07-24 21:58:42 -Starting service [Tomcat]
2018-07-24 21:58:42 -Starting Servlet Engine: Apache Tomcat/8.5.23
2018-07-24 21:58:42 -Initializing Spring embedded WebApplicationContext
2018-07-24 21:58:42 -Root WebApplicationContext: initialization completed in 6347 ms
2018-07-24 21:58:43 -Mapping filter: 'characterEncodingFilter' to: [/*]
2018-07-24 21:58:43 -Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-07-24 21:58:43 -Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-07-24 21:58:43 -Mapping filter: 'requestContextFilter' to: [/*]
2018-07-24 21:58:43 -Mapping filter: 'springSecurityFilterChain' to: [/*]
2018-07-24 21:58:43 -Filter xssFilter was not registered (disabled)
2018-07-24 21:58:43 -Mapping filter: 'webStatFilter' to urls: [/*]
2018-07-24 21:58:43 -Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2018-07-24 21:58:43 -Mapping servlet: 'statViewServlet' to [/druid/*]
2018-07-24 21:58:43 -Mapping servlet: 'dispatcherServlet' to [/]
2018-07-24 21:58:44 -{dataSource-1} inited
2018-07-24 21:58:46 -ProcessEngine default created
2018-07-24 21:58:47 -ApplicationContext registed-->org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@614ca7df: startup date [Tue Jul 24 21:58:36 CST 2018]; root of context hierarchy
2018-07-24 21:58:48 -Using default implementation for ThreadExecutor
2018-07-24 21:58:48 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2018-07-24 21:58:48 -Quartz Scheduler v.2.2.1 created.
2018-07-24 21:58:48 -RAMJobStore initialized.
2018-07-24 21:58:48 -Scheduler meta-data: Quartz Scheduler (v2.2.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2018-07-24 21:58:48 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2018-07-24 21:58:48 -Quartz scheduler version: 2.2.1
2018-07-24 21:58:48 -JobFactory set to: com.bootdo.common.quartz.factory.JobFactory@134d7ffa
2018-07-24 21:58:48 -Initializing ExecutorService  'clientInboundChannelExecutor'
2018-07-24 21:58:48 -Initializing ExecutorService  'clientOutboundChannelExecutor'
2018-07-24 21:58:50 -Mapped "{[/activiti/model/{id}],methods=[DELETE]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ModelController.remove(java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/activiti/model/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.ModelController.list(int,int)
2018-07-24 21:58:50 -Mapped "{[/activiti/model/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ModelController.batchRemove(java.lang.String[])
2018-07-24 21:58:50 -Mapped "{[/activiti/model],methods=[GET]}" onto org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.ModelController.model()
2018-07-24 21:58:50 -Mapped "{[/activiti/model/add]}" onto public void com.bootdo.activiti.controller.ModelController.newModel(javax.servlet.http.HttpServletResponse) throws java.io.UnsupportedEncodingException
2018-07-24 21:58:50 -Mapped "{[/activiti/model/{modelId}/json],methods=[GET]}" onto public com.fasterxml.jackson.databind.node.ObjectNode com.bootdo.activiti.controller.ModelController.getEditorJson(java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/activiti/editor/stencilset],methods=[GET],produces=[application/json;charset=utf-8]}" onto public java.lang.String com.bootdo.activiti.controller.ModelController.getStencilset()
2018-07-24 21:58:50 -Mapped "{[/activiti/model/edit/{id}],methods=[GET]}" onto public void com.bootdo.activiti.controller.ModelController.edit(javax.servlet.http.HttpServletResponse,java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/activiti/model/deploy/{id}],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ModelController.deploy(java.lang.String) throws java.lang.Exception
2018-07-24 21:58:50 -Mapped "{[/activiti/model/{modelId}/save],methods=[PUT]}" onto public void com.bootdo.activiti.controller.ModelController.saveModel(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/activiti/model/export/{id}],methods=[GET]}" onto public void com.bootdo.activiti.controller.ModelController.exportToXml(java.lang.String,javax.servlet.http.HttpServletResponse)
2018-07-24 21:58:50 -Mapped "{[/activiti/process/add],methods=[GET]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.ProcessController.add()
2018-07-24 21:58:50 -Mapped "{[/activiti/process/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.remove(java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/activiti/process/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.ProcessController.list(int,int)
2018-07-24 21:58:50 -Mapped "{[/activiti/process/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.batchRemove(java.lang.String[])
2018-07-24 21:58:50 -Mapped "{[/activiti/process],methods=[GET]}" onto org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.ProcessController.process()
2018-07-24 21:58:50 -Mapped "{[/activiti/process/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.deploy(java.lang.String,java.lang.String,org.springframework.web.multipart.MultipartFile)
2018-07-24 21:58:50 -Mapped "{[/activiti/process/resource/read/{xml}/{id}]}" onto public void com.bootdo.activiti.controller.ProcessController.resourceRead(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-24 21:58:50 -Mapped "{[/activiti/process/convertToModel/{procDefId}]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.ProcessController.convertToModel(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes) throws java.io.UnsupportedEncodingException,javax.xml.stream.XMLStreamException
2018-07-24 21:58:50 -Mapped "{[/act/salary/form],methods=[GET]}" onto java.lang.String com.bootdo.activiti.controller.SalaryController.add()
2018-07-24 21:58:50 -Mapped "{[/act/salary/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.remove(java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/act/salary/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.remove(java.lang.String[])
2018-07-24 21:58:50 -Mapped "{[/act/salary/update]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.update(com.bootdo.activiti.domain.SalaryDO)
2018-07-24 21:58:50 -Mapped "{[/act/salary/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.SalaryController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/act/salary/form/{taskId}],methods=[GET]}" onto java.lang.String com.bootdo.activiti.controller.SalaryController.edit(java.lang.String,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/act/salary],methods=[GET]}" onto java.lang.String com.bootdo.activiti.controller.SalaryController.Salary()
2018-07-24 21:58:50 -Mapped "{[/act/salary/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.activiti.controller.SalaryController.saveOrUpdate(com.bootdo.activiti.domain.SalaryDO)
2018-07-24 21:58:50 -Mapped "{[/activiti/task/form/{procDefId}/{taskId}],methods=[GET]}" onto public void com.bootdo.activiti.controller.TaskController.form(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2018-07-24 21:58:50 -Mapped "{[/activiti/task/gotoList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.activiti.controller.TaskController.list(int,int)
2018-07-24 21:58:50 -Mapped "{[/activiti/task/goto],methods=[GET]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.TaskController.gotoTask()
2018-07-24 21:58:50 -Mapped "{[/activiti/task/form/{procDefId}],methods=[GET]}" onto public void com.bootdo.activiti.controller.TaskController.startForm(java.lang.String,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2018-07-24 21:58:50 -Mapped "{[/activiti/task/todo],methods=[GET]}" onto org.springframework.web.servlet.ModelAndView com.bootdo.activiti.controller.TaskController.todo()
2018-07-24 21:58:50 -Mapped "{[/activiti/task/todoList],methods=[GET]}" onto java.util.List<com.bootdo.activiti.vo.TaskVO> com.bootdo.activiti.controller.TaskController.todoList()
2018-07-24 21:58:50 -Mapped "{[/activiti/task/trace/photo/{procDefId}/{execId}]}" onto public void com.bootdo.activiti.controller.TaskController.tracePhoto(java.lang.String,java.lang.String,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-24 21:58:50 -Mapped "{[/blog/open/post/{cid}],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.BlogController.post(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/blog/open/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.blog.controller.BlogController.opentList(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/blog],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.BlogController.blog()
2018-07-24 21:58:50 -Mapped "{[/blog/open/page/{categories}],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.BlogController.about(java.lang.String,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/add],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.ContentController.add()
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.remove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/update]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.update(com.bootdo.blog.domain.ContentDO)
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.blog.controller.ContentController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.blog.controller.ContentController.save(com.bootdo.blog.domain.ContentDO)
2018-07-24 21:58:50 -Mapped "{[/blog/bContent/edit/{cid}],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.ContentController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/blog/bContent],methods=[GET]}" onto java.lang.String com.bootdo.blog.controller.ContentController.bContent()
2018-07-24 21:58:50 -Mapped "{[/common/dict/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.add()
2018-07-24 21:58:50 -Mapped "{[/common/dict/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/common/dict/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.remove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/common/dict/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.update(com.bootdo.common.domain.DictDO)
2018-07-24 21:58:50 -Mapped "{[/common/dict/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.DictController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/common/dict/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.DictController.save(com.bootdo.common.domain.DictDO)
2018-07-24 21:58:50 -Mapped "{[/common/dict/type],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listType()
2018-07-24 21:58:50 -Mapped "{[/common/dict/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/common/dict],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.dict()
2018-07-24 21:58:50 -Mapped "{[/common/dict/add/{type}/{description}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.DictController.addD(org.springframework.ui.Model,java.lang.String,java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/common/dict/list/{type}],methods=[GET]}" onto public java.util.List<com.bootdo.common.domain.DictDO> com.bootdo.common.controller.DictController.listByType(java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.add()
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long,javax.servlet.http.HttpServletRequest)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.remove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/update]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.update(com.bootdo.common.domain.FileDO)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.FileController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.save(com.bootdo.common.domain.FileDO)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.FileController.info(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/edit],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.FileController.sysFile(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/common/sysFile/upload],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.FileController.upload(org.springframework.web.multipart.MultipartFile,javax.servlet.http.HttpServletRequest)
2018-07-24 21:58:50 -Mapped "{[/common/generator/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.GeneratorController.update(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/common/generator/list],methods=[GET]}" onto java.util.List<java.util.Map<java.lang.String, java.lang.Object>> com.bootdo.common.controller.GeneratorController.list()
2018-07-24 21:58:50 -Mapped "{[/common/generator/code/{tableName}]}" onto public void com.bootdo.common.controller.GeneratorController.code(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2018-07-24 21:58:50 -Mapped "{[/common/generator],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.GeneratorController.generator()
2018-07-24 21:58:50 -Mapped "{[/common/generator/edit],methods=[GET]}" onto public java.lang.String com.bootdo.common.controller.GeneratorController.edit(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/common/generator/batchCode]}" onto public void com.bootdo.common.controller.GeneratorController.batchCode(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String) throws java.io.IOException
2018-07-24 21:58:50 -Mapped "{[/common/job/add],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.add()
2018-07-24 21:58:50 -Mapped "{[/common/job/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/common/job/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.remove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/common/job/update],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.update(com.bootdo.common.domain.TaskDO)
2018-07-24 21:58:50 -Mapped "{[/common/job/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.common.controller.JobController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/common/job/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.save(com.bootdo.common.domain.TaskDO)
2018-07-24 21:58:50 -Mapped "{[/common/job/info/{id}]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.info(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/common/job/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/common/job/changeJobStatus],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.common.controller.JobController.changeJobStatus(java.lang.Long,java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/common/job],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.JobController.taskScheduleJob()
2018-07-24 21:58:50 -Mapped "{[/common/log/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/common/log],methods=[GET]}" onto java.lang.String com.bootdo.common.controller.LogController.log()
2018-07-24 21:58:50 -Mapped "{[/common/log/list],methods=[GET]}" onto com.bootdo.common.domain.PageDO<com.bootdo.common.domain.LogDO> com.bootdo.common.controller.LogController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/common/log/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.common.controller.LogController.batchRemove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/error]}" onto public com.bootdo.common.utils.R com.bootdo.common.exception.MainsiteErrorController.handleError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-24 21:58:50 -Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView com.bootdo.common.exception.MainsiteErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/add],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.add()
2018-07-24 21:58:50 -Mapped "{[/oa/notify/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.remove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/oa/notify/update]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.update(com.bootdo.oa.domain.NotifyDO)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/read/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.read(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/list],methods=[GET]}" onto public com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.oa.controller.NotifyController.save(com.bootdo.oa.domain.NotifyDO)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/message],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.message()
2018-07-24 21:58:50 -Mapped "{[/oa/notify/selfList],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.oa.controller.NotifyController.selfList(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/oa/notify/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/oa/notify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.oaNotify()
2018-07-24 21:58:50 -Mapped "{[/oa/notify/selfNotify],methods=[GET]}" onto java.lang.String com.bootdo.oa.controller.NotifyController.selefNotify()
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.add(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/remove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/batchRemove],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.remove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/update]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.update(com.bootdo.system.domain.DeptDO)
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/list],methods=[GET]}" onto public java.util.List<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.list()
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/save],methods=[POST]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.DeptController.save(com.bootdo.system.domain.DeptDO)
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.DeptController.tree()
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/edit/{deptId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/system/sysDept],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.dept()
2018-07-24 21:58:50 -Mapped "{[/system/sysDept/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.DeptController.treeView()
2018-07-24 21:58:50 -Mapped "{[/index],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.index(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/main],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.main()
2018-07-24 21:58:50 -Mapped "{[/login],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.login()
2018-07-24 21:58:50 -Mapped "{[/logout],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.logout()
2018-07-24 21:58:50 -Mapped "{[/ || ],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.LoginController.welcome(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/login],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.LoginController.ajaxLogin(java.lang.String,java.lang.String)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/add/{pId}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.add(org.springframework.ui.Model,java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.update(com.bootdo.system.domain.MenuDO)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/list]}" onto java.util.List<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.MenuController.save(com.bootdo.system.domain.MenuDO)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/tree/{roleId}],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/menu/tree],methods=[GET]}" onto com.bootdo.common.domain.Tree<com.bootdo.system.domain.MenuDO> com.bootdo.system.controller.MenuController.tree()
2018-07-24 21:58:50 -Mapped "{[/sys/menu/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.edit(org.springframework.ui.Model,java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/menu],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.MenuController.menu(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/sys/role/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.add()
2018-07-24 21:58:50 -Mapped "{[/sys/role/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.update(com.bootdo.system.domain.RoleDO)
2018-07-24 21:58:50 -Mapped "{[/sys/role/list],methods=[GET]}" onto java.util.List<com.bootdo.system.domain.RoleDO> com.bootdo.system.controller.RoleController.list()
2018-07-24 21:58:50 -Mapped "{[/sys/role/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/role/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.save(com.bootdo.system.domain.RoleDO)
2018-07-24 21:58:50 -Mapped "{[/sys/role/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.RoleController.batchRemove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/sys/role],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.role()
2018-07-24 21:58:50 -Mapped "{[/sys/role/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.RoleController.edit(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/sys/online/list]}" onto public java.util.List<com.bootdo.system.domain.UserOnline> com.bootdo.system.controller.SessionController.list()
2018-07-24 21:58:50 -Mapped "{[/sys/online/forceLogout/{sessionId}]}" onto public com.bootdo.common.utils.R com.bootdo.system.controller.SessionController.forceLogout(java.lang.String,org.springframework.web.servlet.mvc.support.RedirectAttributes)
2018-07-24 21:58:50 -Mapped "{[/sys/online],methods=[GET]}" onto public java.lang.String com.bootdo.system.controller.SessionController.online()
2018-07-24 21:58:50 -Mapped "{[/sys/online/sessionList]}" onto public java.util.Collection<org.apache.shiro.session.Session> com.bootdo.system.controller.SessionController.sessionList()
2018-07-24 21:58:50 -Mapped "{[/sys/user/exit],methods=[POST]}" onto boolean com.bootdo.system.controller.UserController.exit(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/sys/user/add],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.add(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/sys/user/remove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.remove(java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/user/update],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.update(com.bootdo.system.domain.UserDO)
2018-07-24 21:58:50 -Mapped "{[/sys/user/list],methods=[GET]}" onto com.bootdo.common.utils.PageUtils com.bootdo.system.controller.UserController.list(java.util.Map<java.lang.String, java.lang.Object>)
2018-07-24 21:58:50 -Mapped "{[/sys/user/save],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.save(com.bootdo.system.domain.UserDO)
2018-07-24 21:58:50 -Mapped "{[/sys/user/batchRemove],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.batchRemove(java.lang.Long[])
2018-07-24 21:58:50 -Mapped "{[/sys/user/tree],methods=[GET]}" onto public com.bootdo.common.domain.Tree<com.bootdo.system.domain.DeptDO> com.bootdo.system.controller.UserController.tree()
2018-07-24 21:58:50 -Mapped "{[/sys/user],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.user(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/sys/user/edit/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.edit(org.springframework.ui.Model,java.lang.Long)
2018-07-24 21:58:50 -Mapped "{[/sys/user/treeView],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.treeView()
2018-07-24 21:58:50 -Mapped "{[/sys/user/updatePeronal],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.updatePeronal(com.bootdo.system.domain.UserDO)
2018-07-24 21:58:50 -Mapped "{[/sys/user/resetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.resetPwd(com.bootdo.system.vo.UserVO)
2018-07-24 21:58:50 -Mapped "{[/sys/user/resetPwd/{id}],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.resetPwd(java.lang.Long,org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/sys/user/adminResetPwd],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.adminResetPwd(com.bootdo.system.vo.UserVO)
2018-07-24 21:58:50 -Mapped "{[/sys/user/personal],methods=[GET]}" onto java.lang.String com.bootdo.system.controller.UserController.personal(org.springframework.ui.Model)
2018-07-24 21:58:50 -Mapped "{[/sys/user/uploadImg],methods=[POST]}" onto com.bootdo.common.utils.R com.bootdo.system.controller.UserController.uploadImg(org.springframework.web.multipart.MultipartFile,java.lang.String,javax.servlet.http.HttpServletRequest)
2018-07-24 21:58:50 -Mapped "{[/v2/api-docs],methods=[GET],produces=[application/json || application/hal+json]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)
2018-07-24 21:58:50 -Mapped "{[/swagger-resources/configuration/ui]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2018-07-24 21:58:50 -Mapped "{[/swagger-resources]}" onto org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2018-07-24 21:58:50 -Mapped "{[/swagger-resources/configuration/security]}" onto org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2018-07-24 21:58:51 -Initializing ExecutorService  'messageBrokerTaskScheduler'
2018-07-24 21:58:51 -Mapped URL path [/endpointChat/**] onto handler of type [class org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler]
2018-07-24 21:58:51 -Initializing ExecutorService  'brokerChannelExecutor'
2018-07-24 21:58:51 -Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@614ca7df: startup date [Tue Jul 24 21:58:36 CST 2018]; root of context hierarchy
2018-07-24 21:58:52 -Mapped URL path [/files/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:58:52 -Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:58:52 -Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:58:52 -Detected @ExceptionHandler methods in BDExceptionHandler
2018-07-24 21:58:52 -Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-24 21:58:54 -

Using default security password: 06ec177b-cab6-4f0f-957e-7f1e5bfb4056

2018-07-24 21:58:54 -Creating filter chain: OrRequestMatcher [requestMatchers=[Ant [pattern='/css/**'], Ant [pattern='/js/**'], Ant [pattern='/images/**'], Ant [pattern='/webjars/**'], Ant [pattern='/**/favicon.ico'], Ant [pattern='/error']]], []
2018-07-24 21:58:54 -Creating filter chain: org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration$ApplicationNoWebSecurityConfigurerAdapter$1@1554eaa4, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@b340615, org.springframework.security.web.context.SecurityContextPersistenceFilter@7096d451, org.springframework.security.web.header.HeaderWriterFilter@6f430ea8, org.springframework.security.web.csrf.CsrfFilter@5454be, org.springframework.security.web.authentication.logout.LogoutFilter@3c116f26, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@67d180e4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9cb927e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3c6b300a, org.springframework.security.web.session.SessionManagementFilter@af04f09, org.springframework.security.web.access.ExceptionTranslationFilter@7d90764a]
2018-07-24 21:58:54 -Registering beans for JMX exposure on startup
2018-07-24 21:58:54 -Bean with name 'dataSource' has been autodetected for JMX exposure
2018-07-24 21:58:54 -Located MBean 'dataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=dataSource,type=DruidDataSource]
2018-07-24 21:58:54 -Starting beans in phase 2147483647
2018-07-24 21:58:54 -Context refreshed
2018-07-24 21:58:54 -Found 1 custom documentation plugin(s)
2018-07-24 21:58:54 -Scanning for api listing references
2018-07-24 21:58:55 -Generating unique operation named: removeUsingPOST_1
2018-07-24 21:58:55 -Generating unique operation named: addUsingGET_1
2018-07-24 21:58:55 -Generating unique operation named: editUsingGET_1
2018-07-24 21:58:55 -Generating unique operation named: listUsingGET_1
2018-07-24 21:58:55 -Generating unique operation named: removeUsingPOST_2
2018-07-24 21:58:55 -Generating unique operation named: removeUsingPOST_3
2018-07-24 21:58:55 -Generating unique operation named: saveUsingPOST_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingGET_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingHEAD_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingPOST_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingPUT_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingPATCH_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingDELETE_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingOPTIONS_1
2018-07-24 21:58:55 -Generating unique operation named: updateUsingTRACE_1
2018-07-24 21:58:55 -Generating unique operation named: addUsingGET_2
2018-07-24 21:58:55 -Generating unique operation named: editUsingGET_2
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_2
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_4
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_5
2018-07-24 21:58:56 -Generating unique operation named: saveUsingPOST_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingGET_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingHEAD_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPOST_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPUT_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPATCH_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingDELETE_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingOPTIONS_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingTRACE_2
2018-07-24 21:58:56 -Generating unique operation named: addUsingGET_3
2018-07-24 21:58:56 -Generating unique operation named: editUsingGET_3
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_3
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_6
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_7
2018-07-24 21:58:56 -Generating unique operation named: saveUsingPOST_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingGET_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingHEAD_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPOST_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPUT_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPATCH_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingDELETE_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingOPTIONS_3
2018-07-24 21:58:56 -Generating unique operation named: updateUsingTRACE_3
2018-07-24 21:58:56 -Generating unique operation named: editUsingGET_4
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPOST_4
2018-07-24 21:58:56 -Generating unique operation named: addUsingGET_4
2018-07-24 21:58:56 -Generating unique operation named: editUsingGET_5
2018-07-24 21:58:56 -Generating unique operation named: infoUsingGET_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingHEAD_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingPOST_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingPUT_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingPATCH_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingDELETE_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingOPTIONS_1
2018-07-24 21:58:56 -Generating unique operation named: infoUsingTRACE_1
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_5
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_8
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_9
2018-07-24 21:58:56 -Generating unique operation named: saveUsingPOST_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPOST_5
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_6
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_10
2018-07-24 21:58:56 -Generating unique operation named: welcomeUsingGET_1
2018-07-24 21:58:56 -Generating unique operation named: addUsingGET_5
2018-07-24 21:58:56 -Generating unique operation named: editUsingGET_6
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_7
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_11
2018-07-24 21:58:56 -Generating unique operation named: saveUsingPOST_5
2018-07-24 21:58:56 -Generating unique operation named: treeUsingGET_1
2018-07-24 21:58:56 -Generating unique operation named: treeUsingGET_2
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPOST_6
2018-07-24 21:58:56 -Generating unique operation named: batchRemoveUsingPOST_1
2018-07-24 21:58:56 -Generating unique operation named: editUsingGET_7
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_8
2018-07-24 21:58:56 -Generating unique operation named: addUsingGET_6
2018-07-24 21:58:56 -Generating unique operation named: editUsingGET_8
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_9
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_12
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_13
2018-07-24 21:58:56 -Generating unique operation named: saveUsingPOST_6
2018-07-24 21:58:56 -Generating unique operation named: updateUsingGET_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingHEAD_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPOST_7
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPUT_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingPATCH_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingDELETE_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingOPTIONS_4
2018-07-24 21:58:56 -Generating unique operation named: updateUsingTRACE_4
2018-07-24 21:58:56 -Generating unique operation named: addUsingGET_7
2018-07-24 21:58:56 -Generating unique operation named: batchRemoveUsingPOST_2
2018-07-24 21:58:56 -Generating unique operation named: deployUsingPOST_1
2018-07-24 21:58:56 -Generating unique operation named: listUsingGET_10
2018-07-24 21:58:56 -Generating unique operation named: removeUsingPOST_14
2018-07-24 21:58:57 -Generating unique operation named: addUsingGET_8
2018-07-24 21:58:57 -Generating unique operation named: batchRemoveUsingPOST_3
2018-07-24 21:58:57 -Generating unique operation named: editUsingGET_9
2018-07-24 21:58:57 -Generating unique operation named: listUsingGET_11
2018-07-24 21:58:57 -Generating unique operation named: saveUsingPOST_7
2018-07-24 21:58:57 -Generating unique operation named: saveUsingPOST_8
2018-07-24 21:58:57 -Generating unique operation named: updateUsingPOST_8
2018-07-24 21:58:57 -Generating unique operation named: addUsingGET_9
2018-07-24 21:58:57 -Generating unique operation named: editUsingGET_10
2018-07-24 21:58:57 -Generating unique operation named: listUsingGET_12
2018-07-24 21:58:57 -Generating unique operation named: removeUsingPOST_15
2018-07-24 21:58:57 -Generating unique operation named: removeUsingPOST_16
2018-07-24 21:58:57 -Generating unique operation named: updateUsingGET_5
2018-07-24 21:58:57 -Generating unique operation named: updateUsingHEAD_5
2018-07-24 21:58:57 -Generating unique operation named: updateUsingPOST_9
2018-07-24 21:58:57 -Generating unique operation named: updateUsingPUT_5
2018-07-24 21:58:57 -Generating unique operation named: updateUsingPATCH_5
2018-07-24 21:58:57 -Generating unique operation named: updateUsingDELETE_5
2018-07-24 21:58:57 -Generating unique operation named: updateUsingOPTIONS_5
2018-07-24 21:58:57 -Generating unique operation named: updateUsingTRACE_5
2018-07-24 21:58:57 -Generating unique operation named: listUsingGET_13
2018-07-24 21:58:57 -Generating unique operation named: listUsingHEAD_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingPOST_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingPUT_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingPATCH_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingDELETE_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingOPTIONS_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingTRACE_1
2018-07-24 21:58:57 -Generating unique operation named: listUsingGET_14
2018-07-24 21:58:57 -Generating unique operation named: addUsingGET_10
2018-07-24 21:58:57 -Generating unique operation named: batchRemoveUsingPOST_4
2018-07-24 21:58:57 -Generating unique operation named: editUsingGET_11
2018-07-24 21:58:57 -Generating unique operation named: listUsingGET_15
2018-07-24 21:58:57 -Generating unique operation named: removeUsingPOST_17
2018-07-24 21:58:57 -Generating unique operation named: saveUsingPOST_9
2018-07-24 21:58:57 -Generating unique operation named: treeUsingGET_3
2018-07-24 21:58:57 -Generating unique operation named: treeViewUsingGET_1
2018-07-24 21:58:57 -Generating unique operation named: updateUsingPOST_10
2018-07-24 21:58:57 -Starting Quartz Scheduler now
2018-07-24 21:58:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2018-07-24 21:58:57 -Starting...
2018-07-24 21:58:57 -BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2018-07-24 21:58:57 -Started.
2018-07-24 21:58:57 -Initializing ProtocolHandler ["http-nio-80"]
2018-07-24 21:58:57 -Starting ProtocolHandler ["http-nio-80"]
2018-07-24 21:58:57 -Using a shared selector for servlet write/read
2018-07-24 21:58:57 -Tomcat started on port(s): 80 (http)
2018-07-24 21:58:57 -==>  Preparing: select `id`,`cron_expression`,`method_name`,`is_concurrent`,`description`,`update_by`,`bean_class`,`create_date`,`job_status`,`job_group`,`update_date`,`create_by`,`spring_bean`,`job_name` from sys_task order by id desc 
2018-07-24 21:58:57 -==> Parameters: 
2018-07-24 21:58:57 -<==      Total: 1
2018-07-24 21:58:57 -Started BootdoApplication in 22.379 seconds (JVM running for 24.75)
2018-07-24 21:59:02 -Initializing Spring FrameworkServlet 'dispatcherServlet'
2018-07-24 21:59:02 -FrameworkServlet 'dispatcherServlet': initialization started
2018-07-24 21:59:02 -FrameworkServlet 'dispatcherServlet': initialization completed in 48 ms
2018-07-24 21:59:02 -Enabling session validation scheduler...
2018-07-24 21:59:02 -请求地址 : http://localhost/login;JSESSIONID=72bd822c-d1fa-4cc8-ae3f-f3b2f636eb61
2018-07-24 21:59:02 -HTTP METHOD : GET
2018-07-24 21:59:02 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2018-07-24 21:59:02 -参数 : []
2018-07-24 21:59:02 -耗时 : 4
2018-07-24 21:59:02 -返回值 : login
2018-07-24 21:59:03 -[THYMELEAF] INITIALIZING TEMPLATE ENGINE
2018-07-24 21:59:03 -[THYMELEAF] INITIALIZING TEMPLATE RESOLVER: org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver
2018-07-24 21:59:03 -[THYMELEAF] TEMPLATE RESOLVER INITIALIZED OK
2018-07-24 21:59:03 -[THYMELEAF] INITIALIZING MESSAGE RESOLVER: org.thymeleaf.spring4.messageresolver.SpringMessageResolver
2018-07-24 21:59:03 -[THYMELEAF] MESSAGE RESOLVER INITIALIZED OK
2018-07-24 21:59:03 -[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Cache Factory implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template modes:
[THYMELEAF]     * XHTML
[THYMELEAF]     * LEGACYHTML5
[THYMELEAF]     * VALIDXHTML
[THYMELEAF]     * VALIDXML
[THYMELEAF]     * XML
[THYMELEAF]     * HTML5
[THYMELEAF] * Template resolvers (in order):
[THYMELEAF]     * org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver
[THYMELEAF] * Message resolvers (in order):
[THYMELEAF]     * org.thymeleaf.spring4.messageresolver.SpringMessageResolver
[THYMELEAF] * Dialect [1 of 3]: org.thymeleaf.spring4.dialect.SpringStandardDialect
[THYMELEAF]     * Prefix: "th"
[THYMELEAF] * Dialect [2 of 3]: at.pollux.thymeleaf.shiro.dialect.ShiroDialect
[THYMELEAF]     * Prefix: "shiro"
[THYMELEAF] * Dialect [3 of 3]: nz.net.ultraq.thymeleaf.LayoutDialect
[THYMELEAF]     * Prefix: "layout"
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
2018-07-24 21:59:03 -[THYMELEAF] TEMPLATE ENGINE INITIALIZED
2018-07-24 21:59:04 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:59:04 -==> Parameters: admin(String)
2018-07-24 21:59:04 -<==      Total: 1
2018-07-24 21:59:04 -请求地址 : http://localhost/login
2018-07-24 21:59:04 -HTTP METHOD : POST
2018-07-24 21:59:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 21:59:04 -参数 : [admin, 111111]
2018-07-24 21:59:04 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 21:59:04 -==> Parameters: admin(String)
2018-07-24 21:59:04 -<==      Total: 1
2018-07-24 21:59:04 -耗时 : 14
2018-07-24 21:59:04 -返回值 : {msg=操作成功, code=0}
2018-07-24 21:59:04 -More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [clientInboundChannelExecutor, clientOutboundChannelExecutor, brokerChannelExecutor, messageBrokerTaskScheduler]
2018-07-24 21:59:04 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:59:04 -==> Parameters: 1(Long), admin(String), 登录(String), 14(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 21:59:04.817(Timestamp)
2018-07-24 21:59:04 -<==    Updates: 1
2018-07-24 21:59:04 -请求地址 : http://localhost/index
2018-07-24 21:59:04 -HTTP METHOD : GET
2018-07-24 21:59:04 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:59:04 -参数 : [{}]
2018-07-24 21:59:04 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:59:04 -==> Parameters: 1(Long)
2018-07-24 21:59:04 -<==      Total: 27
2018-07-24 21:59:04 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:59:04 -==> Parameters: 138(Long)
2018-07-24 21:59:04 -<==      Total: 0
2018-07-24 21:59:04 -耗时 : 38
2018-07-24 21:59:04 -返回值 : index_v1
2018-07-24 21:59:04 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:59:04 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 38(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:59:04.983(Timestamp)
2018-07-24 21:59:04 -<==    Updates: 1
2018-07-24 21:59:05 -请求地址 : http://localhost/main
2018-07-24 21:59:05 -HTTP METHOD : GET
2018-07-24 21:59:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:59:05 -参数 : []
2018-07-24 21:59:05 -耗时 : 0
2018-07-24 21:59:05 -返回值 : main
2018-07-24 21:59:05 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:59:05 -HTTP METHOD : GET
2018-07-24 21:59:05 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:59:05 -参数 : []
2018-07-24 21:59:05 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:59:05 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:59:05 -<==      Total: 3
2018-07-24 21:59:05 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:59:05 -==> Parameters: 1(Long)
2018-07-24 21:59:05 -<==      Total: 1
2018-07-24 21:59:05 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:59:05 -==> Parameters: 1(Long)
2018-07-24 21:59:05 -<==      Total: 1
2018-07-24 21:59:05 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:59:05 -==> Parameters: 1(Long)
2018-07-24 21:59:05 -<==      Total: 1
2018-07-24 21:59:05 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:59:05 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:59:05 -<==      Total: 1
2018-07-24 21:59:05 -耗时 : 28
2018-07-24 21:59:05 -返回值 : com.bootdo.common.utils.PageUtils@1d12caa0
2018-07-24 21:59:05 -请求地址 : http://localhost/main
2018-07-24 21:59:05 -HTTP METHOD : GET
2018-07-24 21:59:05 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:59:05 -参数 : []
2018-07-24 21:59:05 -耗时 : 0
2018-07-24 21:59:05 -返回值 : main
2018-07-24 21:59:37 -请求地址 : http://localhost/index
2018-07-24 21:59:37 -HTTP METHOD : GET
2018-07-24 21:59:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 21:59:37 -参数 : [{}]
2018-07-24 21:59:37 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 21:59:37 -==> Parameters: 1(Long)
2018-07-24 21:59:37 -<==      Total: 27
2018-07-24 21:59:37 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 21:59:37 -==> Parameters: 138(Long)
2018-07-24 21:59:37 -<==      Total: 0
2018-07-24 21:59:37 -耗时 : 17
2018-07-24 21:59:37 -返回值 : index_v1
2018-07-24 21:59:37 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 21:59:37 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 18(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 21:59:37.364(Timestamp)
2018-07-24 21:59:37 -<==    Updates: 1
2018-07-24 21:59:37 -请求地址 : http://localhost/main
2018-07-24 21:59:37 -HTTP METHOD : GET
2018-07-24 21:59:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:59:37 -参数 : []
2018-07-24 21:59:37 -耗时 : 1
2018-07-24 21:59:37 -返回值 : main
2018-07-24 21:59:37 -请求地址 : http://localhost/oa/notify/message
2018-07-24 21:59:37 -HTTP METHOD : GET
2018-07-24 21:59:37 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 21:59:37 -参数 : []
2018-07-24 21:59:37 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 21:59:37 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 21:59:37 -<==      Total: 3
2018-07-24 21:59:37 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:59:37 -==> Parameters: 1(Long)
2018-07-24 21:59:37 -<==      Total: 1
2018-07-24 21:59:37 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:59:37 -==> Parameters: 1(Long)
2018-07-24 21:59:37 -<==      Total: 1
2018-07-24 21:59:37 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 21:59:37 -==> Parameters: 1(Long)
2018-07-24 21:59:37 -<==      Total: 1
2018-07-24 21:59:37 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 21:59:37 -==> Parameters: 1(Long), 0(String)
2018-07-24 21:59:37 -<==      Total: 1
2018-07-24 21:59:37 -耗时 : 22
2018-07-24 21:59:37 -返回值 : com.bootdo.common.utils.PageUtils@5e8ff410
2018-07-24 21:59:37 -请求地址 : http://localhost/main
2018-07-24 21:59:37 -HTTP METHOD : GET
2018-07-24 21:59:37 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 21:59:37 -参数 : []
2018-07-24 21:59:37 -耗时 : 0
2018-07-24 21:59:37 -返回值 : main
2018-07-24 21:59:51 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 21, active threads = 0, queued tasks = 0, completed tasks = 21], outboundChannelpool size = 3, active threads = 0, queued tasks = 0, completed tasks = 3], sockJsScheduler[pool size = 16, active threads = 1, queued tasks = 2, completed tasks = 11]
2018-07-24 22:03:52 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2018-07-24 22:03:52 -==> Parameters: 1(Long)
2018-07-24 22:03:52 -<==      Total: 47
2018-07-24 22:03:52 -请求地址 : http://localhost/sys/menu/
2018-07-24 22:03:52 -HTTP METHOD : GET
2018-07-24 22:03:52 -CLASS_METHOD : com.bootdo.system.controller.MenuController.menu
2018-07-24 22:03:52 -参数 : [{}]
2018-07-24 22:03:52 -耗时 : 0
2018-07-24 22:03:52 -返回值 : system/menu/menu
2018-07-24 22:03:53 -请求地址 : http://localhost/sys/menu/list
2018-07-24 22:03:53 -HTTP METHOD : GET
2018-07-24 22:03:53 -CLASS_METHOD : com.bootdo.system.controller.MenuController.list
2018-07-24 22:03:53 -参数 : [{sort=order_num}]
2018-07-24 22:03:53 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by order_num 
2018-07-24 22:03:53 -==> Parameters: 
2018-07-24 22:03:53 -<==      Total: 61
2018-07-24 22:03:53 -耗时 : 33
2018-07-24 22:03:53 -返回值 : [MenuDO{menuId=51, parentId=50, name='新增', url='', perms='blog:bContent:add', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=55, parentId=7, name='编辑', url='', perms='sys:role:edit', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=56, parentId=7, name='删除', url='', perms='sys:role:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=58, parentId=50, name='编辑', url='', perms='blog:bContent:edit', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=59, parentId=50, name='删除', url='', perms='blog:bContent:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=60, parentId=50, name='批量删除', url='', perms='blog:bContent:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=61, parentId=2, name='批量删除', url='', perms='sys:menu:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=62, parentId=7, name='批量删除', url='', perms='sys:role:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=85, parentId=84, name='通知公告', url='oa/notify', perms='oa:notify:notify', type=1, icon='fa fa-pencil-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=88, parentId=85, name='删除', url='oa/notify/remove', perms='oa:notify:remove', type=2, icon='fa fa-minus', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=89, parentId=85, name='批量删除', url='oa/notify/batchRemove', perms='oa:notify:batchRemove', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=90, parentId=84, name='我的通知', url='oa/notify/selfNotify', perms='', type=1, icon='fa fa-envelope-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=92, parentId=91, name='在线用户', url='sys/online', perms='', type=1, icon='fa fa-user', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=94, parentId=93, name='模型管理', url='activiti/model', perms='', type=1, icon='fa fa-sort-amount-asc', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=95, parentId=94, name='全部权限', url='', perms='activiti:model', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=96, parentId=93, name='流程管理', url='activiti/process', perms='', type=1, icon='fa fa-flag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=98, parentId=97, name='百度chart', url='/chart/graph_echarts.html', perms='', type=1, icon='fa fa-area-chart', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=99, parentId=96, name='所有权限', url='', perms='act:process', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=101, parentId=93, name='待办任务', url='activiti/task/todo', perms='', type=1, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=1, parentId=0, name='基础管理', url='', perms='', type=0, icon='fa fa-bars', orderNum=0, gmtCreate=Wed Aug 09 22:49:47 CST 2017, gmtModified=null}, MenuDO{menuId=6, parentId=3, name='用户管理', url='sys/user/', perms='sys:user:user', type=1, icon='fa fa-user', orderNum=0, gmtCreate=Thu Aug 10 14:12:11 CST 2017, gmtModified=null}, MenuDO{menuId=12, parentId=6, name='新增', url='', perms='sys:user:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:51:35 CST 2017, gmtModified=null}, MenuDO{menuId=13, parentId=6, name='编辑', url='', perms='sys:user:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:52:06 CST 2017, gmtModified=null}, MenuDO{menuId=14, parentId=6, name='删除', url='null', perms='sys:user:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 10:52:24 CST 2017, gmtModified=null}, MenuDO{menuId=15, parentId=7, name='新增', url='', perms='sys:role:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:56:37 CST 2017, gmtModified=null}, MenuDO{menuId=20, parentId=2, name='新增', url='', perms='sys:menu:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:32 CST 2017, gmtModified=null}, MenuDO{menuId=21, parentId=2, name='编辑', url='', perms='sys:menu:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:56 CST 2017, gmtModified=null}, MenuDO{menuId=22, parentId=2, name='删除', url='', perms='sys:menu:remove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 11:00:26 CST 2017, gmtModified=null}, MenuDO{menuId=24, parentId=6, name='批量删除', url='', perms='sys:user:batchRemove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:27:18 CST 2017, gmtModified=null}, MenuDO{menuId=25, parentId=6, name='停用', url='null', perms='sys:user:disable', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 17:27:43 CST 2017, gmtModified=null}, MenuDO{menuId=26, parentId=6, name='重置密码', url='', perms='sys:user:resetPwd', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:28:34 CST 2017, gmtModified=null}, MenuDO{menuId=27, parentId=91, name='系统日志', url='common/log', perms='common:log', type=1, icon='fa fa-warning', orderNum=0, gmtCreate=Mon Aug 14 22:11:53 CST 2017, gmtModified=null}, MenuDO{menuId=28, parentId=27, name='刷新', url='null', perms='sys:log:list', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:22 CST 2017, gmtModified=null}, MenuDO{menuId=29, parentId=27, name='删除', url='null', perms='sys:log:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:43 CST 2017, gmtModified=null}, MenuDO{menuId=30, parentId=27, name='清空', url='null', perms='sys:log:clear', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:31:02 CST 2017, gmtModified=null}, MenuDO{menuId=68, parentId=49, name='发布文章', url='/blog/bContent/add', perms='blog:bContent:add', type=1, icon='fa fa-edit', orderNum=0, gmtCreate=null, gmtModified=null}, MenuDO{menuId=3, parentId=0, name='系统管理', url='null', perms='null', type=0, icon='fa fa-desktop', orderNum=1, gmtCreate=Wed Aug 09 23:06:55 CST 2017, gmtModified=Mon Aug 14 14:13:43 CST 2017}, MenuDO{menuId=7, parentId=3, name='角色管理', url='sys/role', perms='sys:role:role', type=1, icon='fa fa-paw', orderNum=1, gmtCreate=Thu Aug 10 14:13:19 CST 2017, gmtModified=null}, MenuDO{menuId=50, parentId=49, name='文章列表', url='blog/bContent', perms='blog:bContent:bContent', type=1, icon='fa fa-file-image-o', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=57, parentId=91, name='运行监控', url='/druid/index.html', perms='', type=1, icon='fa fa-caret-square-o-right', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=74, parentId=73, name='增加', url='/system/sysDept/add', perms='system:sysDept:add', type=2, icon='null', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=78, parentId=1, name='数据字典', url='/common/dict', perms='common:dict:dict', type=1, icon='fa fa-book', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=86, parentId=85, name='新增', url='oa/notify/add', perms='oa:notify:add', type=2, icon='fa fa-plus', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=2, parentId=3, name='系统菜单', url='sys/menu/', perms='sys:menu:menu', type=1, icon='fa fa-th-list', orderNum=2, gmtCreate=Wed Aug 09 22:55:15 CST 2017, gmtModified=null}, MenuDO{menuId=71, parentId=1, name='文件管理', url='/common/sysFile', perms='common:sysFile:sysFile', type=1, icon='fa fa-folder-open', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=75, parentId=73, name='刪除', url='system/sysDept/remove', perms='system:sysDept:remove', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=79, parentId=78, name='增加', url='/common/dict/add', perms='common:dict:add', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=80, parentId=78, name='编辑', url='/common/dict/edit', perms='common:dict:edit', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=87, parentId=85, name='编辑', url='oa/notify/edit', perms='oa:notify:edit', type=2, icon='fa fa-pencil-square-o', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=48, parentId=77, name='代码生成', url='common/generator', perms='common:generator', type=1, icon='fa fa-code', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=73, parentId=3, name='部门管理', url='/system/sysDept', perms='system:sysDept:sysDept', type=1, icon='fa fa-users', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=76, parentId=73, name='编辑', url='/system/sysDept/edit', perms='system:sysDept:edit', type=2, icon='null', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=81, parentId=78, name='删除', url='/common/dict/remove', perms='common:dict:remove', type=2, icon='', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=72, parentId=77, name='计划任务', url='common/job', perms='common:taskScheduleJob', type=1, icon='fa fa-hourglass-1', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=77, parentId=0, name='系统工具', url='', perms='', type=0, icon='fa fa-gear', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=83, parentId=78, name='批量删除', url='/common/dict/batchRemove', perms='common:dict:batchRemove', type=2, icon='', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=84, parentId=0, name='办公管理', url='', perms='', type=0, icon='fa fa-laptop', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=91, parentId=0, name='系统监控', url='', perms='', type=0, icon='fa fa-video-camera', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=49, parentId=0, name='博客管理', url='', perms='', type=0, icon='fa fa-rss', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=93, parentId=0, name='工作流程', url='', perms='', type=0, icon='fa fa-print', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=97, parentId=0, name='图表管理', url='', perms='', type=0, icon='fa fa-bar-chart', orderNum=7, gmtCreate=null, gmtModified=null}]
2018-07-24 22:03:58 -请求地址 : http://localhost/sys/menu/edit/1
2018-07-24 22:03:58 -HTTP METHOD : GET
2018-07-24 22:03:58 -CLASS_METHOD : com.bootdo.system.controller.MenuController.edit
2018-07-24 22:03:58 -参数 : [{}, 1]
2018-07-24 22:03:58 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu where menu_id = ? 
2018-07-24 22:03:58 -==> Parameters: 1(Long)
2018-07-24 22:03:58 -<==      Total: 1
2018-07-24 22:03:58 -耗时 : 7
2018-07-24 22:03:58 -返回值 : system/menu/edit
2018-07-24 22:03:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:03:58 -==> Parameters: 1(Long), admin(String), 编辑菜单(String), 7(Integer), com.bootdo.system.controller.MenuController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:03:58.64(Timestamp)
2018-07-24 22:03:58 -<==    Updates: 1
2018-07-24 22:04:17 -请求地址 : http://localhost/sys/role
2018-07-24 22:04:17 -HTTP METHOD : GET
2018-07-24 22:04:17 -CLASS_METHOD : com.bootdo.system.controller.RoleController.role
2018-07-24 22:04:17 -参数 : []
2018-07-24 22:04:17 -耗时 : 1
2018-07-24 22:04:17 -返回值 : system/role/role
2018-07-24 22:04:17 -请求地址 : http://localhost/sys/role/list
2018-07-24 22:04:17 -HTTP METHOD : GET
2018-07-24 22:04:17 -CLASS_METHOD : com.bootdo.system.controller.RoleController.list
2018-07-24 22:04:17 -参数 : []
2018-07-24 22:04:17 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:04:17 -==> Parameters: 
2018-07-24 22:04:17 -<==      Total: 1
2018-07-24 22:04:17 -耗时 : 14
2018-07-24 22:04:17 -返回值 : [RoleDO{roleId=1, roleName='超级用户角色', roleSign='admin', remark='拥有最高权限', userIdCreate=2, gmtCreate=2017-08-12 00:43:52.0, gmtModified=2017-08-12 19:14:59.0, menuIds=null}]
2018-07-24 22:04:20 -请求地址 : http://localhost/sys/role/edit/1
2018-07-24 22:04:20 -HTTP METHOD : GET
2018-07-24 22:04:20 -CLASS_METHOD : com.bootdo.system.controller.RoleController.edit
2018-07-24 22:04:20 -参数 : [1, {}]
2018-07-24 22:04:20 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role where role_id = ? 
2018-07-24 22:04:20 -==> Parameters: 1(Long)
2018-07-24 22:04:20 -<==      Total: 1
2018-07-24 22:04:20 -耗时 : 4
2018-07-24 22:04:20 -返回值 : system/role/edit
2018-07-24 22:04:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:04:20 -==> Parameters: 1(Long), admin(String), 编辑角色(String), 5(Integer), com.bootdo.system.controller.RoleController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:04:20.564(Timestamp)
2018-07-24 22:04:20 -<==    Updates: 1
2018-07-24 22:04:20 -请求地址 : http://localhost/sys/menu/tree/1
2018-07-24 22:04:20 -HTTP METHOD : GET
2018-07-24 22:04:20 -CLASS_METHOD : com.bootdo.system.controller.MenuController.tree
2018-07-24 22:04:20 -参数 : [1]
2018-07-24 22:04:20 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by menu_id desc 
2018-07-24 22:04:20 -==> Parameters: 
2018-07-24 22:04:20 -<==      Total: 61
2018-07-24 22:04:20 -==>  Preparing: select menu_id from sys_role_menu WHERE role_id = ? 
2018-07-24 22:04:20 -==> Parameters: 1(Long)
2018-07-24 22:04:20 -<==      Total: 63
2018-07-24 22:04:20 -耗时 : 22
2018-07-24 22:04:20 -返回值 : {"checked":true,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","state":{"selected":true},"text":"百度chart"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","state":{"selected":false},"text":"图表管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"101","parentId":"93","state":{"selected":true},"text":"待办任务"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"99","parentId":"96","state":{"selected":true},"text":"所有权限"}],"hasChildren":true,"hasParent":true,"id":"96","parentId":"93","state":{"selected":false},"text":"流程管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"95","parentId":"94","state":{"selected":true},"text":"全部权限"}],"hasChildren":true,"hasParent":true,"id":"94","parentId":"93","state":{"selected":false},"text":"模型管理"}],"hasChildren":true,"hasParent":false,"id":"93","parentId":"0","state":{"selected":false},"text":"工作流程"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"92","parentId":"91","state":{"selected":true},"text":"在线用户"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"57","parentId":"91","state":{"selected":true},"text":"运行监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"30","parentId":"27","state":{"selected":true},"text":"清空"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"29","parentId":"27","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"28","parentId":"27","state":{"selected":true},"text":"刷新"}],"hasChildren":true,"hasParent":true,"id":"27","parentId":"91","state":{"selected":false},"text":"系统日志"}],"hasChildren":true,"hasParent":false,"id":"91","parentId":"0","state":{"selected":false},"text":"系统监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"90","parentId":"84","state":{"selected":true},"text":"我的通知"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"89","parentId":"85","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"88","parentId":"85","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"87","parentId":"85","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"86","parentId":"85","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"85","parentId":"84","state":{"selected":false},"text":"通知公告"}],"hasChildren":true,"hasParent":false,"id":"84","parentId":"0","state":{"selected":false},"text":"办公管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"72","parentId":"77","state":{"selected":true},"text":"计划任务"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"48","parentId":"77","state":{"selected":true},"text":"代码生成"}],"hasChildren":true,"hasParent":false,"id":"77","parentId":"0","state":{"selected":false},"text":"系统工具"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"68","parentId":"49","state":{"selected":true},"text":"发布文章"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"60","parentId":"50","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"59","parentId":"50","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"58","parentId":"50","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"51","parentId":"50","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"50","parentId":"49","state":{"selected":false},"text":"文章列表"}],"hasChildren":true,"hasParent":false,"id":"49","parentId":"0","state":{"selected":false},"text":"博客管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"76","parentId":"73","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"75","parentId":"73","state":{"selected":true},"text":"刪除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"74","parentId":"73","state":{"selected":true},"text":"增加"}],"hasChildren":true,"hasParent":true,"id":"73","parentId":"3","state":{"selected":false},"text":"部门管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"62","parentId":"7","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"56","parentId":"7","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"55","parentId":"7","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"15","parentId":"7","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"7","parentId":"3","state":{"selected":false},"text":"角色管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"26","parentId":"6","state":{"selected":true},"text":"重置密码"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"25","parentId":"6","state":{"selected":true},"text":"停用"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"24","parentId":"6","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"14","parentId":"6","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"13","parentId":"6","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"12","parentId":"6","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"6","parentId":"3","state":{"selected":false},"text":"用户管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"61","parentId":"2","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"22","parentId":"2","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"21","parentId":"2","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"20","parentId":"2","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"2","parentId":"3","state":{"selected":false},"text":"系统菜单"}],"hasChildren":true,"hasParent":false,"id":"3","parentId":"0","state":{"selected":false},"text":"系统管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"83","parentId":"78","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"81","parentId":"78","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"80","parentId":"78","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"79","parentId":"78","state":{"selected":true},"text":"增加"}],"hasChildren":true,"hasParent":true,"id":"78","parentId":"1","state":{"selected":false},"text":"数据字典"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","state":{"selected":true},"text":"文件管理"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"selected":false},"text":"基础管理"}],"hasChildren":true,"hasParent":false,"id":"-1","parentId":"","state":{"opened":true},"text":"顶级节点"}
2018-07-24 22:04:39 -请求地址 : http://localhost/sys/role/edit/1
2018-07-24 22:04:39 -HTTP METHOD : GET
2018-07-24 22:04:39 -CLASS_METHOD : com.bootdo.system.controller.RoleController.edit
2018-07-24 22:04:39 -参数 : [1, {}]
2018-07-24 22:04:39 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role where role_id = ? 
2018-07-24 22:04:39 -==> Parameters: 1(Long)
2018-07-24 22:04:39 -<==      Total: 1
2018-07-24 22:04:39 -耗时 : 3
2018-07-24 22:04:39 -返回值 : system/role/edit
2018-07-24 22:04:39 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:04:39 -==> Parameters: 1(Long), admin(String), 编辑角色(String), 3(Integer), com.bootdo.system.controller.RoleController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:04:39.021(Timestamp)
2018-07-24 22:04:39 -<==    Updates: 1
2018-07-24 22:04:39 -请求地址 : http://localhost/sys/menu/tree/1
2018-07-24 22:04:39 -HTTP METHOD : GET
2018-07-24 22:04:39 -CLASS_METHOD : com.bootdo.system.controller.MenuController.tree
2018-07-24 22:04:39 -参数 : [1]
2018-07-24 22:04:39 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by menu_id desc 
2018-07-24 22:04:39 -==> Parameters: 
2018-07-24 22:04:39 -<==      Total: 61
2018-07-24 22:04:39 -==>  Preparing: select menu_id from sys_role_menu WHERE role_id = ? 
2018-07-24 22:04:39 -==> Parameters: 1(Long)
2018-07-24 22:04:39 -<==      Total: 63
2018-07-24 22:04:39 -耗时 : 19
2018-07-24 22:04:39 -返回值 : {"checked":true,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","state":{"selected":true},"text":"百度chart"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","state":{"selected":false},"text":"图表管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"101","parentId":"93","state":{"selected":true},"text":"待办任务"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"99","parentId":"96","state":{"selected":true},"text":"所有权限"}],"hasChildren":true,"hasParent":true,"id":"96","parentId":"93","state":{"selected":false},"text":"流程管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"95","parentId":"94","state":{"selected":true},"text":"全部权限"}],"hasChildren":true,"hasParent":true,"id":"94","parentId":"93","state":{"selected":false},"text":"模型管理"}],"hasChildren":true,"hasParent":false,"id":"93","parentId":"0","state":{"selected":false},"text":"工作流程"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"92","parentId":"91","state":{"selected":true},"text":"在线用户"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"57","parentId":"91","state":{"selected":true},"text":"运行监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"30","parentId":"27","state":{"selected":true},"text":"清空"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"29","parentId":"27","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"28","parentId":"27","state":{"selected":true},"text":"刷新"}],"hasChildren":true,"hasParent":true,"id":"27","parentId":"91","state":{"selected":false},"text":"系统日志"}],"hasChildren":true,"hasParent":false,"id":"91","parentId":"0","state":{"selected":false},"text":"系统监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"90","parentId":"84","state":{"selected":true},"text":"我的通知"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"89","parentId":"85","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"88","parentId":"85","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"87","parentId":"85","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"86","parentId":"85","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"85","parentId":"84","state":{"selected":false},"text":"通知公告"}],"hasChildren":true,"hasParent":false,"id":"84","parentId":"0","state":{"selected":false},"text":"办公管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"72","parentId":"77","state":{"selected":true},"text":"计划任务"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"48","parentId":"77","state":{"selected":true},"text":"代码生成"}],"hasChildren":true,"hasParent":false,"id":"77","parentId":"0","state":{"selected":false},"text":"系统工具"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"68","parentId":"49","state":{"selected":true},"text":"发布文章"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"60","parentId":"50","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"59","parentId":"50","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"58","parentId":"50","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"51","parentId":"50","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"50","parentId":"49","state":{"selected":false},"text":"文章列表"}],"hasChildren":true,"hasParent":false,"id":"49","parentId":"0","state":{"selected":false},"text":"博客管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"76","parentId":"73","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"75","parentId":"73","state":{"selected":true},"text":"刪除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"74","parentId":"73","state":{"selected":true},"text":"增加"}],"hasChildren":true,"hasParent":true,"id":"73","parentId":"3","state":{"selected":false},"text":"部门管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"62","parentId":"7","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"56","parentId":"7","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"55","parentId":"7","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"15","parentId":"7","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"7","parentId":"3","state":{"selected":false},"text":"角色管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"26","parentId":"6","state":{"selected":true},"text":"重置密码"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"25","parentId":"6","state":{"selected":true},"text":"停用"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"24","parentId":"6","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"14","parentId":"6","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"13","parentId":"6","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"12","parentId":"6","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"6","parentId":"3","state":{"selected":false},"text":"用户管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"61","parentId":"2","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"22","parentId":"2","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"21","parentId":"2","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"20","parentId":"2","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"2","parentId":"3","state":{"selected":false},"text":"系统菜单"}],"hasChildren":true,"hasParent":false,"id":"3","parentId":"0","state":{"selected":false},"text":"系统管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"83","parentId":"78","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"81","parentId":"78","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"80","parentId":"78","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"79","parentId":"78","state":{"selected":true},"text":"增加"}],"hasChildren":true,"hasParent":true,"id":"78","parentId":"1","state":{"selected":false},"text":"数据字典"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","state":{"selected":true},"text":"文件管理"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"selected":false},"text":"基础管理"}],"hasChildren":true,"hasParent":false,"id":"-1","parentId":"","state":{"opened":true},"text":"顶级节点"}
2018-07-24 22:05:30 -请求地址 : http://localhost/sys/role/edit/1
2018-07-24 22:05:30 -HTTP METHOD : GET
2018-07-24 22:05:30 -CLASS_METHOD : com.bootdo.system.controller.RoleController.edit
2018-07-24 22:05:30 -参数 : [1, {}]
2018-07-24 22:05:30 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role where role_id = ? 
2018-07-24 22:05:30 -==> Parameters: 1(Long)
2018-07-24 22:05:30 -<==      Total: 1
2018-07-24 22:05:30 -耗时 : 5
2018-07-24 22:05:30 -返回值 : system/role/edit
2018-07-24 22:05:30 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:30 -==> Parameters: 1(Long), admin(String), 编辑角色(String), 5(Integer), com.bootdo.system.controller.RoleController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:05:30.479(Timestamp)
2018-07-24 22:05:30 -<==    Updates: 1
2018-07-24 22:05:30 -请求地址 : http://localhost/sys/menu/tree/1
2018-07-24 22:05:30 -HTTP METHOD : GET
2018-07-24 22:05:30 -CLASS_METHOD : com.bootdo.system.controller.MenuController.tree
2018-07-24 22:05:30 -参数 : [1]
2018-07-24 22:05:30 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by menu_id desc 
2018-07-24 22:05:30 -==> Parameters: 
2018-07-24 22:05:30 -<==      Total: 61
2018-07-24 22:05:30 -==>  Preparing: select menu_id from sys_role_menu WHERE role_id = ? 
2018-07-24 22:05:30 -==> Parameters: 1(Long)
2018-07-24 22:05:30 -<==      Total: 63
2018-07-24 22:05:30 -耗时 : 12
2018-07-24 22:05:30 -返回值 : {"checked":true,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","state":{"selected":true},"text":"百度chart"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","state":{"selected":false},"text":"图表管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"101","parentId":"93","state":{"selected":true},"text":"待办任务"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"99","parentId":"96","state":{"selected":true},"text":"所有权限"}],"hasChildren":true,"hasParent":true,"id":"96","parentId":"93","state":{"selected":false},"text":"流程管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"95","parentId":"94","state":{"selected":true},"text":"全部权限"}],"hasChildren":true,"hasParent":true,"id":"94","parentId":"93","state":{"selected":false},"text":"模型管理"}],"hasChildren":true,"hasParent":false,"id":"93","parentId":"0","state":{"selected":false},"text":"工作流程"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"92","parentId":"91","state":{"selected":true},"text":"在线用户"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"57","parentId":"91","state":{"selected":true},"text":"运行监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"30","parentId":"27","state":{"selected":true},"text":"清空"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"29","parentId":"27","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"28","parentId":"27","state":{"selected":true},"text":"刷新"}],"hasChildren":true,"hasParent":true,"id":"27","parentId":"91","state":{"selected":false},"text":"系统日志"}],"hasChildren":true,"hasParent":false,"id":"91","parentId":"0","state":{"selected":false},"text":"系统监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"90","parentId":"84","state":{"selected":true},"text":"我的通知"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"89","parentId":"85","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"88","parentId":"85","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"87","parentId":"85","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"86","parentId":"85","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"85","parentId":"84","state":{"selected":false},"text":"通知公告"}],"hasChildren":true,"hasParent":false,"id":"84","parentId":"0","state":{"selected":false},"text":"办公管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"72","parentId":"77","state":{"selected":true},"text":"计划任务"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"48","parentId":"77","state":{"selected":true},"text":"代码生成"}],"hasChildren":true,"hasParent":false,"id":"77","parentId":"0","state":{"selected":false},"text":"系统工具"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"68","parentId":"49","state":{"selected":true},"text":"发布文章"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"60","parentId":"50","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"59","parentId":"50","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"58","parentId":"50","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"51","parentId":"50","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"50","parentId":"49","state":{"selected":false},"text":"文章列表"}],"hasChildren":true,"hasParent":false,"id":"49","parentId":"0","state":{"selected":false},"text":"博客管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"76","parentId":"73","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"75","parentId":"73","state":{"selected":true},"text":"刪除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"74","parentId":"73","state":{"selected":true},"text":"增加"}],"hasChildren":true,"hasParent":true,"id":"73","parentId":"3","state":{"selected":false},"text":"部门管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"62","parentId":"7","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"56","parentId":"7","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"55","parentId":"7","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"15","parentId":"7","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"7","parentId":"3","state":{"selected":false},"text":"角色管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"26","parentId":"6","state":{"selected":true},"text":"重置密码"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"25","parentId":"6","state":{"selected":true},"text":"停用"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"24","parentId":"6","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"14","parentId":"6","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"13","parentId":"6","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"12","parentId":"6","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"6","parentId":"3","state":{"selected":false},"text":"用户管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"61","parentId":"2","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"22","parentId":"2","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"21","parentId":"2","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"20","parentId":"2","state":{"selected":true},"text":"新增"}],"hasChildren":true,"hasParent":true,"id":"2","parentId":"3","state":{"selected":false},"text":"系统菜单"}],"hasChildren":true,"hasParent":false,"id":"3","parentId":"0","state":{"selected":false},"text":"系统管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"83","parentId":"78","state":{"selected":true},"text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"81","parentId":"78","state":{"selected":true},"text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"80","parentId":"78","state":{"selected":true},"text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"79","parentId":"78","state":{"selected":true},"text":"增加"}],"hasChildren":true,"hasParent":true,"id":"78","parentId":"1","state":{"selected":false},"text":"数据字典"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","state":{"selected":true},"text":"文件管理"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","state":{"selected":false},"text":"基础管理"}],"hasChildren":true,"hasParent":false,"id":"-1","parentId":"","state":{"opened":true},"text":"顶级节点"}
2018-07-24 22:05:41 -请求地址 : http://localhost/sys/role/add
2018-07-24 22:05:41 -HTTP METHOD : GET
2018-07-24 22:05:41 -CLASS_METHOD : com.bootdo.system.controller.RoleController.add
2018-07-24 22:05:41 -参数 : []
2018-07-24 22:05:41 -耗时 : 1
2018-07-24 22:05:41 -返回值 : system/role/add
2018-07-24 22:05:41 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:41 -==> Parameters: 1(Long), admin(String), 添加角色(String), 1(Integer), com.bootdo.system.controller.RoleController.add()(String), null, 127.0.0.1(String), 2018-07-24 22:05:41.176(Timestamp)
2018-07-24 22:05:41 -<==    Updates: 1
2018-07-24 22:05:41 -请求地址 : http://localhost/sys/menu/tree
2018-07-24 22:05:41 -HTTP METHOD : GET
2018-07-24 22:05:41 -CLASS_METHOD : com.bootdo.system.controller.MenuController.tree
2018-07-24 22:05:41 -参数 : []
2018-07-24 22:05:41 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by menu_id desc 
2018-07-24 22:05:41 -==> Parameters: 
2018-07-24 22:05:41 -<==      Total: 61
2018-07-24 22:05:41 -耗时 : 8
2018-07-24 22:05:41 -返回值 : {"checked":true,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"图表管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"101","parentId":"93","text":"待办任务"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"99","parentId":"96","text":"所有权限"}],"hasChildren":true,"hasParent":true,"id":"96","parentId":"93","text":"流程管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"95","parentId":"94","text":"全部权限"}],"hasChildren":true,"hasParent":true,"id":"94","parentId":"93","text":"模型管理"}],"hasChildren":true,"hasParent":false,"id":"93","parentId":"0","text":"工作流程"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"92","parentId":"91","text":"在线用户"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"57","parentId":"91","text":"运行监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"30","parentId":"27","text":"清空"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"29","parentId":"27","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"28","parentId":"27","text":"刷新"}],"hasChildren":true,"hasParent":true,"id":"27","parentId":"91","text":"系统日志"}],"hasChildren":true,"hasParent":false,"id":"91","parentId":"0","text":"系统监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"90","parentId":"84","text":"我的通知"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"89","parentId":"85","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"88","parentId":"85","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"87","parentId":"85","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"86","parentId":"85","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"85","parentId":"84","text":"通知公告"}],"hasChildren":true,"hasParent":false,"id":"84","parentId":"0","text":"办公管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"72","parentId":"77","text":"计划任务"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"48","parentId":"77","text":"代码生成"}],"hasChildren":true,"hasParent":false,"id":"77","parentId":"0","text":"系统工具"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"68","parentId":"49","text":"发布文章"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"60","parentId":"50","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"59","parentId":"50","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"58","parentId":"50","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"51","parentId":"50","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"50","parentId":"49","text":"文章列表"}],"hasChildren":true,"hasParent":false,"id":"49","parentId":"0","text":"博客管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"76","parentId":"73","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"75","parentId":"73","text":"刪除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"74","parentId":"73","text":"增加"}],"hasChildren":true,"hasParent":true,"id":"73","parentId":"3","text":"部门管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"62","parentId":"7","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"56","parentId":"7","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"55","parentId":"7","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"15","parentId":"7","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"7","parentId":"3","text":"角色管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"26","parentId":"6","text":"重置密码"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"25","parentId":"6","text":"停用"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"24","parentId":"6","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"14","parentId":"6","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"13","parentId":"6","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"12","parentId":"6","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"6","parentId":"3","text":"用户管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"61","parentId":"2","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"22","parentId":"2","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"21","parentId":"2","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"20","parentId":"2","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"2","parentId":"3","text":"系统菜单"}],"hasChildren":true,"hasParent":false,"id":"3","parentId":"0","text":"系统管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"83","parentId":"78","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"81","parentId":"78","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"80","parentId":"78","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"79","parentId":"78","text":"增加"}],"hasChildren":true,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","text":"基础管理"}],"hasChildren":true,"hasParent":false,"id":"-1","parentId":"","state":{"opened":true},"text":"顶级节点"}
2018-07-24 22:05:51 -请求地址 : http://localhost/sys/role/save
2018-07-24 22:05:51 -HTTP METHOD : POST
2018-07-24 22:05:51 -CLASS_METHOD : com.bootdo.system.controller.RoleController.save
2018-07-24 22:05:51 -参数 : [RoleDO{roleId=null, roleName='学生', roleSign='null', remark='学生', userIdCreate=null, gmtCreate=null, gmtModified=null, menuIds=[]}]
2018-07-24 22:05:51 -==>  Preparing: insert into sys_role ( `role_name`, `role_sign`, `remark`, `user_id_create`, `gmt_create`, `gmt_modified` ) values ( ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:51 -==> Parameters: 学生(String), null, 学生(String), null, null, null
2018-07-24 22:05:51 -<==    Updates: 1
2018-07-24 22:05:51 -==>  Preparing: DELETE FROM sys_role_menu WHERE role_id=? 
2018-07-24 22:05:51 -==> Parameters: 2(Long)
2018-07-24 22:05:51 -<==    Updates: 0
2018-07-24 22:05:51 -耗时 : 13
2018-07-24 22:05:51 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:05:51 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:51 -==> Parameters: 1(Long), admin(String), 保存角色(String), 13(Integer), com.bootdo.system.controller.RoleController.save()(String), null, 127.0.0.1(String), 2018-07-24 22:05:51.466(Timestamp)
2018-07-24 22:05:51 -<==    Updates: 1
2018-07-24 22:05:51 -请求地址 : http://localhost/sys/role/list
2018-07-24 22:05:51 -HTTP METHOD : GET
2018-07-24 22:05:51 -CLASS_METHOD : com.bootdo.system.controller.RoleController.list
2018-07-24 22:05:51 -参数 : []
2018-07-24 22:05:51 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:05:51 -==> Parameters: 
2018-07-24 22:05:51 -<==      Total: 2
2018-07-24 22:05:51 -耗时 : 2
2018-07-24 22:05:51 -返回值 : [RoleDO{roleId=2, roleName='学生', roleSign='null', remark='学生', userIdCreate=null, gmtCreate=null, gmtModified=null, menuIds=null}, RoleDO{roleId=1, roleName='超级用户角色', roleSign='admin', remark='拥有最高权限', userIdCreate=2, gmtCreate=2017-08-12 00:43:52.0, gmtModified=2017-08-12 19:14:59.0, menuIds=null}]
2018-07-24 22:05:53 -请求地址 : http://localhost/sys/role/add
2018-07-24 22:05:53 -HTTP METHOD : GET
2018-07-24 22:05:53 -CLASS_METHOD : com.bootdo.system.controller.RoleController.add
2018-07-24 22:05:53 -参数 : []
2018-07-24 22:05:53 -耗时 : 0
2018-07-24 22:05:53 -返回值 : system/role/add
2018-07-24 22:05:53 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:53 -==> Parameters: 1(Long), admin(String), 添加角色(String), 1(Integer), com.bootdo.system.controller.RoleController.add()(String), null, 127.0.0.1(String), 2018-07-24 22:05:53.0(Timestamp)
2018-07-24 22:05:53 -<==    Updates: 1
2018-07-24 22:05:53 -请求地址 : http://localhost/sys/menu/tree
2018-07-24 22:05:53 -HTTP METHOD : GET
2018-07-24 22:05:53 -CLASS_METHOD : com.bootdo.system.controller.MenuController.tree
2018-07-24 22:05:53 -参数 : []
2018-07-24 22:05:53 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by menu_id desc 
2018-07-24 22:05:53 -==> Parameters: 
2018-07-24 22:05:53 -<==      Total: 61
2018-07-24 22:05:53 -耗时 : 8
2018-07-24 22:05:53 -返回值 : {"checked":true,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"98","parentId":"97","text":"百度chart"}],"hasChildren":true,"hasParent":false,"id":"97","parentId":"0","text":"图表管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"101","parentId":"93","text":"待办任务"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"99","parentId":"96","text":"所有权限"}],"hasChildren":true,"hasParent":true,"id":"96","parentId":"93","text":"流程管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"95","parentId":"94","text":"全部权限"}],"hasChildren":true,"hasParent":true,"id":"94","parentId":"93","text":"模型管理"}],"hasChildren":true,"hasParent":false,"id":"93","parentId":"0","text":"工作流程"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"92","parentId":"91","text":"在线用户"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"57","parentId":"91","text":"运行监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"30","parentId":"27","text":"清空"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"29","parentId":"27","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"28","parentId":"27","text":"刷新"}],"hasChildren":true,"hasParent":true,"id":"27","parentId":"91","text":"系统日志"}],"hasChildren":true,"hasParent":false,"id":"91","parentId":"0","text":"系统监控"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"90","parentId":"84","text":"我的通知"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"89","parentId":"85","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"88","parentId":"85","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"87","parentId":"85","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"86","parentId":"85","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"85","parentId":"84","text":"通知公告"}],"hasChildren":true,"hasParent":false,"id":"84","parentId":"0","text":"办公管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"72","parentId":"77","text":"计划任务"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"48","parentId":"77","text":"代码生成"}],"hasChildren":true,"hasParent":false,"id":"77","parentId":"0","text":"系统工具"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"68","parentId":"49","text":"发布文章"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"60","parentId":"50","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"59","parentId":"50","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"58","parentId":"50","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"51","parentId":"50","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"50","parentId":"49","text":"文章列表"}],"hasChildren":true,"hasParent":false,"id":"49","parentId":"0","text":"博客管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"76","parentId":"73","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"75","parentId":"73","text":"刪除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"74","parentId":"73","text":"增加"}],"hasChildren":true,"hasParent":true,"id":"73","parentId":"3","text":"部门管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"62","parentId":"7","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"56","parentId":"7","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"55","parentId":"7","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"15","parentId":"7","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"7","parentId":"3","text":"角色管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"26","parentId":"6","text":"重置密码"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"25","parentId":"6","text":"停用"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"24","parentId":"6","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"14","parentId":"6","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"13","parentId":"6","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"12","parentId":"6","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"6","parentId":"3","text":"用户管理"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"61","parentId":"2","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"22","parentId":"2","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"21","parentId":"2","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"20","parentId":"2","text":"新增"}],"hasChildren":true,"hasParent":true,"id":"2","parentId":"3","text":"系统菜单"}],"hasChildren":true,"hasParent":false,"id":"3","parentId":"0","text":"系统管理"},{"checked":false,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"83","parentId":"78","text":"批量删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"81","parentId":"78","text":"删除"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"80","parentId":"78","text":"编辑"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"79","parentId":"78","text":"增加"}],"hasChildren":true,"hasParent":true,"id":"78","parentId":"1","text":"数据字典"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"71","parentId":"1","text":"文件管理"}],"hasChildren":true,"hasParent":false,"id":"1","parentId":"0","text":"基础管理"}],"hasChildren":true,"hasParent":false,"id":"-1","parentId":"","state":{"opened":true},"text":"顶级节点"}
2018-07-24 22:05:59 -请求地址 : http://localhost/sys/role/save
2018-07-24 22:05:59 -HTTP METHOD : POST
2018-07-24 22:05:59 -CLASS_METHOD : com.bootdo.system.controller.RoleController.save
2018-07-24 22:05:59 -参数 : [RoleDO{roleId=null, roleName='老师', roleSign='null', remark='老师', userIdCreate=null, gmtCreate=null, gmtModified=null, menuIds=[]}]
2018-07-24 22:05:59 -==>  Preparing: insert into sys_role ( `role_name`, `role_sign`, `remark`, `user_id_create`, `gmt_create`, `gmt_modified` ) values ( ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:59 -==> Parameters: 老师(String), null, 老师(String), null, null, null
2018-07-24 22:05:59 -<==    Updates: 1
2018-07-24 22:05:59 -==>  Preparing: DELETE FROM sys_role_menu WHERE role_id=? 
2018-07-24 22:05:59 -==> Parameters: 3(Long)
2018-07-24 22:05:59 -<==    Updates: 0
2018-07-24 22:05:59 -耗时 : 11
2018-07-24 22:05:59 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:05:59 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:05:59 -==> Parameters: 1(Long), admin(String), 保存角色(String), 12(Integer), com.bootdo.system.controller.RoleController.save()(String), null, 127.0.0.1(String), 2018-07-24 22:05:59.987(Timestamp)
2018-07-24 22:05:59 -<==    Updates: 1
2018-07-24 22:06:00 -请求地址 : http://localhost/sys/role/list
2018-07-24 22:06:00 -HTTP METHOD : GET
2018-07-24 22:06:00 -CLASS_METHOD : com.bootdo.system.controller.RoleController.list
2018-07-24 22:06:00 -参数 : []
2018-07-24 22:06:00 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:06:00 -==> Parameters: 
2018-07-24 22:06:00 -<==      Total: 3
2018-07-24 22:06:00 -耗时 : 3
2018-07-24 22:06:00 -返回值 : [RoleDO{roleId=3, roleName='老师', roleSign='null', remark='老师', userIdCreate=null, gmtCreate=null, gmtModified=null, menuIds=null}, RoleDO{roleId=2, roleName='学生', roleSign='null', remark='学生', userIdCreate=null, gmtCreate=null, gmtModified=null, menuIds=null}, RoleDO{roleId=1, roleName='超级用户角色', roleSign='admin', remark='拥有最高权限', userIdCreate=2, gmtCreate=2017-08-12 00:43:52.0, gmtModified=2017-08-12 19:14:59.0, menuIds=null}]
2018-07-24 22:06:04 -请求地址 : http://localhost/sys/user/
2018-07-24 22:06:04 -HTTP METHOD : GET
2018-07-24 22:06:04 -CLASS_METHOD : com.bootdo.system.controller.UserController.user
2018-07-24 22:06:04 -参数 : [{}]
2018-07-24 22:06:04 -耗时 : 0
2018-07-24 22:06:04 -返回值 : system/user/user
2018-07-24 22:06:04 -请求地址 : http://localhost/system/sysDept/tree
2018-07-24 22:06:04 -HTTP METHOD : GET
2018-07-24 22:06:04 -CLASS_METHOD : com.bootdo.system.controller.DeptController.tree
2018-07-24 22:06:04 -参数 : []
2018-07-24 22:06:04 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2018-07-24 22:06:04 -==> Parameters: 
2018-07-24 22:06:04 -<==      Total: 10
2018-07-24 22:06:04 -耗时 : 10
2018-07-24 22:06:04 -返回值 : {"checked":true,"children":[{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"15","parentId":"13","state":{"opened":true},"text":"测试二部"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"14","parentId":"13","state":{"opened":true},"text":"测试一部"}],"hasChildren":true,"hasParent":false,"id":"13","parentId":"0","state":{"opened":true},"text":"测试部"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"12","parentId":"11","state":{"opened":true},"text":"产品一部"}],"hasChildren":true,"hasParent":false,"id":"11","parentId":"0","state":{"opened":true},"text":"产品部"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"10","parentId":"9","state":{"opened":true},"text":"销售一部"}],"hasChildren":true,"hasParent":false,"id":"9","parentId":"0","state":{"opened":true},"text":"销售部"},{"checked":false,"children":[{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"8","parentId":"6","state":{"opened":true},"text":"研发二部"},{"checked":false,"children":[],"hasChildren":false,"hasParent":true,"id":"7","parentId":"6","state":{"opened":true},"text":"研發一部"}],"hasChildren":true,"hasParent":false,"id":"6","parentId":"0","state":{"opened":true},"text":"研发部"}],"hasChildren":true,"hasParent":false,"id":"-1","parentId":"","state":{"opened":true},"text":"顶级节点"}
2018-07-24 22:06:04 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:04 -HTTP METHOD : GET
2018-07-24 22:06:04 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:04 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:06:04 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:06:04 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:06:04 -<==      Total: 10
2018-07-24 22:06:04 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:06:04 -==> Parameters: 
2018-07-24 22:06:04 -<==      Total: 1
2018-07-24 22:06:04 -耗时 : 14
2018-07-24 22:06:04 -返回值 : com.bootdo.common.utils.PageUtils@4d52089d
2018-07-24 22:06:07 -请求地址 : http://localhost/sys/user/edit/137
2018-07-24 22:06:07 -HTTP METHOD : GET
2018-07-24 22:06:07 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:06:07 -参数 : [{}, 137]
2018-07-24 22:06:07 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:06:07 -==> Parameters: 137(Long)
2018-07-24 22:06:07 -<==      Total: 1
2018-07-24 22:06:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:06:07 -==> Parameters: 137(Long)
2018-07-24 22:06:07 -<==      Total: 1
2018-07-24 22:06:07 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:06:07 -==> Parameters: 12(Long)
2018-07-24 22:06:07 -<==      Total: 1
2018-07-24 22:06:07 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:06:07 -==> Parameters: 137(Long)
2018-07-24 22:06:07 -<==      Total: 1
2018-07-24 22:06:07 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:06:07 -==> Parameters: 
2018-07-24 22:06:07 -<==      Total: 3
2018-07-24 22:06:07 -耗时 : 17
2018-07-24 22:06:07 -返回值 : system/user/edit
2018-07-24 22:06:07 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:06:07 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 17(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:06:07.571(Timestamp)
2018-07-24 22:06:07 -<==    Updates: 1
2018-07-24 22:06:17 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:06:17 -HTTP METHOD : POST
2018-07-24 22:06:17 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:06:17 -参数 : [UserDO{userId=137, username='test2', name='测试用户2', password='null', deptId=12, deptName='产品一部', email='test2@bootdo.com', mobile='null', status=1, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[2, 1], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:06:17 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:06:17 -==> Parameters: test2(String), 测试用户2(String), 12(Long), test2@bootdo.com(String), 1(Integer), 137(Long)
2018-07-24 22:06:17 -<==    Updates: 1
2018-07-24 22:06:17 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:06:17 -==> Parameters: 137(Long)
2018-07-24 22:06:17 -<==    Updates: 1
2018-07-24 22:06:17 -==>  Preparing: INSERT INTO sys_user_role(user_id, role_id) values (?,?) , (?,?) 
2018-07-24 22:06:17 -==> Parameters: 137(Long), 2(Long), 137(Long), 1(Long)
2018-07-24 22:06:17 -<==    Updates: 2
2018-07-24 22:06:17 -耗时 : 27
2018-07-24 22:06:17 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:06:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:06:17 -==> Parameters: 1(Long), admin(String), 更新用户(String), 27(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:06:17.62(Timestamp)
2018-07-24 22:06:17 -<==    Updates: 1
2018-07-24 22:06:17 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:17 -HTTP METHOD : GET
2018-07-24 22:06:17 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:17 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:06:17 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:06:17 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:06:17 -<==      Total: 10
2018-07-24 22:06:17 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:06:17 -==> Parameters: 
2018-07-24 22:06:17 -<==      Total: 1
2018-07-24 22:06:17 -耗时 : 9
2018-07-24 22:06:17 -返回值 : com.bootdo.common.utils.PageUtils@7269752e
2018-07-24 22:06:21 -请求地址 : http://localhost/sys/user/edit/137
2018-07-24 22:06:21 -HTTP METHOD : GET
2018-07-24 22:06:21 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:06:21 -参数 : [{}, 137]
2018-07-24 22:06:21 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:06:21 -==> Parameters: 137(Long)
2018-07-24 22:06:21 -<==      Total: 2
2018-07-24 22:06:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:06:21 -==> Parameters: 137(Long)
2018-07-24 22:06:21 -<==      Total: 1
2018-07-24 22:06:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:06:21 -==> Parameters: 12(Long)
2018-07-24 22:06:21 -<==      Total: 1
2018-07-24 22:06:21 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:06:21 -==> Parameters: 137(Long)
2018-07-24 22:06:21 -<==      Total: 2
2018-07-24 22:06:21 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:06:21 -==> Parameters: 
2018-07-24 22:06:21 -<==      Total: 3
2018-07-24 22:06:21 -耗时 : 18
2018-07-24 22:06:21 -返回值 : system/user/edit
2018-07-24 22:06:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:06:21 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 18(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:06:21.425(Timestamp)
2018-07-24 22:06:21 -<==    Updates: 1
2018-07-24 22:06:32 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:32 -HTTP METHOD : GET
2018-07-24 22:06:32 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:32 -参数 : [{limit=10, offset=0, name=, deptId=15}]
2018-07-24 22:06:32 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:32 -==> Parameters: 15(String), 0(Integer), 10(Integer)
2018-07-24 22:06:32 -<==      Total: 0
2018-07-24 22:06:32 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:32 -==> Parameters: 15(String)
2018-07-24 22:06:32 -<==      Total: 1
2018-07-24 22:06:32 -耗时 : 10
2018-07-24 22:06:32 -返回值 : com.bootdo.common.utils.PageUtils@6ed08184
2018-07-24 22:06:32 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:32 -HTTP METHOD : GET
2018-07-24 22:06:32 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:32 -参数 : [{limit=10, offset=0, name=, deptId=14}]
2018-07-24 22:06:32 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:32 -==> Parameters: 14(String), 0(Integer), 10(Integer)
2018-07-24 22:06:32 -<==      Total: 0
2018-07-24 22:06:32 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:32 -==> Parameters: 14(String)
2018-07-24 22:06:32 -<==      Total: 1
2018-07-24 22:06:32 -耗时 : 12
2018-07-24 22:06:32 -返回值 : com.bootdo.common.utils.PageUtils@4e3dbc0a
2018-07-24 22:06:33 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:33 -HTTP METHOD : GET
2018-07-24 22:06:33 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:33 -参数 : [{limit=10, offset=0, name=, deptId=13}]
2018-07-24 22:06:33 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:33 -==> Parameters: 13(String), 0(Integer), 10(Integer)
2018-07-24 22:06:33 -<==      Total: 1
2018-07-24 22:06:33 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:33 -==> Parameters: 13(String)
2018-07-24 22:06:33 -<==      Total: 1
2018-07-24 22:06:33 -耗时 : 11
2018-07-24 22:06:33 -返回值 : com.bootdo.common.utils.PageUtils@7eff9867
2018-07-24 22:06:33 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:33 -HTTP METHOD : GET
2018-07-24 22:06:33 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:33 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:06:33 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:06:33 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:06:33 -<==      Total: 10
2018-07-24 22:06:33 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:06:33 -==> Parameters: 
2018-07-24 22:06:33 -<==      Total: 1
2018-07-24 22:06:33 -耗时 : 8
2018-07-24 22:06:33 -返回值 : com.bootdo.common.utils.PageUtils@64367afb
2018-07-24 22:06:34 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:34 -HTTP METHOD : GET
2018-07-24 22:06:34 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:34 -参数 : [{limit=10, offset=0, name=, deptId=13}]
2018-07-24 22:06:34 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:34 -==> Parameters: 13(String), 0(Integer), 10(Integer)
2018-07-24 22:06:34 -<==      Total: 1
2018-07-24 22:06:34 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:34 -==> Parameters: 13(String)
2018-07-24 22:06:34 -<==      Total: 1
2018-07-24 22:06:34 -耗时 : 10
2018-07-24 22:06:34 -返回值 : com.bootdo.common.utils.PageUtils@af66447
2018-07-24 22:06:35 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:35 -HTTP METHOD : GET
2018-07-24 22:06:35 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:35 -参数 : [{limit=10, offset=0, name=, deptId=15}]
2018-07-24 22:06:35 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:35 -==> Parameters: 15(String), 0(Integer), 10(Integer)
2018-07-24 22:06:35 -<==      Total: 0
2018-07-24 22:06:35 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:35 -==> Parameters: 15(String)
2018-07-24 22:06:35 -<==      Total: 1
2018-07-24 22:06:35 -耗时 : 13
2018-07-24 22:06:35 -返回值 : com.bootdo.common.utils.PageUtils@38fd055f
2018-07-24 22:06:35 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:35 -HTTP METHOD : GET
2018-07-24 22:06:35 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:35 -参数 : [{limit=10, offset=0, name=, deptId=14}]
2018-07-24 22:06:35 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:35 -==> Parameters: 14(String), 0(Integer), 10(Integer)
2018-07-24 22:06:35 -<==      Total: 0
2018-07-24 22:06:35 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:35 -==> Parameters: 14(String)
2018-07-24 22:06:35 -<==      Total: 1
2018-07-24 22:06:35 -耗时 : 12
2018-07-24 22:06:35 -返回值 : com.bootdo.common.utils.PageUtils@64376c4c
2018-07-24 22:06:35 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:35 -HTTP METHOD : GET
2018-07-24 22:06:35 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:35 -参数 : [{limit=10, offset=0, name=, deptId=11}]
2018-07-24 22:06:35 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:35 -==> Parameters: 11(String), 0(Integer), 10(Integer)
2018-07-24 22:06:35 -<==      Total: 0
2018-07-24 22:06:35 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:35 -==> Parameters: 11(String)
2018-07-24 22:06:35 -<==      Total: 1
2018-07-24 22:06:35 -耗时 : 9
2018-07-24 22:06:35 -返回值 : com.bootdo.common.utils.PageUtils@3e00b418
2018-07-24 22:06:36 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:36 -HTTP METHOD : GET
2018-07-24 22:06:36 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:36 -参数 : [{limit=10, offset=0, name=, deptId=12}]
2018-07-24 22:06:36 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:36 -==> Parameters: 12(String), 0(Integer), 10(Integer)
2018-07-24 22:06:36 -<==      Total: 1
2018-07-24 22:06:36 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:36 -==> Parameters: 12(String)
2018-07-24 22:06:36 -<==      Total: 1
2018-07-24 22:06:36 -耗时 : 9
2018-07-24 22:06:36 -返回值 : com.bootdo.common.utils.PageUtils@79bed406
2018-07-24 22:06:36 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:36 -HTTP METHOD : GET
2018-07-24 22:06:36 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:36 -参数 : [{limit=10, offset=0, name=, deptId=9}]
2018-07-24 22:06:36 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:36 -==> Parameters: 9(String), 0(Integer), 10(Integer)
2018-07-24 22:06:36 -<==      Total: 2
2018-07-24 22:06:36 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:36 -==> Parameters: 9(String)
2018-07-24 22:06:36 -<==      Total: 1
2018-07-24 22:06:36 -耗时 : 12
2018-07-24 22:06:36 -返回值 : com.bootdo.common.utils.PageUtils@5d157ca3
2018-07-24 22:06:37 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:37 -HTTP METHOD : GET
2018-07-24 22:06:37 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:37 -参数 : [{limit=10, offset=0, name=, deptId=10}]
2018-07-24 22:06:37 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:37 -==> Parameters: 10(String), 0(Integer), 10(Integer)
2018-07-24 22:06:37 -<==      Total: 0
2018-07-24 22:06:37 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:37 -==> Parameters: 10(String)
2018-07-24 22:06:37 -<==      Total: 1
2018-07-24 22:06:37 -耗时 : 7
2018-07-24 22:06:37 -返回值 : com.bootdo.common.utils.PageUtils@39431ec6
2018-07-24 22:06:37 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:37 -HTTP METHOD : GET
2018-07-24 22:06:37 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:37 -参数 : [{limit=10, offset=0, name=, deptId=6}]
2018-07-24 22:06:37 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:37 -==> Parameters: 6(String), 0(Integer), 10(Integer)
2018-07-24 22:06:37 -<==      Total: 6
2018-07-24 22:06:37 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:37 -==> Parameters: 6(String)
2018-07-24 22:06:37 -<==      Total: 1
2018-07-24 22:06:37 -耗时 : 12
2018-07-24 22:06:37 -返回值 : com.bootdo.common.utils.PageUtils@31b5bdf2
2018-07-24 22:06:38 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:38 -HTTP METHOD : GET
2018-07-24 22:06:38 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:38 -参数 : [{limit=10, offset=0, name=, deptId=8}]
2018-07-24 22:06:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:38 -==> Parameters: 8(String), 0(Integer), 10(Integer)
2018-07-24 22:06:38 -<==      Total: 1
2018-07-24 22:06:38 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:38 -==> Parameters: 8(String)
2018-07-24 22:06:38 -<==      Total: 1
2018-07-24 22:06:38 -耗时 : 11
2018-07-24 22:06:38 -返回值 : com.bootdo.common.utils.PageUtils@3c17fb1f
2018-07-24 22:06:38 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:06:38 -HTTP METHOD : GET
2018-07-24 22:06:38 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:06:38 -参数 : [{limit=10, offset=0, name=, deptId=7}]
2018-07-24 22:06:38 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:06:38 -==> Parameters: 7(String), 0(Integer), 10(Integer)
2018-07-24 22:06:38 -<==      Total: 1
2018-07-24 22:06:38 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:06:38 -==> Parameters: 7(String)
2018-07-24 22:06:38 -<==      Total: 1
2018-07-24 22:06:38 -耗时 : 11
2018-07-24 22:06:38 -返回值 : com.bootdo.common.utils.PageUtils@1f65f803
2018-07-24 22:06:40 -请求地址 : http://localhost/system/sysDept
2018-07-24 22:06:40 -HTTP METHOD : GET
2018-07-24 22:06:40 -CLASS_METHOD : com.bootdo.system.controller.DeptController.dept
2018-07-24 22:06:40 -参数 : []
2018-07-24 22:06:40 -耗时 : 1
2018-07-24 22:06:40 -返回值 : system/dept/dept
2018-07-24 22:06:41 -请求地址 : http://localhost/system/sysDept/list
2018-07-24 22:06:41 -HTTP METHOD : GET
2018-07-24 22:06:41 -CLASS_METHOD : com.bootdo.system.controller.DeptController.list
2018-07-24 22:06:41 -参数 : []
2018-07-24 22:06:41 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2018-07-24 22:06:41 -==> Parameters: 
2018-07-24 22:06:41 -<==      Total: 10
2018-07-24 22:06:41 -耗时 : 6
2018-07-24 22:06:41 -返回值 : [DeptDO{deptId=15, parentId=13, name='测试二部', orderNum=2, delFlag=1}, DeptDO{deptId=14, parentId=13, name='测试一部', orderNum=1, delFlag=1}, DeptDO{deptId=13, parentId=0, name='测试部', orderNum=5, delFlag=1}, DeptDO{deptId=12, parentId=11, name='产品一部', orderNum=1, delFlag=1}, DeptDO{deptId=11, parentId=0, name='产品部', orderNum=3, delFlag=1}, DeptDO{deptId=10, parentId=9, name='销售一部', orderNum=1, delFlag=1}, DeptDO{deptId=9, parentId=0, name='销售部', orderNum=2, delFlag=1}, DeptDO{deptId=8, parentId=6, name='研发二部', orderNum=2, delFlag=1}, DeptDO{deptId=7, parentId=6, name='研發一部', orderNum=1, delFlag=1}, DeptDO{deptId=6, parentId=0, name='研发部', orderNum=1, delFlag=1}]
2018-07-24 22:06:48 -请求地址 : http://localhost/system/sysDept/edit/13
2018-07-24 22:06:48 -HTTP METHOD : GET
2018-07-24 22:06:48 -CLASS_METHOD : com.bootdo.system.controller.DeptController.edit
2018-07-24 22:06:48 -参数 : [13, {}]
2018-07-24 22:06:48 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:06:48 -==> Parameters: 13(Long)
2018-07-24 22:06:48 -<==      Total: 1
2018-07-24 22:06:48 -耗时 : 4
2018-07-24 22:06:48 -返回值 : system/dept/edit
2018-07-24 22:06:52 -请求地址 : http://localhost/system/sysDept/add/13
2018-07-24 22:06:52 -HTTP METHOD : GET
2018-07-24 22:06:52 -CLASS_METHOD : com.bootdo.system.controller.DeptController.add
2018-07-24 22:06:52 -参数 : [13, {}]
2018-07-24 22:06:52 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:06:52 -==> Parameters: 13(Long)
2018-07-24 22:06:52 -<==      Total: 1
2018-07-24 22:06:52 -耗时 : 3
2018-07-24 22:06:52 -返回值 : system/dept/add
2018-07-24 22:07:04 -请求地址 : http://localhost/system/sysDept/add/0
2018-07-24 22:07:04 -HTTP METHOD : GET
2018-07-24 22:07:04 -CLASS_METHOD : com.bootdo.system.controller.DeptController.add
2018-07-24 22:07:04 -参数 : [0, {}]
2018-07-24 22:07:04 -耗时 : 0
2018-07-24 22:07:04 -返回值 : system/dept/add
2018-07-24 22:07:11 -请求地址 : http://localhost/system/sysDept/add/0
2018-07-24 22:07:11 -HTTP METHOD : GET
2018-07-24 22:07:11 -CLASS_METHOD : com.bootdo.system.controller.DeptController.add
2018-07-24 22:07:11 -参数 : [0, {}]
2018-07-24 22:07:11 -耗时 : 1
2018-07-24 22:07:11 -返回值 : system/dept/add
2018-07-24 22:07:19 -请求地址 : http://localhost/system/sysDept/list
2018-07-24 22:07:19 -HTTP METHOD : GET
2018-07-24 22:07:19 -CLASS_METHOD : com.bootdo.system.controller.DeptController.list
2018-07-24 22:07:19 -参数 : []
2018-07-24 22:07:19 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2018-07-24 22:07:19 -==> Parameters: 
2018-07-24 22:07:19 -<==      Total: 10
2018-07-24 22:07:19 -耗时 : 3
2018-07-24 22:07:19 -返回值 : [DeptDO{deptId=15, parentId=13, name='测试二部', orderNum=2, delFlag=1}, DeptDO{deptId=14, parentId=13, name='测试一部', orderNum=1, delFlag=1}, DeptDO{deptId=13, parentId=0, name='测试部', orderNum=5, delFlag=1}, DeptDO{deptId=12, parentId=11, name='产品一部', orderNum=1, delFlag=1}, DeptDO{deptId=11, parentId=0, name='产品部', orderNum=3, delFlag=1}, DeptDO{deptId=10, parentId=9, name='销售一部', orderNum=1, delFlag=1}, DeptDO{deptId=9, parentId=0, name='销售部', orderNum=2, delFlag=1}, DeptDO{deptId=8, parentId=6, name='研发二部', orderNum=2, delFlag=1}, DeptDO{deptId=7, parentId=6, name='研發一部', orderNum=1, delFlag=1}, DeptDO{deptId=6, parentId=0, name='研发部', orderNum=1, delFlag=1}]
2018-07-24 22:07:21 -请求地址 : http://localhost/system/sysDept/list
2018-07-24 22:07:21 -HTTP METHOD : GET
2018-07-24 22:07:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.list
2018-07-24 22:07:21 -参数 : []
2018-07-24 22:07:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2018-07-24 22:07:21 -==> Parameters: 
2018-07-24 22:07:21 -<==      Total: 10
2018-07-24 22:07:21 -耗时 : 4
2018-07-24 22:07:21 -返回值 : [DeptDO{deptId=15, parentId=13, name='测试二部', orderNum=2, delFlag=1}, DeptDO{deptId=14, parentId=13, name='测试一部', orderNum=1, delFlag=1}, DeptDO{deptId=13, parentId=0, name='测试部', orderNum=5, delFlag=1}, DeptDO{deptId=12, parentId=11, name='产品一部', orderNum=1, delFlag=1}, DeptDO{deptId=11, parentId=0, name='产品部', orderNum=3, delFlag=1}, DeptDO{deptId=10, parentId=9, name='销售一部', orderNum=1, delFlag=1}, DeptDO{deptId=9, parentId=0, name='销售部', orderNum=2, delFlag=1}, DeptDO{deptId=8, parentId=6, name='研发二部', orderNum=2, delFlag=1}, DeptDO{deptId=7, parentId=6, name='研發一部', orderNum=1, delFlag=1}, DeptDO{deptId=6, parentId=0, name='研发部', orderNum=1, delFlag=1}]
2018-07-24 22:07:21 -请求地址 : http://localhost/system/sysDept/list
2018-07-24 22:07:21 -HTTP METHOD : GET
2018-07-24 22:07:21 -CLASS_METHOD : com.bootdo.system.controller.DeptController.list
2018-07-24 22:07:21 -参数 : []
2018-07-24 22:07:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2018-07-24 22:07:21 -==> Parameters: 
2018-07-24 22:07:21 -<==      Total: 10
2018-07-24 22:07:21 -耗时 : 3
2018-07-24 22:07:21 -返回值 : [DeptDO{deptId=15, parentId=13, name='测试二部', orderNum=2, delFlag=1}, DeptDO{deptId=14, parentId=13, name='测试一部', orderNum=1, delFlag=1}, DeptDO{deptId=13, parentId=0, name='测试部', orderNum=5, delFlag=1}, DeptDO{deptId=12, parentId=11, name='产品一部', orderNum=1, delFlag=1}, DeptDO{deptId=11, parentId=0, name='产品部', orderNum=3, delFlag=1}, DeptDO{deptId=10, parentId=9, name='销售一部', orderNum=1, delFlag=1}, DeptDO{deptId=9, parentId=0, name='销售部', orderNum=2, delFlag=1}, DeptDO{deptId=8, parentId=6, name='研发二部', orderNum=2, delFlag=1}, DeptDO{deptId=7, parentId=6, name='研發一部', orderNum=1, delFlag=1}, DeptDO{deptId=6, parentId=0, name='研发部', orderNum=1, delFlag=1}]
2018-07-24 22:07:22 -请求地址 : http://localhost/system/sysDept/list
2018-07-24 22:07:22 -HTTP METHOD : GET
2018-07-24 22:07:22 -CLASS_METHOD : com.bootdo.system.controller.DeptController.list
2018-07-24 22:07:22 -参数 : []
2018-07-24 22:07:22 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept order by dept_id desc 
2018-07-24 22:07:22 -==> Parameters: 
2018-07-24 22:07:22 -<==      Total: 10
2018-07-24 22:07:22 -耗时 : 4
2018-07-24 22:07:22 -返回值 : [DeptDO{deptId=15, parentId=13, name='测试二部', orderNum=2, delFlag=1}, DeptDO{deptId=14, parentId=13, name='测试一部', orderNum=1, delFlag=1}, DeptDO{deptId=13, parentId=0, name='测试部', orderNum=5, delFlag=1}, DeptDO{deptId=12, parentId=11, name='产品一部', orderNum=1, delFlag=1}, DeptDO{deptId=11, parentId=0, name='产品部', orderNum=3, delFlag=1}, DeptDO{deptId=10, parentId=9, name='销售一部', orderNum=1, delFlag=1}, DeptDO{deptId=9, parentId=0, name='销售部', orderNum=2, delFlag=1}, DeptDO{deptId=8, parentId=6, name='研发二部', orderNum=2, delFlag=1}, DeptDO{deptId=7, parentId=6, name='研發一部', orderNum=1, delFlag=1}, DeptDO{deptId=6, parentId=0, name='研发部', orderNum=1, delFlag=1}]
2018-07-24 22:19:19 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2018-07-24 22:19:19 -==> Parameters: 1(Long)
2018-07-24 22:19:19 -<==      Total: 47
2018-07-24 22:19:19 -请求地址 : http://localhost/blog/bContent/add
2018-07-24 22:19:19 -HTTP METHOD : GET
2018-07-24 22:19:19 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.add
2018-07-24 22:19:19 -参数 : []
2018-07-24 22:19:19 -耗时 : 0
2018-07-24 22:19:19 -返回值 : blog/bContent/add
2018-07-24 22:19:22 -请求地址 : http://localhost/blog/bContent
2018-07-24 22:19:22 -HTTP METHOD : GET
2018-07-24 22:19:22 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.bContent
2018-07-24 22:19:22 -参数 : []
2018-07-24 22:19:22 -耗时 : 1
2018-07-24 22:19:22 -返回值 : blog/bContent/bContent
2018-07-24 22:19:22 -请求地址 : http://localhost/blog/bContent/list
2018-07-24 22:19:22 -HTTP METHOD : GET
2018-07-24 22:19:22 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.list
2018-07-24 22:19:22 -参数 : [{limit=10, offset=0}]
2018-07-24 22:19:22 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content order by cid desc limit 0, 10 
2018-07-24 22:19:22 -==> Parameters: 
2018-07-24 22:19:22 -<==      Total: 10
2018-07-24 22:19:22 -==>  Preparing: select count(*) from blog_content 
2018-07-24 22:19:22 -==> Parameters: 
2018-07-24 22:19:22 -<==      Total: 1
2018-07-24 22:19:22 -耗时 : 41
2018-07-24 22:19:22 -返回值 : com.bootdo.common.utils.PageUtils@35e68382
2018-07-24 22:19:24 -请求地址 : http://localhost/blog/bContent/edit/121
2018-07-24 22:19:24 -HTTP METHOD : GET
2018-07-24 22:19:24 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.edit
2018-07-24 22:19:24 -参数 : [121, {}]
2018-07-24 22:19:24 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:19:24 -==> Parameters: 121(Long)
2018-07-24 22:19:24 -<==      Total: 1
2018-07-24 22:19:24 -耗时 : 6
2018-07-24 22:19:24 -返回值 : blog/bContent/edit
2018-07-24 22:20:15 -请求地址 : http://localhost/common/sysFile/upload
2018-07-24 22:20:15 -HTTP METHOD : POST
2018-07-24 22:20:15 -CLASS_METHOD : com.bootdo.common.controller.FileController.upload
2018-07-24 22:20:15 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@a209f1, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@678435fe]
2018-07-24 22:20:15 -==>  Preparing: insert into sys_file ( `type`, `url`, `create_date` ) values ( ?, ?, ? ) 
2018-07-24 22:20:15 -==> Parameters: 0(Integer), /files/5349b7f7-7a46-4994-bdd3-1ff65c69f2d3.jpg(String), 2018-07-24 22:20:15.516(Timestamp)
2018-07-24 22:20:15 -<==    Updates: 1
2018-07-24 22:20:15 -耗时 : 71
2018-07-24 22:20:15 -返回值 : {msg=操作成功, fileName=/files/5349b7f7-7a46-4994-bdd3-1ff65c69f2d3.jpg, code=0}
2018-07-24 22:20:26 -请求地址 : http://localhost/blog/bContent/save
2018-07-24 22:20:26 -HTTP METHOD : POST
2018-07-24 22:20:26 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.save
2018-07-24 22:20:26 -参数 : [ContentDO{cid=121, title='', slug='null', created=null, modified=null, content='<p><br></p><div class="Layout-navbarHolder" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; height: 59px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><header class="Navbar ScrollBackFixed" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; contain: layout; -webkit-box-pack: justify; justify-content: space-between; height: 59px; width: 1519.2px; border-bottom: 1px solid rgba(0, 0, 0, 0.08); color: rgb(128, 128, 128); background: rgba(255, 255, 255, 0.97); z-index: 2; position: fixed; border-top-color: rgba(0, 0, 0, 0.08); border-right-color: rgba(0, 0, 0, 0.08); border-left-color: rgba(0, 0, 0, 0.08); transform: translateY(-100%); will-change: transform;"><div class="Navbar-functionality" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: absolute; right: 0px; top: 0px; height: 58px; align-self: stretch;"><a class="Navbar-write" style="box-sizing: inherit; color: inherit; display: flex; -webkit-box-align: center; align-items: center; padding: 0px 10px; white-space: nowrap; transition: color 0.2s;"><span class="icon icon-ic_nav_new" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; margin-right: 3px; font-family: icomoon !important;"></span>写文章</a><button class="Button Navbar-loginButon Button--blue" type="button" style="box-sizing: inherit; padding: 0px 16px; color: rgb(0, 128, 255); font-size: 14px; line-height: 30px; background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-width: 1px; border-style: solid; border-color: rgb(0, 128, 255); -webkit-appearance: none; border-radius: 4px; height: 32px; margin-right: 16px; margin-left: 6px; width: 72px;">登录</button></div></header></div><div style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"></div><div class="Layout-main av-card av-paddingBottom av-bodyFont Layout-titleImage--normal" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin: 22px auto 0px; padding: 0px; width: 660px; z-index: 1; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><div class="PostIndex-header av-paddingTop av-card" data-zop="{&quot;authorName&quot;:&quot;老A&quot;,&quot;itemId&quot;:&quot;29345083&quot;,&quot;title&quot;:&quot;Spring Cloud下微服务权限方案&quot;,&quot;type&quot;:&quot;article&quot;}" data-za-module="PostItem" data-za-module-info="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Post&quot;,&quot;token&quot;:&quot;29345083&quot;}}}" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><div class="TitleImage" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin-bottom: 22px;"><img alt="Spring Cloud下微服务权限方案" src="https://pic4.zhimg.com/v2-32e374b99a4332ca8bd52fca9d090617_r.png" class="TitleImage-imagePure TitleImage-imagePure--fixed" height="396px" style="box-sizing: inherit; overflow: hidden; width: 660px; display: block;"></div><h1 class="PostIndex-title av-paddingSide av-titleFont" style="box-sizing: inherit; margin-top: 0px; margin-bottom: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: 32px; line-height: 1.3;">Spring Cloud下微服务权限方案</h1><div class="PostIndex-author" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: relative; font-size: 14px; color: rgb(128, 128, 128); margin-top: 22px;"><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" style="box-sizing: inherit; color: inherit;"><img class="Avatar-hemingway PostIndex-authorAvatar Avatar--xs" alt="老A" src="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_xs.jpg" srcset="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_l.jpg 2x" style="box-sizing: inherit; overflow: hidden; width: 36px; height: 36px; border-radius: 50%; margin-right: 12px;"></a><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" class="PostIndex-authorName" style="box-sizing: inherit; color: rgb(128, 128, 128); min-width: 0px; text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">老A</a><span class="Bull" style="box-sizing: inherit; margin: 0px 6px;"></span><div class="HoverTitle" data-hover-title="2017 年 9月 14 日星期四晚上 7 点 12 分" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><time datetime="Thu Sep 14 2017 19:12:26 GMT+0800 (中国标准时间)" style="box-sizing: inherit;">1 个月前</time></div></div></div><div class="RichText PostIndex-content av-paddingSide av-card" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; word-break: break-word; margin: 30px 0px; line-height: 1.7;"><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">背景</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">从传统的单体应用转型Spring Cloud的朋友都在问我，Spring Cloud下的微服务权限怎么管？怎么设计比较合理？从大层面讲叫服务权限，往小处拆分，分别为三块：用户认证、用户权限、服务校验。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户认证</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用可能习惯了session的存在，而到了Spring cloud的微服务化后，session虽然可以采取分布式会话来解决，但终究不是上上策。开始有人推行Spring Cloud Security结合很好的OAuth2，后面为了优化OAuth 2中Access Token的存储问题，提高后端服务的可用性和扩展性，有了更好Token验证方式JWT（JSON Web Token）。这里要强调一点的是，OAuth2和JWT这两个根本没有可比性，是两个完全不同的东西。 OAuth2是一种授权框架，而JWT是一种认证协议</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2认证框架</h2><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2中包含四个角色：</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源拥有者(Resource Owner)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源服务器(Resource Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权服务器(Authorization Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端(Client)</li></ul><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2包含4种授权模式</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权码（认证码）模式 （Authorization code)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">简化（隐形）模式 (Impilict</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">用户名密码模式 (Resource Owner Password Credential)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端模式 (Client Credential)</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，OAuth2的运行流程如下图，摘自RFC 6749：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+--------+                               +---------------+
|        |--(A)- Authorization Request -&gt;|   Resource    |
|        |                               |     Owner     |
|        |&lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&gt;| Authorization |
| Client |                               |     Server    |
|        |&lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&gt;|    Resource   |
|        |                               |     Server    |
|        |&lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">我们在Spring Cloud OAuth2中，所有访问微服务资源的请求都在Http Header中携带Token，被访问的服务接下来再去请求授权服务器验证Token的有效性，目前这种方式，我们需要两次或者更多次的请求，所有的Token有效性校验都落在的授权服务器上，对于我们系统的水平扩展成为一个非常大的瓶颈。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">JWT认证协议</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">授权服务器将用户信息和授权范围序列化后放入一个JSON字符串，然后使用Base64进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个JSON Web Token。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">假设其他所有的资源服务器都将持有一个RSA公钥，当资源服务器接收到这个在Http Header中存有Token的请求，资源服务器就可以拿到这个Token，并验证它是否使用正确的私钥签名（是否经过授权服务器签名，也就是验签）。验签通过，反序列化后就拿到Toekn中包含的有效验证信息。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><img src="/files/5349b7f7-7a46-4994-bdd3-1ff65c69f2d3.jpg" style="width: 927px;"><br></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，主体运作流程图如下：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+-----------+                                     +-------------+
|           |       1-Request Authorization       |             |
|           |------------------------------------&gt;|             |
|           |     grant_type&amp;username&amp;password    |             |--+
|           |                                     |Authorization|  | 2-Gen
|           |                                     |Service      |  |   JWT
|           |       3-Response Authorization      |             |&lt;-+
|           |&lt;------------------------------------| Private Key |
|           |    access_token / refresh_token     |             |
|           |    token_type / expire_in           |             |
|  Client   |                                     +-------------+
|           |                                 
|           |                                     +-------------+
|           |       4-Request Resource            |             |
|           |-----------------------------------&gt; |             |
|           | Authorization: bearer Access Token  |             |--+
|           |                                     | Resource    |  | 5-Verify
|           |                                     | Service     |  |  Token
|           |       6-Response Resource           |             |&lt;-+
|           |&lt;----------------------------------- | Public Key  |
+-----------+                                     +-------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">通过上述的方式，我们可以很好地完成服务化后的用户认证。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户权限</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用的权限拦截，大家都喜欢shiro，而且用的颇为顺手。可是一旦拆分后，这权限开始分散在各个API了，shiro还好使吗？笔者在项目中，并没有用shiro。前后端分离后，交互都是token，后端的服务无状态化，前端按钮资源化，权限放哪儿管好使？</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">抽象与设计</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在介绍灵活的核心设计前，先给大家普及一个入门的概念：RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">RBAC其实是一种分析模型，主要分为：基本模型RBAC0（Core RBAC）、角色分层模型RBAC1（Hierarchal RBAC）、角色限制模型RBAC2（Constraint RBAC）和统一模型RBAC3（Combines RBAC）。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">更多详情大家可以了解：<a href="http://link.zhihu.com/?target=http%3A//blog.csdn.net/zwk626542417/article/details/46726491" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">RBAC权限模型<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">核心UML</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" data-rawwidth="1168" data-rawheight="532" class="origin_image zh-lightbox-thumb lazy" width="1168" data-original="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_r.png" data-actualsrc="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">这是笔者通过多种业务场景后抽象的RBAC关系图</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">类说明</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Group</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">群或组，拥有一定数量权限的集合，亦可以是权限的载体。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">子类：User（用户）、Role（角色）、Position（岗位）、Unit（部门），通过用户的特定构成，形成不同业务场景的群或组，而通过对群或组的父类授权，完成了用户的权限获取。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Permission</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限，拥有一定数量资源的集成，亦可以是资源的载体。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Resources</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限下有资源，资源的来源有：Menu（菜单）、Button（动作权限）、页面元素（按钮、tab等）、数据权限等</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Program</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">程序，相关权限控制的呈现载体，可以在多个菜单中挂载。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">常见web程序基本构成</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" data-rawwidth="873" data-rawheight="492" class="origin_image zh-lightbox-thumb lazy" width="873" data-original="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_r.png" data-actualsrc="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">模型与微服务的关系</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">如果把Spring Cloud服务化后的所有api接口都定义为上文的Resources，那么我们可以看到这么一个情况。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">比如一个用户的增删改查，我们的页面会这么做</p><img src="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" data-rawwidth="2880" data-rawheight="1460" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_r.png" data-actualsrc="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">页面元素资源编码资源URI资源请求方式查询user_btn_get/api/user/{id}GET增加user_btn_add/api/userPOST编辑user_btn_edit/api/user/{id}PUT删除user_btn_del/api/user/{id}DELETE</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在抽象成上述的映射关系后，我们的前后端的资源有了参照，我们对于用户组的权限授权就容易了。比如我授予一个用户增加、删除权限。在前端我们只需要检验该资源编码的有无就可以控制按钮的显示和隐藏，而在后端我们只需要统一拦截判断该用户是否具有URI和对应请求方式即可。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">至于权限的统一拦截是放置在Zuul这个网关上，还是落在具体的后端服务的拦截器上（Filter、Inteceptor），都可以轻而易举地实现。不在局限于代码的侵入性。放置Zuul流程图如下：</p><img src="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" data-rawwidth="1426" data-rawheight="710" class="origin_image zh-lightbox-thumb lazy" width="1426" data-original="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_r.png" data-actualsrc="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">要是权限的统一拦截放置在Zuul上，会有一个问题，那就是后端服务安不安全，服务只需要通过注册中心，即可对其他服务进行调用。这里就涉及到后面的第三个模块，服务之间的鉴权。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">服务之间的鉴权</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">因为我们都知道服务之间开源通过注册中心寻到客户端后，直接远程过程调用的。对于生产上的各个服务，一个个敏感性的接口，我们更是需要加以保护。主题的流程如下图：</p><img src="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" data-rawwidth="1700" data-rawheight="926" class="origin_image zh-lightbox-thumb lazy" width="1700" data-original="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_r.png" data-actualsrc="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">笔者的实现方式是基于Spring Cloud的FeignClient Inteceprot（自动申请服务token、传递当前上下文）和Mvc Inteceptor（服务token校验、更新当前上下文）来实现，从而对服务的安全性做进一步保护。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">结合Spring Cloud的特性后，整体流程图如下：</p><img src="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" data-rawwidth="2182" data-rawheight="1638" class="origin_image zh-lightbox-thumb lazy" width="2182" data-original="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_r.png" data-actualsrc="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">优化点</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">虽然通过上述的用户合法性检验、用户权限拦截以及服务之间的鉴权，保证了Api接口的安全性，但是其间的Http访问频率是比较高的，请求数量上来的时候，慢的问题是就会特别明显。可以考虑一定的优化策略，比如用户权限缓存、服务授权信息的派发与混存、定时刷新服务鉴权Token等。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">结语</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">上述是笔者在项目里的大体思路，有兴趣的朋友可以借鉴我的开源项目，欢迎star：</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-security%25EF%25BC%2588Jwt%25E3%2580%2581%25E7%2594%25A8%25E6%2588%25B7%25E6%259D%2583%25E9%2599%2590%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-security（Jwt、用户权限）<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">github：<a href="http://link.zhihu.com/?target=https%3A//github.com/wxiaoqi/ace-security" class=" external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;"><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">https://</span><span class="visible" style="box-sizing: inherit;">github.com/wxiaoqi/ace-</span><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">security</span><span class="ellipsis" style="box-sizing: inherit;"></span><span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-gate%25EF%25BC%2588%25E6%259C%258D%25E5%258A%25A1%25E9%2589%25B4%25E6%259D%2583%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-gate（服务鉴权）</a></li></ul></div></div>', type='null', tags='null', categories='', hits=null, commentsNum=null, allowComment=1, allowPing=null, allowFeed=1, status=1, author='bootdo', gtmCreate=null, gtmModified=null}]
2018-07-24 22:20:26 -==>  Preparing: update blog_content SET `title` = ?, `content` = ?, `type` = ?, `categories` = ?, `allow_comment` = ?, `allow_feed` = ?, `status` = ?, `author` = ?, `gtm_create` = ?, `gtm_modified` = ? where cid = ? 
2018-07-24 22:20:26 -==> Parameters: (String), <p><br></p><div class="Layout-navbarHolder" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; height: 59px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><header class="Navbar ScrollBackFixed" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; contain: layout; -webkit-box-pack: justify; justify-content: space-between; height: 59px; width: 1519.2px; border-bottom: 1px solid rgba(0, 0, 0, 0.08); color: rgb(128, 128, 128); background: rgba(255, 255, 255, 0.97); z-index: 2; position: fixed; border-top-color: rgba(0, 0, 0, 0.08); border-right-color: rgba(0, 0, 0, 0.08); border-left-color: rgba(0, 0, 0, 0.08); transform: translateY(-100%); will-change: transform;"><div class="Navbar-functionality" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: absolute; right: 0px; top: 0px; height: 58px; align-self: stretch;"><a class="Navbar-write" style="box-sizing: inherit; color: inherit; display: flex; -webkit-box-align: center; align-items: center; padding: 0px 10px; white-space: nowrap; transition: color 0.2s;"><span class="icon icon-ic_nav_new" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; margin-right: 3px; font-family: icomoon !important;"></span>写文章</a><button class="Button Navbar-loginButon Button--blue" type="button" style="box-sizing: inherit; padding: 0px 16px; color: rgb(0, 128, 255); font-size: 14px; line-height: 30px; background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-width: 1px; border-style: solid; border-color: rgb(0, 128, 255); -webkit-appearance: none; border-radius: 4px; height: 32px; margin-right: 16px; margin-left: 6px; width: 72px;">登录</button></div></header></div><div style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"></div><div class="Layout-main av-card av-paddingBottom av-bodyFont Layout-titleImage--normal" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin: 22px auto 0px; padding: 0px; width: 660px; z-index: 1; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><div class="PostIndex-header av-paddingTop av-card" data-zop="{&quot;authorName&quot;:&quot;老A&quot;,&quot;itemId&quot;:&quot;29345083&quot;,&quot;title&quot;:&quot;Spring Cloud下微服务权限方案&quot;,&quot;type&quot;:&quot;article&quot;}" data-za-module="PostItem" data-za-module-info="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Post&quot;,&quot;token&quot;:&quot;29345083&quot;}}}" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><div class="TitleImage" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin-bottom: 22px;"><img alt="Spring Cloud下微服务权限方案" src="https://pic4.zhimg.com/v2-32e374b99a4332ca8bd52fca9d090617_r.png" class="TitleImage-imagePure TitleImage-imagePure--fixed" height="396px" style="box-sizing: inherit; overflow: hidden; width: 660px; display: block;"></div><h1 class="PostIndex-title av-paddingSide av-titleFont" style="box-sizing: inherit; margin-top: 0px; margin-bottom: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: 32px; line-height: 1.3;">Spring Cloud下微服务权限方案</h1><div class="PostIndex-author" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: relative; font-size: 14px; color: rgb(128, 128, 128); margin-top: 22px;"><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" style="box-sizing: inherit; color: inherit;"><img class="Avatar-hemingway PostIndex-authorAvatar Avatar--xs" alt="老A" src="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_xs.jpg" srcset="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_l.jpg 2x" style="box-sizing: inherit; overflow: hidden; width: 36px; height: 36px; border-radius: 50%; margin-right: 12px;"></a><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" class="PostIndex-authorName" style="box-sizing: inherit; color: rgb(128, 128, 128); min-width: 0px; text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">老A</a><span class="Bull" style="box-sizing: inherit; margin: 0px 6px;"></span><div class="HoverTitle" data-hover-title="2017 年 9月 14 日星期四晚上 7 点 12 分" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><time datetime="Thu Sep 14 2017 19:12:26 GMT+0800 (中国标准时间)" style="box-sizing: inherit;">1 个月前</time></div></div></div><div class="RichText PostIndex-content av-paddingSide av-card" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; word-break: break-word; margin: 30px 0px; line-height: 1.7;"><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">背景</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">从传统的单体应用转型Spring Cloud的朋友都在问我，Spring Cloud下的微服务权限怎么管？怎么设计比较合理？从大层面讲叫服务权限，往小处拆分，分别为三块：用户认证、用户权限、服务校验。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户认证</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用可能习惯了session的存在，而到了Spring cloud的微服务化后，session虽然可以采取分布式会话来解决，但终究不是上上策。开始有人推行Spring Cloud Security结合很好的OAuth2，后面为了优化OAuth 2中Access Token的存储问题，提高后端服务的可用性和扩展性，有了更好Token验证方式JWT（JSON Web Token）。这里要强调一点的是，OAuth2和JWT这两个根本没有可比性，是两个完全不同的东西。 OAuth2是一种授权框架，而JWT是一种认证协议</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2认证框架</h2><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2中包含四个角色：</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源拥有者(Resource Owner)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源服务器(Resource Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权服务器(Authorization Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端(Client)</li></ul><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2包含4种授权模式</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权码（认证码）模式 （Authorization code)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">简化（隐形）模式 (Impilict</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">用户名密码模式 (Resource Owner Password Credential)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端模式 (Client Credential)</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，OAuth2的运行流程如下图，摘自RFC 6749：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+--------+                               +---------------+
|        |--(A)- Authorization Request -&gt;|   Resource    |
|        |                               |     Owner     |
|        |&lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&gt;| Authorization |
| Client |                               |     Server    |
|        |&lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&gt;|    Resource   |
|        |                               |     Server    |
|        |&lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">我们在Spring Cloud OAuth2中，所有访问微服务资源的请求都在Http Header中携带Token，被访问的服务接下来再去请求授权服务器验证Token的有效性，目前这种方式，我们需要两次或者更多次的请求，所有的Token有效性校验都落在的授权服务器上，对于我们系统的水平扩展成为一个非常大的瓶颈。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">JWT认证协议</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">授权服务器将用户信息和授权范围序列化后放入一个JSON字符串，然后使用Base64进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个JSON Web Token。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">假设其他所有的资源服务器都将持有一个RSA公钥，当资源服务器接收到这个在Http Header中存有Token的请求，资源服务器就可以拿到这个Token，并验证它是否使用正确的私钥签名（是否经过授权服务器签名，也就是验签）。验签通过，反序列化后就拿到Toekn中包含的有效验证信息。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><img src="/files/5349b7f7-7a46-4994-bdd3-1ff65c69f2d3.jpg" style="width: 927px;"><br></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，主体运作流程图如下：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+-----------+                                     +-------------+
|           |       1-Request Authorization       |             |
|           |------------------------------------&gt;|             |
|           |     grant_type&amp;username&amp;password    |             |--+
|           |                                     |Authorization|  | 2-Gen
|           |                                     |Service      |  |   JWT
|           |       3-Response Authorization      |             |&lt;-+
|           |&lt;------------------------------------| Private Key |
|           |    access_token / refresh_token     |             |
|           |    token_type / expire_in           |             |
|  Client   |                                     +-------------+
|           |                                 
|           |                                     +-------------+
|           |       4-Request Resource            |             |
|           |-----------------------------------&gt; |             |
|           | Authorization: bearer Access Token  |             |--+
|           |                                     | Resource    |  | 5-Verify
|           |                                     | Service     |  |  Token
|           |       6-Response Resource           |             |&lt;-+
|           |&lt;----------------------------------- | Public Key  |
+-----------+                                     +-------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">通过上述的方式，我们可以很好地完成服务化后的用户认证。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户权限</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用的权限拦截，大家都喜欢shiro，而且用的颇为顺手。可是一旦拆分后，这权限开始分散在各个API了，shiro还好使吗？笔者在项目中，并没有用shiro。前后端分离后，交互都是token，后端的服务无状态化，前端按钮资源化，权限放哪儿管好使？</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">抽象与设计</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在介绍灵活的核心设计前，先给大家普及一个入门的概念：RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">RBAC其实是一种分析模型，主要分为：基本模型RBAC0（Core RBAC）、角色分层模型RBAC1（Hierarchal RBAC）、角色限制模型RBAC2（Constraint RBAC）和统一模型RBAC3（Combines RBAC）。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">更多详情大家可以了解：<a href="http://link.zhihu.com/?target=http%3A//blog.csdn.net/zwk626542417/article/details/46726491" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">RBAC权限模型<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">核心UML</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" data-rawwidth="1168" data-rawheight="532" class="origin_image zh-lightbox-thumb lazy" width="1168" data-original="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_r.png" data-actualsrc="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">这是笔者通过多种业务场景后抽象的RBAC关系图</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">类说明</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Group</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">群或组，拥有一定数量权限的集合，亦可以是权限的载体。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">子类：User（用户）、Role（角色）、Position（岗位）、Unit（部门），通过用户的特定构成，形成不同业务场景的群或组，而通过对群或组的父类授权，完成了用户的权限获取。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Permission</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限，拥有一定数量资源的集成，亦可以是资源的载体。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Resources</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限下有资源，资源的来源有：Menu（菜单）、Button（动作权限）、页面元素（按钮、tab等）、数据权限等</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Program</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">程序，相关权限控制的呈现载体，可以在多个菜单中挂载。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">常见web程序基本构成</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" data-rawwidth="873" data-rawheight="492" class="origin_image zh-lightbox-thumb lazy" width="873" data-original="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_r.png" data-actualsrc="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">模型与微服务的关系</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">如果把Spring Cloud服务化后的所有api接口都定义为上文的Resources，那么我们可以看到这么一个情况。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">比如一个用户的增删改查，我们的页面会这么做</p><img src="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" data-rawwidth="2880" data-rawheight="1460" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_r.png" data-actualsrc="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">页面元素资源编码资源URI资源请求方式查询user_btn_get/api/user/{id}GET增加user_btn_add/api/userPOST编辑user_btn_edit/api/user/{id}PUT删除user_btn_del/api/user/{id}DELETE</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在抽象成上述的映射关系后，我们的前后端的资源有了参照，我们对于用户组的权限授权就容易了。比如我授予一个用户增加、删除权限。在前端我们只需要检验该资源编码的有无就可以控制按钮的显示和隐藏，而在后端我们只需要统一拦截判断该用户是否具有URI和对应请求方式即可。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">至于权限的统一拦截是放置在Zuul这个网关上，还是落在具体的后端服务的拦截器上（Filter、Inteceptor），都可以轻而易举地实现。不在局限于代码的侵入性。放置Zuul流程图如下：</p><img src="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" data-rawwidth="1426" data-rawheight="710" class="origin_image zh-lightbox-thumb lazy" width="1426" data-original="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_r.png" data-actualsrc="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">要是权限的统一拦截放置在Zuul上，会有一个问题，那就是后端服务安不安全，服务只需要通过注册中心，即可对其他服务进行调用。这里就涉及到后面的第三个模块，服务之间的鉴权。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">服务之间的鉴权</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">因为我们都知道服务之间开源通过注册中心寻到客户端后，直接远程过程调用的。对于生产上的各个服务，一个个敏感性的接口，我们更是需要加以保护。主题的流程如下图：</p><img src="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" data-rawwidth="1700" data-rawheight="926" class="origin_image zh-lightbox-thumb lazy" width="1700" data-original="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_r.png" data-actualsrc="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">笔者的实现方式是基于Spring Cloud的FeignClient Inteceprot（自动申请服务token、传递当前上下文）和Mvc Inteceptor（服务token校验、更新当前上下文）来实现，从而对服务的安全性做进一步保护。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">结合Spring Cloud的特性后，整体流程图如下：</p><img src="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" data-rawwidth="2182" data-rawheight="1638" class="origin_image zh-lightbox-thumb lazy" width="2182" data-original="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_r.png" data-actualsrc="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">优化点</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">虽然通过上述的用户合法性检验、用户权限拦截以及服务之间的鉴权，保证了Api接口的安全性，但是其间的Http访问频率是比较高的，请求数量上来的时候，慢的问题是就会特别明显。可以考虑一定的优化策略，比如用户权限缓存、服务授权信息的派发与混存、定时刷新服务鉴权Token等。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">结语</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">上述是笔者在项目里的大体思路，有兴趣的朋友可以借鉴我的开源项目，欢迎star：</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-security%25EF%25BC%2588Jwt%25E3%2580%2581%25E7%2594%25A8%25E6%2588%25B7%25E6%259D%2583%25E9%2599%2590%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-security（Jwt、用户权限）<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">github：<a href="http://link.zhihu.com/?target=https%3A//github.com/wxiaoqi/ace-security" class=" external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;"><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">https://</span><span class="visible" style="box-sizing: inherit;">github.com/wxiaoqi/ace-</span><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">security</span><span class="ellipsis" style="box-sizing: inherit;"></span><span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-gate%25EF%25BC%2588%25E6%259C%258D%25E5%258A%25A1%25E9%2589%25B4%25E6%259D%2583%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-gate（服务鉴权）</a></li></ul></div></div>(String), article(String), (String), 1(Integer), 1(Integer), 1(Integer), bootdo(String), 2018-07-24 22:20:26.941(Timestamp), 2018-07-24 22:20:26.941(Timestamp), 121(Long)
2018-07-24 22:20:26 -<==    Updates: 1
2018-07-24 22:20:26 -耗时 : 28
2018-07-24 22:20:26 -返回值 : {msg=操作成功, code=0, cid=121}
2018-07-24 22:20:26 -请求地址 : http://localhost/blog/bContent/list
2018-07-24 22:20:26 -HTTP METHOD : GET
2018-07-24 22:20:26 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.list
2018-07-24 22:20:26 -参数 : [{limit=10, offset=0}]
2018-07-24 22:20:26 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content order by cid desc limit 0, 10 
2018-07-24 22:20:26 -==> Parameters: 
2018-07-24 22:20:26 -<==      Total: 10
2018-07-24 22:20:26 -==>  Preparing: select count(*) from blog_content 
2018-07-24 22:20:26 -==> Parameters: 
2018-07-24 22:20:26 -<==      Total: 1
2018-07-24 22:20:26 -耗时 : 18
2018-07-24 22:20:26 -返回值 : com.bootdo.common.utils.PageUtils@d8211c7
2018-07-24 22:20:35 -请求地址 : http://localhost/blog/bContent/save
2018-07-24 22:20:35 -HTTP METHOD : POST
2018-07-24 22:20:35 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.save
2018-07-24 22:20:35 -参数 : [ContentDO{cid=121, title='test', slug='null', created=null, modified=null, content='<p><br></p><div class="Layout-navbarHolder" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; height: 59px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><header class="Navbar ScrollBackFixed" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; contain: layout; -webkit-box-pack: justify; justify-content: space-between; height: 59px; width: 1519.2px; border-bottom: 1px solid rgba(0, 0, 0, 0.08); color: rgb(128, 128, 128); background: rgba(255, 255, 255, 0.97); z-index: 2; position: fixed; border-top-color: rgba(0, 0, 0, 0.08); border-right-color: rgba(0, 0, 0, 0.08); border-left-color: rgba(0, 0, 0, 0.08); transform: translateY(-100%); will-change: transform;"><div class="Navbar-functionality" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: absolute; right: 0px; top: 0px; height: 58px; align-self: stretch;"><a class="Navbar-write" style="box-sizing: inherit; color: inherit; display: flex; -webkit-box-align: center; align-items: center; padding: 0px 10px; white-space: nowrap; transition: color 0.2s;"><span class="icon icon-ic_nav_new" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; margin-right: 3px; font-family: icomoon !important;"></span>写文章</a><button class="Button Navbar-loginButon Button--blue" type="button" style="box-sizing: inherit; padding: 0px 16px; color: rgb(0, 128, 255); font-size: 14px; line-height: 30px; background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-width: 1px; border-style: solid; border-color: rgb(0, 128, 255); -webkit-appearance: none; border-radius: 4px; height: 32px; margin-right: 16px; margin-left: 6px; width: 72px;">登录</button></div></header></div><div style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"></div><div class="Layout-main av-card av-paddingBottom av-bodyFont Layout-titleImage--normal" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin: 22px auto 0px; padding: 0px; width: 660px; z-index: 1; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><div class="PostIndex-header av-paddingTop av-card" data-zop="{&quot;authorName&quot;:&quot;老A&quot;,&quot;itemId&quot;:&quot;29345083&quot;,&quot;title&quot;:&quot;Spring Cloud下微服务权限方案&quot;,&quot;type&quot;:&quot;article&quot;}" data-za-module="PostItem" data-za-module-info="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Post&quot;,&quot;token&quot;:&quot;29345083&quot;}}}" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><div class="TitleImage" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin-bottom: 22px;"><img alt="Spring Cloud下微服务权限方案" src="https://pic4.zhimg.com/v2-32e374b99a4332ca8bd52fca9d090617_r.png" class="TitleImage-imagePure TitleImage-imagePure--fixed" height="396px" style="box-sizing: inherit; overflow: hidden; width: 660px; display: block;"></div><h1 class="PostIndex-title av-paddingSide av-titleFont" style="box-sizing: inherit; margin-top: 0px; margin-bottom: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: 32px; line-height: 1.3;">Spring Cloud下微服务权限方案</h1><div class="PostIndex-author" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: relative; font-size: 14px; color: rgb(128, 128, 128); margin-top: 22px;"><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" style="box-sizing: inherit; color: inherit;"><img class="Avatar-hemingway PostIndex-authorAvatar Avatar--xs" alt="老A" src="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_xs.jpg" srcset="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_l.jpg 2x" style="box-sizing: inherit; overflow: hidden; width: 36px; height: 36px; border-radius: 50%; margin-right: 12px;"></a><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" class="PostIndex-authorName" style="box-sizing: inherit; color: rgb(128, 128, 128); min-width: 0px; text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">老A</a><span class="Bull" style="box-sizing: inherit; margin: 0px 6px;"></span><div class="HoverTitle" data-hover-title="2017 年 9月 14 日星期四晚上 7 点 12 分" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><time datetime="Thu Sep 14 2017 19:12:26 GMT+0800 (中国标准时间)" style="box-sizing: inherit;">1 个月前</time></div></div></div><div class="RichText PostIndex-content av-paddingSide av-card" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; word-break: break-word; margin: 30px 0px; line-height: 1.7;"><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">背景</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">从传统的单体应用转型Spring Cloud的朋友都在问我，Spring Cloud下的微服务权限怎么管？怎么设计比较合理？从大层面讲叫服务权限，往小处拆分，分别为三块：用户认证、用户权限、服务校验。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户认证</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用可能习惯了session的存在，而到了Spring cloud的微服务化后，session虽然可以采取分布式会话来解决，但终究不是上上策。开始有人推行Spring Cloud Security结合很好的OAuth2，后面为了优化OAuth 2中Access Token的存储问题，提高后端服务的可用性和扩展性，有了更好Token验证方式JWT（JSON Web Token）。这里要强调一点的是，OAuth2和JWT这两个根本没有可比性，是两个完全不同的东西。 OAuth2是一种授权框架，而JWT是一种认证协议</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2认证框架</h2><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2中包含四个角色：</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源拥有者(Resource Owner)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源服务器(Resource Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权服务器(Authorization Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端(Client)</li></ul><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2包含4种授权模式</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权码（认证码）模式 （Authorization code)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">简化（隐形）模式 (Impilict</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">用户名密码模式 (Resource Owner Password Credential)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端模式 (Client Credential)</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，OAuth2的运行流程如下图，摘自RFC 6749：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+--------+                               +---------------+
|        |--(A)- Authorization Request -&gt;|   Resource    |
|        |                               |     Owner     |
|        |&lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&gt;| Authorization |
| Client |                               |     Server    |
|        |&lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&gt;|    Resource   |
|        |                               |     Server    |
|        |&lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">我们在Spring Cloud OAuth2中，所有访问微服务资源的请求都在Http Header中携带Token，被访问的服务接下来再去请求授权服务器验证Token的有效性，目前这种方式，我们需要两次或者更多次的请求，所有的Token有效性校验都落在的授权服务器上，对于我们系统的水平扩展成为一个非常大的瓶颈。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">JWT认证协议</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">授权服务器将用户信息和授权范围序列化后放入一个JSON字符串，然后使用Base64进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个JSON Web Token。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">假设其他所有的资源服务器都将持有一个RSA公钥，当资源服务器接收到这个在Http Header中存有Token的请求，资源服务器就可以拿到这个Token，并验证它是否使用正确的私钥签名（是否经过授权服务器签名，也就是验签）。验签通过，反序列化后就拿到Toekn中包含的有效验证信息。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><img src="/files/5349b7f7-7a46-4994-bdd3-1ff65c69f2d3.jpg" style="width: 927px;"><br></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，主体运作流程图如下：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+-----------+                                     +-------------+
|           |       1-Request Authorization       |             |
|           |------------------------------------&gt;|             |
|           |     grant_type&amp;username&amp;password    |             |--+
|           |                                     |Authorization|  | 2-Gen
|           |                                     |Service      |  |   JWT
|           |       3-Response Authorization      |             |&lt;-+
|           |&lt;------------------------------------| Private Key |
|           |    access_token / refresh_token     |             |
|           |    token_type / expire_in           |             |
|  Client   |                                     +-------------+
|           |                                 
|           |                                     +-------------+
|           |       4-Request Resource            |             |
|           |-----------------------------------&gt; |             |
|           | Authorization: bearer Access Token  |             |--+
|           |                                     | Resource    |  | 5-Verify
|           |                                     | Service     |  |  Token
|           |       6-Response Resource           |             |&lt;-+
|           |&lt;----------------------------------- | Public Key  |
+-----------+                                     +-------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">通过上述的方式，我们可以很好地完成服务化后的用户认证。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户权限</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用的权限拦截，大家都喜欢shiro，而且用的颇为顺手。可是一旦拆分后，这权限开始分散在各个API了，shiro还好使吗？笔者在项目中，并没有用shiro。前后端分离后，交互都是token，后端的服务无状态化，前端按钮资源化，权限放哪儿管好使？</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">抽象与设计</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在介绍灵活的核心设计前，先给大家普及一个入门的概念：RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">RBAC其实是一种分析模型，主要分为：基本模型RBAC0（Core RBAC）、角色分层模型RBAC1（Hierarchal RBAC）、角色限制模型RBAC2（Constraint RBAC）和统一模型RBAC3（Combines RBAC）。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">更多详情大家可以了解：<a href="http://link.zhihu.com/?target=http%3A//blog.csdn.net/zwk626542417/article/details/46726491" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">RBAC权限模型<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">核心UML</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" data-rawwidth="1168" data-rawheight="532" class="origin_image zh-lightbox-thumb lazy" width="1168" data-original="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_r.png" data-actualsrc="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">这是笔者通过多种业务场景后抽象的RBAC关系图</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">类说明</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Group</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">群或组，拥有一定数量权限的集合，亦可以是权限的载体。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">子类：User（用户）、Role（角色）、Position（岗位）、Unit（部门），通过用户的特定构成，形成不同业务场景的群或组，而通过对群或组的父类授权，完成了用户的权限获取。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Permission</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限，拥有一定数量资源的集成，亦可以是资源的载体。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Resources</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限下有资源，资源的来源有：Menu（菜单）、Button（动作权限）、页面元素（按钮、tab等）、数据权限等</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Program</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">程序，相关权限控制的呈现载体，可以在多个菜单中挂载。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">常见web程序基本构成</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" data-rawwidth="873" data-rawheight="492" class="origin_image zh-lightbox-thumb lazy" width="873" data-original="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_r.png" data-actualsrc="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">模型与微服务的关系</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">如果把Spring Cloud服务化后的所有api接口都定义为上文的Resources，那么我们可以看到这么一个情况。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">比如一个用户的增删改查，我们的页面会这么做</p><img src="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" data-rawwidth="2880" data-rawheight="1460" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_r.png" data-actualsrc="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">页面元素资源编码资源URI资源请求方式查询user_btn_get/api/user/{id}GET增加user_btn_add/api/userPOST编辑user_btn_edit/api/user/{id}PUT删除user_btn_del/api/user/{id}DELETE</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在抽象成上述的映射关系后，我们的前后端的资源有了参照，我们对于用户组的权限授权就容易了。比如我授予一个用户增加、删除权限。在前端我们只需要检验该资源编码的有无就可以控制按钮的显示和隐藏，而在后端我们只需要统一拦截判断该用户是否具有URI和对应请求方式即可。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">至于权限的统一拦截是放置在Zuul这个网关上，还是落在具体的后端服务的拦截器上（Filter、Inteceptor），都可以轻而易举地实现。不在局限于代码的侵入性。放置Zuul流程图如下：</p><img src="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" data-rawwidth="1426" data-rawheight="710" class="origin_image zh-lightbox-thumb lazy" width="1426" data-original="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_r.png" data-actualsrc="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">要是权限的统一拦截放置在Zuul上，会有一个问题，那就是后端服务安不安全，服务只需要通过注册中心，即可对其他服务进行调用。这里就涉及到后面的第三个模块，服务之间的鉴权。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">服务之间的鉴权</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">因为我们都知道服务之间开源通过注册中心寻到客户端后，直接远程过程调用的。对于生产上的各个服务，一个个敏感性的接口，我们更是需要加以保护。主题的流程如下图：</p><img src="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" data-rawwidth="1700" data-rawheight="926" class="origin_image zh-lightbox-thumb lazy" width="1700" data-original="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_r.png" data-actualsrc="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">笔者的实现方式是基于Spring Cloud的FeignClient Inteceprot（自动申请服务token、传递当前上下文）和Mvc Inteceptor（服务token校验、更新当前上下文）来实现，从而对服务的安全性做进一步保护。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">结合Spring Cloud的特性后，整体流程图如下：</p><img src="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" data-rawwidth="2182" data-rawheight="1638" class="origin_image zh-lightbox-thumb lazy" width="2182" data-original="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_r.png" data-actualsrc="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">优化点</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">虽然通过上述的用户合法性检验、用户权限拦截以及服务之间的鉴权，保证了Api接口的安全性，但是其间的Http访问频率是比较高的，请求数量上来的时候，慢的问题是就会特别明显。可以考虑一定的优化策略，比如用户权限缓存、服务授权信息的派发与混存、定时刷新服务鉴权Token等。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">结语</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">上述是笔者在项目里的大体思路，有兴趣的朋友可以借鉴我的开源项目，欢迎star：</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-security%25EF%25BC%2588Jwt%25E3%2580%2581%25E7%2594%25A8%25E6%2588%25B7%25E6%259D%2583%25E9%2599%2590%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-security（Jwt、用户权限）<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">github：<a href="http://link.zhihu.com/?target=https%3A//github.com/wxiaoqi/ace-security" class=" external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;"><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">https://</span><span class="visible" style="box-sizing: inherit;">github.com/wxiaoqi/ace-</span><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">security</span><span class="ellipsis" style="box-sizing: inherit;"></span><span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-gate%25EF%25BC%2588%25E6%259C%258D%25E5%258A%25A1%25E9%2589%25B4%25E6%259D%2583%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-gate（服务鉴权）</a></li></ul></div></div>', type='null', tags='null', categories='', hits=null, commentsNum=null, allowComment=1, allowPing=null, allowFeed=1, status=1, author='bootdo', gtmCreate=null, gtmModified=null}]
2018-07-24 22:20:35 -==>  Preparing: update blog_content SET `title` = ?, `content` = ?, `type` = ?, `categories` = ?, `allow_comment` = ?, `allow_feed` = ?, `status` = ?, `author` = ?, `gtm_create` = ?, `gtm_modified` = ? where cid = ? 
2018-07-24 22:20:35 -==> Parameters: test(String), <p><br></p><div class="Layout-navbarHolder" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; height: 59px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><header class="Navbar ScrollBackFixed" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; contain: layout; -webkit-box-pack: justify; justify-content: space-between; height: 59px; width: 1519.2px; border-bottom: 1px solid rgba(0, 0, 0, 0.08); color: rgb(128, 128, 128); background: rgba(255, 255, 255, 0.97); z-index: 2; position: fixed; border-top-color: rgba(0, 0, 0, 0.08); border-right-color: rgba(0, 0, 0, 0.08); border-left-color: rgba(0, 0, 0, 0.08); transform: translateY(-100%); will-change: transform;"><div class="Navbar-functionality" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: absolute; right: 0px; top: 0px; height: 58px; align-self: stretch;"><a class="Navbar-write" style="box-sizing: inherit; color: inherit; display: flex; -webkit-box-align: center; align-items: center; padding: 0px 10px; white-space: nowrap; transition: color 0.2s;"><span class="icon icon-ic_nav_new" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; margin-right: 3px; font-family: icomoon !important;"></span>写文章</a><button class="Button Navbar-loginButon Button--blue" type="button" style="box-sizing: inherit; padding: 0px 16px; color: rgb(0, 128, 255); font-size: 14px; line-height: 30px; background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-width: 1px; border-style: solid; border-color: rgb(0, 128, 255); -webkit-appearance: none; border-radius: 4px; height: 32px; margin-right: 16px; margin-left: 6px; width: 72px;">登录</button></div></header></div><div style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"></div><div class="Layout-main av-card av-paddingBottom av-bodyFont Layout-titleImage--normal" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin: 22px auto 0px; padding: 0px; width: 660px; z-index: 1; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium;"><div class="PostIndex-header av-paddingTop av-card" data-zop="{&quot;authorName&quot;:&quot;老A&quot;,&quot;itemId&quot;:&quot;29345083&quot;,&quot;title&quot;:&quot;Spring Cloud下微服务权限方案&quot;,&quot;type&quot;:&quot;article&quot;}" data-za-module="PostItem" data-za-module-info="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Post&quot;,&quot;token&quot;:&quot;29345083&quot;}}}" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><div class="TitleImage" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; margin-bottom: 22px;"><img alt="Spring Cloud下微服务权限方案" src="https://pic4.zhimg.com/v2-32e374b99a4332ca8bd52fca9d090617_r.png" class="TitleImage-imagePure TitleImage-imagePure--fixed" height="396px" style="box-sizing: inherit; overflow: hidden; width: 660px; display: block;"></div><h1 class="PostIndex-title av-paddingSide av-titleFont" style="box-sizing: inherit; margin-top: 0px; margin-bottom: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: 32px; line-height: 1.3;">Spring Cloud下微服务权限方案</h1><div class="PostIndex-author" style="box-sizing: inherit; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; flex-direction: row; -webkit-box-align: center; align-items: center; flex-shrink: 0; position: relative; font-size: 14px; color: rgb(128, 128, 128); margin-top: 22px;"><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" style="box-sizing: inherit; color: inherit;"><img class="Avatar-hemingway PostIndex-authorAvatar Avatar--xs" alt="老A" src="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_xs.jpg" srcset="https://pic1.zhimg.com/v2-3b6c82a0652b73ee56207a2f45955ca8_l.jpg 2x" style="box-sizing: inherit; overflow: hidden; width: 36px; height: 36px; border-radius: 50%; margin-right: 12px;"></a><a href="https://www.zhihu.com/people/lao-a-68-38" target="_blank" class="PostIndex-authorName" style="box-sizing: inherit; color: rgb(128, 128, 128); min-width: 0px; text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">老A</a><span class="Bull" style="box-sizing: inherit; margin: 0px 6px;"></span><div class="HoverTitle" data-hover-title="2017 年 9月 14 日星期四晚上 7 点 12 分" style="box-sizing: inherit; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; position: relative;"><time datetime="Thu Sep 14 2017 19:12:26 GMT+0800 (中国标准时间)" style="box-sizing: inherit;">1 个月前</time></div></div></div><div class="RichText PostIndex-content av-paddingSide av-card" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0; word-break: break-word; margin: 30px 0px; line-height: 1.7;"><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">背景</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">从传统的单体应用转型Spring Cloud的朋友都在问我，Spring Cloud下的微服务权限怎么管？怎么设计比较合理？从大层面讲叫服务权限，往小处拆分，分别为三块：用户认证、用户权限、服务校验。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户认证</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用可能习惯了session的存在，而到了Spring cloud的微服务化后，session虽然可以采取分布式会话来解决，但终究不是上上策。开始有人推行Spring Cloud Security结合很好的OAuth2，后面为了优化OAuth 2中Access Token的存储问题，提高后端服务的可用性和扩展性，有了更好Token验证方式JWT（JSON Web Token）。这里要强调一点的是，OAuth2和JWT这两个根本没有可比性，是两个完全不同的东西。 OAuth2是一种授权框架，而JWT是一种认证协议</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2认证框架</h2><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2中包含四个角色：</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源拥有者(Resource Owner)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">资源服务器(Resource Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权服务器(Authorization Server)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端(Client)</li></ul><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">OAuth2包含4种授权模式</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">授权码（认证码）模式 （Authorization code)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">简化（隐形）模式 (Impilict</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">用户名密码模式 (Resource Owner Password Credential)</li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">客户端模式 (Client Credential)</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，OAuth2的运行流程如下图，摘自RFC 6749：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+--------+                               +---------------+
|        |--(A)- Authorization Request -&gt;|   Resource    |
|        |                               |     Owner     |
|        |&lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&gt;| Authorization |
| Client |                               |     Server    |
|        |&lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&gt;|    Resource   |
|        |                               |     Server    |
|        |&lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">我们在Spring Cloud OAuth2中，所有访问微服务资源的请求都在Http Header中携带Token，被访问的服务接下来再去请求授权服务器验证Token的有效性，目前这种方式，我们需要两次或者更多次的请求，所有的Token有效性校验都落在的授权服务器上，对于我们系统的水平扩展成为一个非常大的瓶颈。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">JWT认证协议</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">授权服务器将用户信息和授权范围序列化后放入一个JSON字符串，然后使用Base64进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个JSON Web Token。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">假设其他所有的资源服务器都将持有一个RSA公钥，当资源服务器接收到这个在Http Header中存有Token的请求，资源服务器就可以拿到这个Token，并验证它是否使用正确的私钥签名（是否经过授权服务器签名，也就是验签）。验签通过，反序列化后就拿到Toekn中包含的有效验证信息。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><img src="/files/5349b7f7-7a46-4994-bdd3-1ff65c69f2d3.jpg" style="width: 927px;"><br></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">其中，主体运作流程图如下：</p><div class="highlight" style="box-sizing: inherit; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-direction: column; -webkit-box-align: stretch; align-items: stretch; flex-shrink: 0;"><pre style="box-sizing: inherit; margin-top: 1em; margin-bottom: 1em; padding: 10px; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace; font-size: 14px; word-wrap: normal; background: rgb(235, 238, 245);"><code class="language-text" style="box-sizing: inherit; font-family: Menlo, Monaco, Consolas, &quot;Andale Mono&quot;, &quot;lucida console&quot;, &quot;Courier New&quot;, monospace;"><span style="box-sizing: inherit;"></span>+-----------+                                     +-------------+
|           |       1-Request Authorization       |             |
|           |------------------------------------&gt;|             |
|           |     grant_type&amp;username&amp;password    |             |--+
|           |                                     |Authorization|  | 2-Gen
|           |                                     |Service      |  |   JWT
|           |       3-Response Authorization      |             |&lt;-+
|           |&lt;------------------------------------| Private Key |
|           |    access_token / refresh_token     |             |
|           |    token_type / expire_in           |             |
|  Client   |                                     +-------------+
|           |                                 
|           |                                     +-------------+
|           |       4-Request Resource            |             |
|           |-----------------------------------&gt; |             |
|           | Authorization: bearer Access Token  |             |--+
|           |                                     | Resource    |  | 5-Verify
|           |                                     | Service     |  |  Token
|           |       6-Response Resource           |             |&lt;-+
|           |&lt;----------------------------------- | Public Key  |
+-----------+                                     +-------------+
</code></pre></div><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">通过上述的方式，我们可以很好地完成服务化后的用户认证。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">用户权限</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">传统的单体应用的权限拦截，大家都喜欢shiro，而且用的颇为顺手。可是一旦拆分后，这权限开始分散在各个API了，shiro还好使吗？笔者在项目中，并没有用shiro。前后端分离后，交互都是token，后端的服务无状态化，前端按钮资源化，权限放哪儿管好使？</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">抽象与设计</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在介绍灵活的核心设计前，先给大家普及一个入门的概念：RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">RBAC其实是一种分析模型，主要分为：基本模型RBAC0（Core RBAC）、角色分层模型RBAC1（Hierarchal RBAC）、角色限制模型RBAC2（Constraint RBAC）和统一模型RBAC3（Combines RBAC）。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">更多详情大家可以了解：<a href="http://link.zhihu.com/?target=http%3A//blog.csdn.net/zwk626542417/article/details/46726491" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">RBAC权限模型<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">核心UML</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" data-rawwidth="1168" data-rawheight="532" class="origin_image zh-lightbox-thumb lazy" width="1168" data-original="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_r.png" data-actualsrc="https://pic2.zhimg.com/v2-3e3eed438a7df522714407c5436c9bc9_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">这是笔者通过多种业务场景后抽象的RBAC关系图</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">类说明</h2><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Group</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">群或组，拥有一定数量权限的集合，亦可以是权限的载体。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">子类：User（用户）、Role（角色）、Position（岗位）、Unit（部门），通过用户的特定构成，形成不同业务场景的群或组，而通过对群或组的父类授权，完成了用户的权限获取。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Permission</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限，拥有一定数量资源的集成，亦可以是资源的载体。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Resources</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">权限下有资源，资源的来源有：Menu（菜单）、Button（动作权限）、页面元素（按钮、tab等）、数据权限等</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">Program</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">程序，相关权限控制的呈现载体，可以在多个菜单中挂载。</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">常见web程序基本构成</li></ul><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><img src="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" data-rawwidth="873" data-rawheight="492" class="origin_image zh-lightbox-thumb lazy" width="873" data-original="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_r.png" data-actualsrc="https://pic1.zhimg.com/v2-9f156709621fdd7685db9781829e2948_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">模型与微服务的关系</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">如果把Spring Cloud服务化后的所有api接口都定义为上文的Resources，那么我们可以看到这么一个情况。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">比如一个用户的增删改查，我们的页面会这么做</p><img src="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" data-rawwidth="2880" data-rawheight="1460" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_r.png" data-actualsrc="https://pic1.zhimg.com/v2-ac1fa4fc0005af11c0a7aa59fe62cbbc_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">页面元素资源编码资源URI资源请求方式查询user_btn_get/api/user/{id}GET增加user_btn_add/api/userPOST编辑user_btn_edit/api/user/{id}PUT删除user_btn_del/api/user/{id}DELETE</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">在抽象成上述的映射关系后，我们的前后端的资源有了参照，我们对于用户组的权限授权就容易了。比如我授予一个用户增加、删除权限。在前端我们只需要检验该资源编码的有无就可以控制按钮的显示和隐藏，而在后端我们只需要统一拦截判断该用户是否具有URI和对应请求方式即可。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">至于权限的统一拦截是放置在Zuul这个网关上，还是落在具体的后端服务的拦截器上（Filter、Inteceptor），都可以轻而易举地实现。不在局限于代码的侵入性。放置Zuul流程图如下：</p><img src="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" data-rawwidth="1426" data-rawheight="710" class="origin_image zh-lightbox-thumb lazy" width="1426" data-original="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_r.png" data-actualsrc="https://pic3.zhimg.com/v2-efbe4a2af48e48c86867a49f04759b7a_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">要是权限的统一拦截放置在Zuul上，会有一个问题，那就是后端服务安不安全，服务只需要通过注册中心，即可对其他服务进行调用。这里就涉及到后面的第三个模块，服务之间的鉴权。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">服务之间的鉴权</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">因为我们都知道服务之间开源通过注册中心寻到客户端后，直接远程过程调用的。对于生产上的各个服务，一个个敏感性的接口，我们更是需要加以保护。主题的流程如下图：</p><img src="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" data-rawwidth="1700" data-rawheight="926" class="origin_image zh-lightbox-thumb lazy" width="1700" data-original="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_r.png" data-actualsrc="https://pic4.zhimg.com/v2-2c574cb730d4e02834e238d0f7fc40eb_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">笔者的实现方式是基于Spring Cloud的FeignClient Inteceprot（自动申请服务token、传递当前上下文）和Mvc Inteceptor（服务token校验、更新当前上下文）来实现，从而对服务的安全性做进一步保护。</p><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">结合Spring Cloud的特性后，整体流程图如下：</p><img src="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" data-rawwidth="2182" data-rawheight="1638" class="origin_image zh-lightbox-thumb lazy" width="2182" data-original="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_r.png" data-actualsrc="https://pic1.zhimg.com/v2-467d442498d0ed41372a7567fc36a714_b.png" style="box-sizing: inherit; overflow: hidden; display: block; max-width: 100%; margin: 24px auto; cursor: -webkit-zoom-in;"><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;"><br style="box-sizing: inherit;"></p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">优化点</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">虽然通过上述的用户合法性检验、用户权限拦截以及服务之间的鉴权，保证了Api接口的安全性，但是其间的Http访问频率是比较高的，请求数量上来的时候，慢的问题是就会特别明显。可以考虑一定的优化策略，比如用户权限缓存、服务授权信息的派发与混存、定时刷新服务鉴权Token等。</p><h2 style="box-sizing: inherit; margin: 20px 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; line-height: inherit;">结语</h2><p style="box-sizing: inherit; margin-top: 20px; margin-bottom: 20px;">上述是笔者在项目里的大体思路，有兴趣的朋友可以借鉴我的开源项目，欢迎star：</p><ul style="box-sizing: inherit; margin: 20px 0px; padding: 0px 0px 0px 40px;"><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-security%25EF%25BC%2588Jwt%25E3%2580%2581%25E7%2594%25A8%25E6%2588%25B7%25E6%259D%2583%25E9%2599%2590%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-security（Jwt、用户权限）<span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">github：<a href="http://link.zhihu.com/?target=https%3A//github.com/wxiaoqi/ace-security" class=" external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;"><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">https://</span><span class="visible" style="box-sizing: inherit;">github.com/wxiaoqi/ace-</span><span class="invisible" style="box-sizing: inherit; font-stretch: normal; font-size: 0px; line-height: 0; font-family: a; color: transparent; text-shadow: none; background-color: transparent;">security</span><span class="ellipsis" style="box-sizing: inherit;"></span><span class="icon-external" style="box-sizing: inherit; font-size: 24px; speak: none; font-feature-settings: normal; line-height: 1; -webkit-font-smoothing: antialiased; font-family: icomoon !important;"></span></a></li><li style="box-sizing: inherit; list-style-type: initial; margin-top: 10px; list-style-position: outside;">gitchina：<a href="http://link.zhihu.com/?target=http%3A//git.oschina.net/geek_qi/ace-gate%25EF%25BC%2588%25E6%259C%258D%25E5%258A%25A1%25E9%2589%25B4%25E6%259D%2583%25EF%25BC%2589" class=" wrap external" target="_blank" rel="nofollow noreferrer" style="box-sizing: inherit; color: rgb(34, 85, 153); border-bottom: 1px solid rgba(64, 64, 64, 0.72); word-break: break-all;">http://git.oschina.net/geek_qi/ace-gate（服务鉴权）</a></li></ul></div></div>(String), article(String), (String), 1(Integer), 1(Integer), 1(Integer), bootdo(String), 2018-07-24 22:20:35.217(Timestamp), 2018-07-24 22:20:35.217(Timestamp), 121(Long)
2018-07-24 22:20:35 -<==    Updates: 1
2018-07-24 22:20:35 -耗时 : 24
2018-07-24 22:20:35 -返回值 : {msg=操作成功, code=0, cid=121}
2018-07-24 22:20:35 -请求地址 : http://localhost/blog/bContent/list
2018-07-24 22:20:35 -HTTP METHOD : GET
2018-07-24 22:20:35 -CLASS_METHOD : com.bootdo.blog.controller.ContentController.list
2018-07-24 22:20:35 -参数 : [{limit=10, offset=0}]
2018-07-24 22:20:35 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content order by cid desc limit 0, 10 
2018-07-24 22:20:35 -==> Parameters: 
2018-07-24 22:20:35 -<==      Total: 10
2018-07-24 22:20:35 -==>  Preparing: select count(*) from blog_content 
2018-07-24 22:20:35 -==> Parameters: 
2018-07-24 22:20:35 -<==      Total: 1
2018-07-24 22:20:35 -耗时 : 20
2018-07-24 22:20:35 -返回值 : com.bootdo.common.utils.PageUtils@2eb8e666
2018-07-24 22:20:44 -请求地址 : http://localhost/blog/open/post/121
2018-07-24 22:20:44 -HTTP METHOD : GET
2018-07-24 22:20:44 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.post
2018-07-24 22:20:44 -参数 : [121, {}]
2018-07-24 22:20:44 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:20:44 -==> Parameters: 121(Long)
2018-07-24 22:20:44 -<==      Total: 1
2018-07-24 22:20:44 -耗时 : 6
2018-07-24 22:20:44 -返回值 : blog/index/post
2018-07-24 22:21:18 -请求地址 : http://localhost/
2018-07-24 22:21:18 -HTTP METHOD : GET
2018-07-24 22:21:18 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 22:21:18 -参数 : [{}]
2018-07-24 22:21:18 -耗时 : 0
2018-07-24 22:21:18 -返回值 : redirect:/blog
2018-07-24 22:21:18 -请求地址 : http://localhost/blog
2018-07-24 22:21:18 -HTTP METHOD : GET
2018-07-24 22:21:18 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 22:21:18 -参数 : []
2018-07-24 22:21:18 -耗时 : 1
2018-07-24 22:21:18 -返回值 : blog/index/main
2018-07-24 22:21:19 -请求地址 : http://localhost/blog/open/list
2018-07-24 22:21:19 -HTTP METHOD : GET
2018-07-24 22:21:19 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 22:21:19 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 22:21:19 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 22:21:19 -==> Parameters: article(String)
2018-07-24 22:21:19 -<==      Total: 10
2018-07-24 22:21:19 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 22:21:19 -==> Parameters: article(String)
2018-07-24 22:21:19 -<==      Total: 1
2018-07-24 22:21:19 -耗时 : 104
2018-07-24 22:21:19 -返回值 : com.bootdo.common.utils.PageUtils@30f30615
2018-07-24 22:21:21 -请求地址 : http://localhost/blog/open/page/about
2018-07-24 22:21:21 -HTTP METHOD : GET
2018-07-24 22:21:21 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.about
2018-07-24 22:21:21 -参数 : [about, {}]
2018-07-24 22:21:21 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:21:21 -==> Parameters: about(String)
2018-07-24 22:21:21 -<==      Total: 1
2018-07-24 22:21:21 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:21:21 -==> Parameters: about(String)
2018-07-24 22:21:21 -<==      Total: 1
2018-07-24 22:21:21 -耗时 : 8
2018-07-24 22:21:21 -返回值 : blog/index/post
2018-07-24 22:21:30 -请求地址 : http://localhost/
2018-07-24 22:21:30 -HTTP METHOD : GET
2018-07-24 22:21:30 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 22:21:30 -参数 : [{}]
2018-07-24 22:21:30 -耗时 : 1
2018-07-24 22:21:30 -返回值 : redirect:/blog
2018-07-24 22:21:30 -请求地址 : http://localhost/blog
2018-07-24 22:21:30 -HTTP METHOD : GET
2018-07-24 22:21:30 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 22:21:30 -参数 : []
2018-07-24 22:21:30 -耗时 : 1
2018-07-24 22:21:30 -返回值 : blog/index/main
2018-07-24 22:21:30 -请求地址 : http://localhost/blog/open/list
2018-07-24 22:21:30 -HTTP METHOD : GET
2018-07-24 22:21:30 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 22:21:30 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 22:21:30 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 22:21:30 -==> Parameters: article(String)
2018-07-24 22:21:30 -<==      Total: 10
2018-07-24 22:21:30 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 22:21:30 -==> Parameters: article(String)
2018-07-24 22:21:30 -<==      Total: 1
2018-07-24 22:21:30 -耗时 : 13
2018-07-24 22:21:30 -返回值 : com.bootdo.common.utils.PageUtils@6e2e39bb
2018-07-24 22:21:33 -请求地址 : http://localhost/blog/open/post/121
2018-07-24 22:21:33 -HTTP METHOD : GET
2018-07-24 22:21:33 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.post
2018-07-24 22:21:33 -参数 : [121, {}]
2018-07-24 22:21:33 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:21:33 -==> Parameters: 121(Long)
2018-07-24 22:21:33 -<==      Total: 1
2018-07-24 22:21:33 -耗时 : 5
2018-07-24 22:21:33 -返回值 : blog/index/post
2018-07-24 22:21:48 -请求地址 : http://localhost/blog/open/page/communication
2018-07-24 22:21:48 -HTTP METHOD : GET
2018-07-24 22:21:48 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.about
2018-07-24 22:21:48 -参数 : [communication, {}]
2018-07-24 22:21:48 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:21:48 -==> Parameters: communication(String)
2018-07-24 22:21:48 -<==      Total: 1
2018-07-24 22:21:48 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:21:48 -==> Parameters: communication(String)
2018-07-24 22:21:48 -<==      Total: 1
2018-07-24 22:21:48 -耗时 : 6
2018-07-24 22:21:48 -返回值 : blog/index/post
2018-07-24 22:22:12 -请求地址 : http://localhost/blog/open/page/about
2018-07-24 22:22:12 -HTTP METHOD : GET
2018-07-24 22:22:12 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.about
2018-07-24 22:22:12 -参数 : [about, {}]
2018-07-24 22:22:12 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:22:12 -==> Parameters: about(String)
2018-07-24 22:22:12 -<==      Total: 1
2018-07-24 22:22:12 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:22:12 -==> Parameters: about(String)
2018-07-24 22:22:12 -<==      Total: 1
2018-07-24 22:22:12 -耗时 : 9
2018-07-24 22:22:12 -返回值 : blog/index/post
2018-07-24 22:22:13 -请求地址 : http://localhost/
2018-07-24 22:22:13 -HTTP METHOD : GET
2018-07-24 22:22:13 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 22:22:13 -参数 : [{}]
2018-07-24 22:22:13 -耗时 : 1
2018-07-24 22:22:13 -返回值 : redirect:/blog
2018-07-24 22:22:13 -请求地址 : http://localhost/blog
2018-07-24 22:22:13 -HTTP METHOD : GET
2018-07-24 22:22:13 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 22:22:13 -参数 : []
2018-07-24 22:22:13 -耗时 : 0
2018-07-24 22:22:13 -返回值 : blog/index/main
2018-07-24 22:22:13 -请求地址 : http://localhost/blog/open/list
2018-07-24 22:22:13 -HTTP METHOD : GET
2018-07-24 22:22:13 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 22:22:13 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 22:22:13 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 22:22:13 -==> Parameters: article(String)
2018-07-24 22:22:13 -<==      Total: 10
2018-07-24 22:22:13 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 22:22:13 -==> Parameters: article(String)
2018-07-24 22:22:13 -<==      Total: 1
2018-07-24 22:22:13 -耗时 : 23
2018-07-24 22:22:13 -返回值 : com.bootdo.common.utils.PageUtils@7eedf162
2018-07-24 22:22:31 -请求地址 : http://localhost/blog/open/page/communication
2018-07-24 22:22:31 -HTTP METHOD : GET
2018-07-24 22:22:31 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.about
2018-07-24 22:22:31 -参数 : [communication, {}]
2018-07-24 22:22:31 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:22:31 -==> Parameters: communication(String)
2018-07-24 22:22:31 -<==      Total: 1
2018-07-24 22:22:31 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:22:31 -==> Parameters: communication(String)
2018-07-24 22:22:31 -<==      Total: 1
2018-07-24 22:22:31 -耗时 : 8
2018-07-24 22:22:31 -返回值 : blog/index/post
2018-07-24 22:22:34 -请求地址 : http://localhost/blog/open/page/about
2018-07-24 22:22:34 -HTTP METHOD : GET
2018-07-24 22:22:34 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.about
2018-07-24 22:22:34 -参数 : [about, {}]
2018-07-24 22:22:34 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:22:34 -==> Parameters: about(String)
2018-07-24 22:22:34 -<==      Total: 1
2018-07-24 22:22:34 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE categories = ? order by cid desc 
2018-07-24 22:22:34 -==> Parameters: about(String)
2018-07-24 22:22:34 -<==      Total: 1
2018-07-24 22:22:34 -耗时 : 10
2018-07-24 22:22:34 -返回值 : blog/index/post
2018-07-24 22:22:39 -请求地址 : http://localhost/
2018-07-24 22:22:39 -HTTP METHOD : GET
2018-07-24 22:22:39 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 22:22:39 -参数 : [{}]
2018-07-24 22:22:39 -耗时 : 0
2018-07-24 22:22:39 -返回值 : redirect:/blog
2018-07-24 22:22:39 -请求地址 : http://localhost/blog
2018-07-24 22:22:39 -HTTP METHOD : GET
2018-07-24 22:22:39 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 22:22:39 -参数 : []
2018-07-24 22:22:39 -耗时 : 1
2018-07-24 22:22:39 -返回值 : blog/index/main
2018-07-24 22:22:39 -请求地址 : http://localhost/blog/open/list
2018-07-24 22:22:39 -HTTP METHOD : GET
2018-07-24 22:22:39 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 22:22:39 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 22:22:39 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 22:22:39 -==> Parameters: article(String)
2018-07-24 22:22:39 -<==      Total: 10
2018-07-24 22:22:39 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 22:22:39 -==> Parameters: article(String)
2018-07-24 22:22:39 -<==      Total: 1
2018-07-24 22:22:39 -耗时 : 12
2018-07-24 22:22:39 -返回值 : com.bootdo.common.utils.PageUtils@15caa30b
2018-07-24 22:22:43 -请求地址 : http://localhost/blog/open/post/108
2018-07-24 22:22:43 -HTTP METHOD : GET
2018-07-24 22:22:43 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.post
2018-07-24 22:22:43 -参数 : [108, {}]
2018-07-24 22:22:43 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:22:43 -==> Parameters: 108(Long)
2018-07-24 22:22:43 -<==      Total: 1
2018-07-24 22:22:43 -耗时 : 7
2018-07-24 22:22:43 -返回值 : blog/index/post
2018-07-24 22:23:02 -请求地址 : http://localhost/blog/open/post/118
2018-07-24 22:23:02 -HTTP METHOD : GET
2018-07-24 22:23:02 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.post
2018-07-24 22:23:02 -参数 : [118, {}]
2018-07-24 22:23:02 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:23:02 -==> Parameters: 118(Long)
2018-07-24 22:23:02 -<==      Total: 1
2018-07-24 22:23:02 -耗时 : 5
2018-07-24 22:23:02 -返回值 : blog/index/post
2018-07-24 22:23:11 -请求地址 : http://localhost/blog/open/post/110
2018-07-24 22:23:11 -HTTP METHOD : GET
2018-07-24 22:23:11 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.post
2018-07-24 22:23:11 -参数 : [110, {}]
2018-07-24 22:23:11 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:23:11 -==> Parameters: 110(Long)
2018-07-24 22:23:11 -<==      Total: 1
2018-07-24 22:23:11 -耗时 : 5
2018-07-24 22:23:11 -返回值 : blog/index/post
2018-07-24 22:23:21 -请求地址 : http://localhost/blog/open/post/75
2018-07-24 22:23:21 -HTTP METHOD : GET
2018-07-24 22:23:21 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.post
2018-07-24 22:23:21 -参数 : [75, {}]
2018-07-24 22:23:21 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content where cid = ? 
2018-07-24 22:23:21 -==> Parameters: 75(Long)
2018-07-24 22:23:21 -<==      Total: 1
2018-07-24 22:23:21 -耗时 : 3
2018-07-24 22:23:21 -返回值 : blog/index/post
2018-07-24 22:23:47 -请求地址 : http://localhost/sys/online
2018-07-24 22:23:47 -HTTP METHOD : GET
2018-07-24 22:23:47 -CLASS_METHOD : com.bootdo.system.controller.SessionController.online
2018-07-24 22:23:47 -参数 : []
2018-07-24 22:23:47 -耗时 : 6
2018-07-24 22:23:47 -返回值 : system/online/online
2018-07-24 22:23:48 -请求地址 : http://localhost/sys/online/list
2018-07-24 22:23:48 -HTTP METHOD : GET
2018-07-24 22:23:48 -CLASS_METHOD : com.bootdo.system.controller.SessionController.list
2018-07-24 22:23:48 -参数 : []
2018-07-24 22:23:48 -耗时 : 1
2018-07-24 22:23:48 -返回值 : [com.bootdo.system.domain.UserOnline@59b94e88]
2018-07-24 22:23:48 -请求地址 : http://localhost/common/log
2018-07-24 22:23:48 -HTTP METHOD : GET
2018-07-24 22:23:48 -CLASS_METHOD : com.bootdo.common.controller.LogController.log
2018-07-24 22:23:48 -参数 : []
2018-07-24 22:23:48 -耗时 : 1
2018-07-24 22:23:48 -返回值 : common/log/log
2018-07-24 22:23:49 -请求地址 : http://localhost/common/log/list
2018-07-24 22:23:49 -HTTP METHOD : GET
2018-07-24 22:23:49 -CLASS_METHOD : com.bootdo.common.controller.LogController.list
2018-07-24 22:23:49 -参数 : [{limit=10, offset=0, sort=gmt_create, order=desc, operation=, username=}]
2018-07-24 22:23:49 -==>  Preparing: select count(*) from sys_log 
2018-07-24 22:23:49 -==> Parameters: 
2018-07-24 22:23:49 -<==      Total: 1
2018-07-24 22:23:49 -==>  Preparing: select `id`,`user_id`,`username`,`operation`,`time`,`method`,`params`,`ip`,`gmt_create` from sys_log order by gmt_create desc limit ?, ? 
2018-07-24 22:23:49 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:23:49 -<==      Total: 10
2018-07-24 22:23:49 -耗时 : 11
2018-07-24 22:23:49 -返回值 : PageDO{offset=0, limit=10, total=46, params={}, param='', rows=[LogDO{id=419, userId=1, username='admin', operation='编辑用户', time=18, method='com.bootdo.system.controller.UserController.edit()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:06:21 CST 2018}, LogDO{id=418, userId=1, username='admin', operation='更新用户', time=27, method='com.bootdo.system.controller.UserController.update()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:06:17 CST 2018}, LogDO{id=417, userId=1, username='admin', operation='编辑用户', time=17, method='com.bootdo.system.controller.UserController.edit()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:06:07 CST 2018}, LogDO{id=416, userId=1, username='admin', operation='保存角色', time=12, method='com.bootdo.system.controller.RoleController.save()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:05:59 CST 2018}, LogDO{id=415, userId=1, username='admin', operation='添加角色', time=1, method='com.bootdo.system.controller.RoleController.add()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:05:53 CST 2018}, LogDO{id=414, userId=1, username='admin', operation='保存角色', time=13, method='com.bootdo.system.controller.RoleController.save()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:05:51 CST 2018}, LogDO{id=413, userId=1, username='admin', operation='添加角色', time=1, method='com.bootdo.system.controller.RoleController.add()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:05:41 CST 2018}, LogDO{id=412, userId=1, username='admin', operation='编辑角色', time=5, method='com.bootdo.system.controller.RoleController.edit()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:05:30 CST 2018}, LogDO{id=411, userId=1, username='admin', operation='编辑角色', time=3, method='com.bootdo.system.controller.RoleController.edit()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:04:39 CST 2018}, LogDO{id=410, userId=1, username='admin', operation='编辑角色', time=5, method='com.bootdo.system.controller.RoleController.edit()', params='null', ip='127.0.0.1', gmtCreate=Tue Jul 24 22:04:20 CST 2018}]}
2018-07-24 22:24:20 -请求地址 : http://localhost/oa/notify
2018-07-24 22:24:20 -HTTP METHOD : GET
2018-07-24 22:24:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.oaNotify
2018-07-24 22:24:20 -参数 : []
2018-07-24 22:24:20 -耗时 : 1
2018-07-24 22:24:20 -返回值 : oa/notify/notify
2018-07-24 22:24:20 -请求地址 : http://localhost/oa/notify/list
2018-07-24 22:24:20 -HTTP METHOD : GET
2018-07-24 22:24:20 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.list
2018-07-24 22:24:20 -参数 : [{limit=10, offset=0}]
2018-07-24 22:24:20 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify order by id desc limit ?, ? 
2018-07-24 22:24:20 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:24:20 -<==      Total: 6
2018-07-24 22:24:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:24:20 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:24:20 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:24:20 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:24:20 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:24:20 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:24:20 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -==>  Preparing: select count(*) from oa_notify 
2018-07-24 22:24:20 -==> Parameters: 
2018-07-24 22:24:20 -<==      Total: 1
2018-07-24 22:24:20 -耗时 : 27
2018-07-24 22:24:20 -返回值 : com.bootdo.common.utils.PageUtils@2a9691e8
2018-07-24 22:24:21 -请求地址 : http://localhost/oa/notify/selfNotify
2018-07-24 22:24:21 -HTTP METHOD : GET
2018-07-24 22:24:21 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.selefNotify
2018-07-24 22:24:21 -参数 : []
2018-07-24 22:24:21 -耗时 : 1
2018-07-24 22:24:21 -返回值 : oa/notify/selfNotify
2018-07-24 22:24:21 -请求地址 : http://localhost/oa/notify/selfList
2018-07-24 22:24:21 -HTTP METHOD : GET
2018-07-24 22:24:21 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.selfList
2018-07-24 22:24:21 -参数 : [{limit=10, offset=0}]
2018-07-24 22:24:21 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long), 0(Integer), 10(Integer)
2018-07-24 22:24:21 -<==      Total: 5
2018-07-24 22:24:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long)
2018-07-24 22:24:21 -<==      Total: 1
2018-07-24 22:24:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long)
2018-07-24 22:24:21 -<==      Total: 1
2018-07-24 22:24:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long)
2018-07-24 22:24:21 -<==      Total: 1
2018-07-24 22:24:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long)
2018-07-24 22:24:21 -<==      Total: 1
2018-07-24 22:24:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long)
2018-07-24 22:24:21 -<==      Total: 1
2018-07-24 22:24:21 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:24:21 -==> Parameters: 1(Long), null
2018-07-24 22:24:21 -<==      Total: 1
2018-07-24 22:24:21 -耗时 : 21
2018-07-24 22:24:21 -返回值 : com.bootdo.common.utils.PageUtils@57a97860
2018-07-24 22:25:27 -请求地址 : http://localhost/oa/notify/edit/49
2018-07-24 22:25:27 -HTTP METHOD : GET
2018-07-24 22:25:27 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.edit
2018-07-24 22:25:27 -参数 : [49, {}]
2018-07-24 22:25:27 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:25:27 -==> Parameters: 49(Long)
2018-07-24 22:25:27 -<==      Total: 1
2018-07-24 22:25:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:27 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:27 -<==      Total: 1
2018-07-24 22:25:27 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 22:25:27 -==> Parameters: oa_notify_type(String)
2018-07-24 22:25:27 -<==      Total: 3
2018-07-24 22:25:27 -耗时 : 13
2018-07-24 22:25:27 -返回值 : oa/notify/edit
2018-07-24 22:25:30 -请求地址 : http://localhost/oa/notify/update
2018-07-24 22:25:30 -HTTP METHOD : POST
2018-07-24 22:25:30 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.update
2018-07-24 22:25:30 -参数 : [NotifyDO{id=49, type='1', title='今晚打老虎', content='今晚打老虎', files='', status='null', createBy=null, createDate=null, updateBy='null', updateDate=null, remarks='', delFlag='null', userIds=null}]
2018-07-24 22:25:30 -==>  Preparing: update oa_notify SET `type` = ?, `title` = ?, `content` = ?, `files` = ?, `remarks` = ? where id = ? 
2018-07-24 22:25:30 -==> Parameters: 1(String), 今晚打老虎(String), 今晚打老虎(String), (String), (String), 49(Long)
2018-07-24 22:25:30 -<==    Updates: 1
2018-07-24 22:25:30 -耗时 : 7
2018-07-24 22:25:30 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:25:30 -请求地址 : http://localhost/oa/notify/list
2018-07-24 22:25:30 -HTTP METHOD : GET
2018-07-24 22:25:30 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.list
2018-07-24 22:25:30 -参数 : [{limit=10, offset=0}]
2018-07-24 22:25:30 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify order by id desc limit ?, ? 
2018-07-24 22:25:30 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:25:30 -<==      Total: 6
2018-07-24 22:25:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:30 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:30 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:30 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:30 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:30 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:30 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -==>  Preparing: select count(*) from oa_notify 
2018-07-24 22:25:30 -==> Parameters: 
2018-07-24 22:25:30 -<==      Total: 1
2018-07-24 22:25:30 -耗时 : 23
2018-07-24 22:25:30 -返回值 : com.bootdo.common.utils.PageUtils@1af0db02
2018-07-24 22:25:36 -请求地址 : http://localhost/oa/notify/edit/49
2018-07-24 22:25:36 -HTTP METHOD : GET
2018-07-24 22:25:36 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.edit
2018-07-24 22:25:36 -参数 : [49, {}]
2018-07-24 22:25:36 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:25:36 -==> Parameters: 49(Long)
2018-07-24 22:25:36 -<==      Total: 1
2018-07-24 22:25:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:36 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:36 -<==      Total: 1
2018-07-24 22:25:36 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 22:25:36 -==> Parameters: oa_notify_type(String)
2018-07-24 22:25:36 -<==      Total: 3
2018-07-24 22:25:36 -耗时 : 10
2018-07-24 22:25:36 -返回值 : oa/notify/edit
2018-07-24 22:25:38 -请求地址 : http://localhost/oa/notify/update
2018-07-24 22:25:38 -HTTP METHOD : POST
2018-07-24 22:25:38 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.update
2018-07-24 22:25:38 -参数 : [NotifyDO{id=49, type='1', title='今晚打老虎', content='今晚打老虎', files='', status='null', createBy=null, createDate=null, updateBy='null', updateDate=null, remarks='', delFlag='null', userIds=null}]
2018-07-24 22:25:38 -==>  Preparing: update oa_notify SET `type` = ?, `title` = ?, `content` = ?, `files` = ?, `remarks` = ? where id = ? 
2018-07-24 22:25:38 -==> Parameters: 1(String), 今晚打老虎(String), 今晚打老虎(String), (String), (String), 49(Long)
2018-07-24 22:25:38 -<==    Updates: 1
2018-07-24 22:25:38 -耗时 : 5
2018-07-24 22:25:38 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:25:38 -请求地址 : http://localhost/oa/notify/list
2018-07-24 22:25:38 -HTTP METHOD : GET
2018-07-24 22:25:38 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.list
2018-07-24 22:25:38 -参数 : [{limit=10, offset=0}]
2018-07-24 22:25:38 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify order by id desc limit ?, ? 
2018-07-24 22:25:38 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:25:38 -<==      Total: 6
2018-07-24 22:25:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:38 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:38 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:38 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:38 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:38 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:25:38 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -==>  Preparing: select count(*) from oa_notify 
2018-07-24 22:25:38 -==> Parameters: 
2018-07-24 22:25:38 -<==      Total: 1
2018-07-24 22:25:38 -耗时 : 17
2018-07-24 22:25:38 -返回值 : com.bootdo.common.utils.PageUtils@3906bcc
2018-07-24 22:25:53 -请求地址 : http://localhost/oa/notify/selfList
2018-07-24 22:25:53 -HTTP METHOD : GET
2018-07-24 22:25:53 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.selfList
2018-07-24 22:25:53 -参数 : [{limit=10, offset=0}]
2018-07-24 22:25:53 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long), 0(Integer), 10(Integer)
2018-07-24 22:25:53 -<==      Total: 5
2018-07-24 22:25:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long)
2018-07-24 22:25:53 -<==      Total: 1
2018-07-24 22:25:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long)
2018-07-24 22:25:53 -<==      Total: 1
2018-07-24 22:25:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long)
2018-07-24 22:25:53 -<==      Total: 1
2018-07-24 22:25:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long)
2018-07-24 22:25:53 -<==      Total: 1
2018-07-24 22:25:53 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long)
2018-07-24 22:25:53 -<==      Total: 1
2018-07-24 22:25:53 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:25:53 -==> Parameters: 1(Long), null
2018-07-24 22:25:53 -<==      Total: 1
2018-07-24 22:25:53 -耗时 : 18
2018-07-24 22:25:53 -返回值 : com.bootdo.common.utils.PageUtils@5904b62f
2018-07-24 22:29:51 -WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 21], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 3], sockJsScheduler[pool size = 16, active threads = 1, queued tasks = 2, completed tasks = 444]
2018-07-24 22:33:34 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2018-07-24 22:33:34 -==> Parameters: 1(Long)
2018-07-24 22:33:34 -<==      Total: 47
2018-07-24 22:33:34 -请求地址 : http://localhost/oa/notify/read/45
2018-07-24 22:33:34 -HTTP METHOD : GET
2018-07-24 22:33:34 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:33:34 -参数 : [45, {}]
2018-07-24 22:33:34 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:33:34 -==> Parameters: 45(Long)
2018-07-24 22:33:34 -<==      Total: 1
2018-07-24 22:33:34 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:33:34 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:33:34 -<==      Total: 1
2018-07-24 22:33:34 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:33:34 -==> Parameters: 1(Integer), 2018-07-24 22:33:34.883(Timestamp), 45(Long), 1(Long)
2018-07-24 22:33:34 -<==    Updates: 1
2018-07-24 22:33:34 -耗时 : 15
2018-07-24 22:33:34 -返回值 : oa/notify/read
2018-07-24 22:33:39 -请求地址 : http://localhost/oa/notify/read/42
2018-07-24 22:33:39 -HTTP METHOD : GET
2018-07-24 22:33:39 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:33:39 -参数 : [42, {}]
2018-07-24 22:33:39 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:33:39 -==> Parameters: 42(Long)
2018-07-24 22:33:39 -<==      Total: 1
2018-07-24 22:33:39 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:33:39 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:33:39 -<==      Total: 1
2018-07-24 22:33:39 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:33:39 -==> Parameters: 1(Integer), 2018-07-24 22:33:39.051(Timestamp), 42(Long), 1(Long)
2018-07-24 22:33:39 -<==    Updates: 1
2018-07-24 22:33:39 -耗时 : 9
2018-07-24 22:33:39 -返回值 : oa/notify/read
2018-07-24 22:33:48 -请求地址 : http://localhost/oa/notify/read/44
2018-07-24 22:33:48 -HTTP METHOD : GET
2018-07-24 22:33:48 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:33:48 -参数 : [44, {}]
2018-07-24 22:33:48 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:33:48 -==> Parameters: 44(Long)
2018-07-24 22:33:48 -<==      Total: 1
2018-07-24 22:33:48 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:33:48 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:33:48 -<==      Total: 1
2018-07-24 22:33:48 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:33:48 -==> Parameters: 1(Integer), 2018-07-24 22:33:48.934(Timestamp), 44(Long), 1(Long)
2018-07-24 22:33:48 -<==    Updates: 1
2018-07-24 22:33:48 -耗时 : 10
2018-07-24 22:33:48 -返回值 : oa/notify/read
2018-07-24 22:33:57 -请求地址 : http://localhost/oa/notify/read/45
2018-07-24 22:33:57 -HTTP METHOD : GET
2018-07-24 22:33:57 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:33:57 -参数 : [45, {}]
2018-07-24 22:33:57 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:33:57 -==> Parameters: 45(Long)
2018-07-24 22:33:57 -<==      Total: 1
2018-07-24 22:33:57 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:33:57 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:33:57 -<==      Total: 1
2018-07-24 22:33:57 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:33:57 -==> Parameters: 1(Integer), 2018-07-24 22:33:57.724(Timestamp), 45(Long), 1(Long)
2018-07-24 22:33:57 -<==    Updates: 1
2018-07-24 22:33:57 -耗时 : 8
2018-07-24 22:33:57 -返回值 : oa/notify/read
2018-07-24 22:34:01 -请求地址 : http://localhost/oa/notify/read/44
2018-07-24 22:34:01 -HTTP METHOD : GET
2018-07-24 22:34:01 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:34:01 -参数 : [44, {}]
2018-07-24 22:34:01 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:34:01 -==> Parameters: 44(Long)
2018-07-24 22:34:01 -<==      Total: 1
2018-07-24 22:34:01 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:34:01 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:34:01 -<==      Total: 1
2018-07-24 22:34:01 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:34:01 -==> Parameters: 1(Integer), 2018-07-24 22:34:01.994(Timestamp), 44(Long), 1(Long)
2018-07-24 22:34:01 -<==    Updates: 1
2018-07-24 22:34:01 -耗时 : 11
2018-07-24 22:34:01 -返回值 : oa/notify/read
2018-07-24 22:34:04 -请求地址 : http://localhost/oa/notify/read/43
2018-07-24 22:34:04 -HTTP METHOD : GET
2018-07-24 22:34:04 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:34:04 -参数 : [43, {}]
2018-07-24 22:34:04 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:34:04 -==> Parameters: 43(Long)
2018-07-24 22:34:04 -<==      Total: 1
2018-07-24 22:34:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:34:04 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:34:04 -<==      Total: 1
2018-07-24 22:34:04 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:34:04 -==> Parameters: 1(Integer), 2018-07-24 22:34:04.148(Timestamp), 43(Long), 1(Long)
2018-07-24 22:34:04 -<==    Updates: 1
2018-07-24 22:34:04 -耗时 : 6
2018-07-24 22:34:04 -返回值 : oa/notify/read
2018-07-24 22:34:06 -请求地址 : http://localhost/oa/notify/read/42
2018-07-24 22:34:06 -HTTP METHOD : GET
2018-07-24 22:34:06 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:34:06 -参数 : [42, {}]
2018-07-24 22:34:06 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:34:06 -==> Parameters: 42(Long)
2018-07-24 22:34:06 -<==      Total: 1
2018-07-24 22:34:06 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:34:06 -==> Parameters: 1(String), oa_notify_type(String)
2018-07-24 22:34:06 -<==      Total: 1
2018-07-24 22:34:06 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:34:06 -==> Parameters: 1(Integer), 2018-07-24 22:34:06.171(Timestamp), 42(Long), 1(Long)
2018-07-24 22:34:06 -<==    Updates: 1
2018-07-24 22:34:06 -耗时 : 11
2018-07-24 22:34:06 -返回值 : oa/notify/read
2018-07-24 22:34:07 -请求地址 : http://localhost/oa/notify/selfList
2018-07-24 22:34:07 -HTTP METHOD : GET
2018-07-24 22:34:07 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.selfList
2018-07-24 22:34:07 -参数 : [{limit=10, offset=0}]
2018-07-24 22:34:07 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long), 0(Integer), 10(Integer)
2018-07-24 22:34:07 -<==      Total: 5
2018-07-24 22:34:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long)
2018-07-24 22:34:07 -<==      Total: 1
2018-07-24 22:34:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long)
2018-07-24 22:34:07 -<==      Total: 1
2018-07-24 22:34:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long)
2018-07-24 22:34:07 -<==      Total: 1
2018-07-24 22:34:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long)
2018-07-24 22:34:07 -<==      Total: 1
2018-07-24 22:34:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long)
2018-07-24 22:34:07 -<==      Total: 1
2018-07-24 22:34:07 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:34:07 -==> Parameters: 1(Long), null
2018-07-24 22:34:07 -<==      Total: 1
2018-07-24 22:34:07 -耗时 : 19
2018-07-24 22:34:07 -返回值 : com.bootdo.common.utils.PageUtils@35e322a7
2018-07-24 22:34:08 -请求地址 : http://localhost/oa/notify/selfList
2018-07-24 22:34:08 -HTTP METHOD : GET
2018-07-24 22:34:08 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.selfList
2018-07-24 22:34:08 -参数 : [{limit=10, offset=0}]
2018-07-24 22:34:08 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long), 0(Integer), 10(Integer)
2018-07-24 22:34:08 -<==      Total: 5
2018-07-24 22:34:08 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long)
2018-07-24 22:34:08 -<==      Total: 1
2018-07-24 22:34:08 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long)
2018-07-24 22:34:08 -<==      Total: 1
2018-07-24 22:34:08 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long)
2018-07-24 22:34:08 -<==      Total: 1
2018-07-24 22:34:08 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long)
2018-07-24 22:34:08 -<==      Total: 1
2018-07-24 22:34:08 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long)
2018-07-24 22:34:08 -<==      Total: 1
2018-07-24 22:34:08 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:34:08 -==> Parameters: 1(Long), null
2018-07-24 22:34:08 -<==      Total: 1
2018-07-24 22:34:08 -耗时 : 20
2018-07-24 22:34:08 -返回值 : com.bootdo.common.utils.PageUtils@5b569c2c
2018-07-24 22:34:09 -请求地址 : http://localhost/oa/notify/read/41
2018-07-24 22:34:09 -HTTP METHOD : GET
2018-07-24 22:34:09 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.read
2018-07-24 22:34:09 -参数 : [41, {}]
2018-07-24 22:34:09 -==>  Preparing: select `id`,`type`,`title`,`content`,`files`,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify where id = ? 
2018-07-24 22:34:09 -==> Parameters: 41(Long)
2018-07-24 22:34:09 -<==      Total: 1
2018-07-24 22:34:09 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE value = ? and type = ? order by id desc 
2018-07-24 22:34:09 -==> Parameters: 3(String), oa_notify_type(String)
2018-07-24 22:34:09 -<==      Total: 1
2018-07-24 22:34:09 -==>  Preparing: update oa_notify_record SET `is_read` = ?, `read_date` = ? where notify_id = ? and user_id = ? 
2018-07-24 22:34:09 -==> Parameters: 1(Integer), 2018-07-24 22:34:09.471(Timestamp), 41(Long), 1(Long)
2018-07-24 22:34:09 -<==    Updates: 1
2018-07-24 22:34:09 -耗时 : 12
2018-07-24 22:34:09 -返回值 : oa/notify/read
2018-07-24 22:34:12 -请求地址 : http://localhost/oa/notify/selfList
2018-07-24 22:34:12 -HTTP METHOD : GET
2018-07-24 22:34:12 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.selfList
2018-07-24 22:34:12 -参数 : [{limit=10, offset=0}]
2018-07-24 22:34:12 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long), 0(Integer), 10(Integer)
2018-07-24 22:34:12 -<==      Total: 5
2018-07-24 22:34:12 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long)
2018-07-24 22:34:12 -<==      Total: 1
2018-07-24 22:34:12 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long)
2018-07-24 22:34:12 -<==      Total: 1
2018-07-24 22:34:12 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long)
2018-07-24 22:34:12 -<==      Total: 1
2018-07-24 22:34:12 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long)
2018-07-24 22:34:12 -<==      Total: 1
2018-07-24 22:34:12 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long)
2018-07-24 22:34:12 -<==      Total: 1
2018-07-24 22:34:12 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:34:12 -==> Parameters: 1(Long), null
2018-07-24 22:34:12 -<==      Total: 1
2018-07-24 22:34:12 -耗时 : 19
2018-07-24 22:34:12 -返回值 : com.bootdo.common.utils.PageUtils@1c8351a4
2018-07-24 22:34:27 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:27 -HTTP METHOD : GET
2018-07-24 22:34:27 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:27 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:34:27 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:34:27 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:34:27 -<==      Total: 10
2018-07-24 22:34:27 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:34:27 -==> Parameters: 
2018-07-24 22:34:27 -<==      Total: 1
2018-07-24 22:34:27 -耗时 : 8
2018-07-24 22:34:27 -返回值 : com.bootdo.common.utils.PageUtils@c90629c
2018-07-24 22:34:32 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:32 -HTTP METHOD : GET
2018-07-24 22:34:32 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:32 -参数 : [{limit=10, offset=10, name=, deptId=}]
2018-07-24 22:34:32 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:34:32 -==> Parameters: 10(Integer), 10(Integer)
2018-07-24 22:34:32 -<==      Total: 2
2018-07-24 22:34:32 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:34:32 -==> Parameters: 
2018-07-24 22:34:32 -<==      Total: 1
2018-07-24 22:34:32 -耗时 : 9
2018-07-24 22:34:32 -返回值 : com.bootdo.common.utils.PageUtils@12f9f1be
2018-07-24 22:34:35 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:35 -HTTP METHOD : GET
2018-07-24 22:34:35 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:35 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:34:35 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:34:35 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:34:35 -<==      Total: 10
2018-07-24 22:34:35 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:34:35 -==> Parameters: 
2018-07-24 22:34:35 -<==      Total: 1
2018-07-24 22:34:35 -耗时 : 9
2018-07-24 22:34:35 -返回值 : com.bootdo.common.utils.PageUtils@2d44ed90
2018-07-24 22:34:40 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:40 -HTTP METHOD : GET
2018-07-24 22:34:40 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:40 -参数 : [{limit=10, offset=0, name=, deptId=8}]
2018-07-24 22:34:40 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:34:40 -==> Parameters: 8(String), 0(Integer), 10(Integer)
2018-07-24 22:34:40 -<==      Total: 1
2018-07-24 22:34:40 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:34:40 -==> Parameters: 8(String)
2018-07-24 22:34:40 -<==      Total: 1
2018-07-24 22:34:40 -耗时 : 10
2018-07-24 22:34:40 -返回值 : com.bootdo.common.utils.PageUtils@3ec0813e
2018-07-24 22:34:42 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:42 -HTTP METHOD : GET
2018-07-24 22:34:42 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:42 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:34:42 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:34:42 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:34:42 -<==      Total: 10
2018-07-24 22:34:42 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:34:42 -==> Parameters: 
2018-07-24 22:34:42 -<==      Total: 1
2018-07-24 22:34:42 -耗时 : 10
2018-07-24 22:34:42 -返回值 : com.bootdo.common.utils.PageUtils@6089cece
2018-07-24 22:34:43 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:43 -HTTP METHOD : GET
2018-07-24 22:34:43 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:43 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:34:43 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:34:43 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:34:43 -<==      Total: 10
2018-07-24 22:34:43 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:34:43 -==> Parameters: 
2018-07-24 22:34:43 -<==      Total: 1
2018-07-24 22:34:43 -耗时 : 11
2018-07-24 22:34:43 -返回值 : com.bootdo.common.utils.PageUtils@3525c526
2018-07-24 22:34:44 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:44 -HTTP METHOD : GET
2018-07-24 22:34:44 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:44 -参数 : [{limit=10, offset=0, name=, deptId=13}]
2018-07-24 22:34:44 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:34:44 -==> Parameters: 13(String), 0(Integer), 10(Integer)
2018-07-24 22:34:44 -<==      Total: 1
2018-07-24 22:34:44 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:34:44 -==> Parameters: 13(String)
2018-07-24 22:34:44 -<==      Total: 1
2018-07-24 22:34:44 -耗时 : 10
2018-07-24 22:34:44 -返回值 : com.bootdo.common.utils.PageUtils@5f666126
2018-07-24 22:34:49 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:34:49 -HTTP METHOD : GET
2018-07-24 22:34:49 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:34:49 -参数 : [{limit=10, offset=0, name=, deptId=6}]
2018-07-24 22:34:49 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE dept_id = ? order by user_id desc limit ?, ? 
2018-07-24 22:34:49 -==> Parameters: 6(String), 0(Integer), 10(Integer)
2018-07-24 22:34:49 -<==      Total: 6
2018-07-24 22:34:49 -==>  Preparing: select count(*) from sys_user WHERE dept_id = ? 
2018-07-24 22:34:49 -==> Parameters: 6(String)
2018-07-24 22:34:49 -<==      Total: 1
2018-07-24 22:34:49 -耗时 : 8
2018-07-24 22:34:49 -返回值 : com.bootdo.common.utils.PageUtils@655b9648
2018-07-24 22:34:58 -请求地址 : http://localhost/sys/user/edit/135
2018-07-24 22:34:58 -HTTP METHOD : GET
2018-07-24 22:34:58 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:34:58 -参数 : [{}, 135]
2018-07-24 22:34:58 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:34:58 -==> Parameters: 135(Long)
2018-07-24 22:34:58 -<==      Total: 1
2018-07-24 22:34:58 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:34:58 -==> Parameters: 135(Long)
2018-07-24 22:34:58 -<==      Total: 1
2018-07-24 22:34:58 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:34:58 -==> Parameters: 6(Long)
2018-07-24 22:34:58 -<==      Total: 1
2018-07-24 22:34:58 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:34:58 -==> Parameters: 135(Long)
2018-07-24 22:34:58 -<==      Total: 1
2018-07-24 22:34:58 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:34:58 -==> Parameters: 
2018-07-24 22:34:58 -<==      Total: 3
2018-07-24 22:34:58 -耗时 : 13
2018-07-24 22:34:58 -返回值 : system/user/edit
2018-07-24 22:34:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:34:58 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 13(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:34:58.621(Timestamp)
2018-07-24 22:34:58 -<==    Updates: 1
2018-07-24 22:35:00 -请求地址 : http://localhost/sys/user/resetPwd/135
2018-07-24 22:35:00 -HTTP METHOD : GET
2018-07-24 22:35:00 -CLASS_METHOD : com.bootdo.system.controller.UserController.resetPwd
2018-07-24 22:35:00 -参数 : [135, {}]
2018-07-24 22:35:00 -耗时 : 1
2018-07-24 22:35:00 -返回值 : system/user/reset_pwd
2018-07-24 22:35:00 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:00 -==> Parameters: 1(Long), admin(String), 请求更改用户密码(String), 1(Integer), com.bootdo.system.controller.UserController.resetPwd()(String), null, 127.0.0.1(String), 2018-07-24 22:35:00.745(Timestamp)
2018-07-24 22:35:00 -<==    Updates: 1
2018-07-24 22:35:04 -请求地址 : http://localhost/sys/user/edit/131
2018-07-24 22:35:04 -HTTP METHOD : GET
2018-07-24 22:35:04 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:35:04 -参数 : [{}, 131]
2018-07-24 22:35:04 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:04 -==> Parameters: 131(Long)
2018-07-24 22:35:04 -<==      Total: 1
2018-07-24 22:35:04 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:35:04 -==> Parameters: 131(Long)
2018-07-24 22:35:04 -<==      Total: 1
2018-07-24 22:35:04 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:35:04 -==> Parameters: 6(Long)
2018-07-24 22:35:04 -<==      Total: 1
2018-07-24 22:35:04 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:04 -==> Parameters: 131(Long)
2018-07-24 22:35:04 -<==      Total: 1
2018-07-24 22:35:04 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:35:04 -==> Parameters: 
2018-07-24 22:35:04 -<==      Total: 3
2018-07-24 22:35:04 -耗时 : 12
2018-07-24 22:35:04 -返回值 : system/user/edit
2018-07-24 22:35:04 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:04 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 12(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:35:04.51(Timestamp)
2018-07-24 22:35:04 -<==    Updates: 1
2018-07-24 22:35:07 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:35:07 -HTTP METHOD : POST
2018-07-24 22:35:07 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:35:07 -参数 : [UserDO{userId=131, username='lhc', name='令狐冲', password='null', deptId=6, deptName='研发部', email='lhc@bootdo.com', mobile='null', status=1, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:35:07 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:35:07 -==> Parameters: lhc(String), 令狐冲(String), 6(Long), lhc@bootdo.com(String), 1(Integer), 131(Long)
2018-07-24 22:35:07 -<==    Updates: 1
2018-07-24 22:35:07 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:35:07 -==> Parameters: 131(Long)
2018-07-24 22:35:07 -<==    Updates: 1
2018-07-24 22:35:07 -耗时 : 5
2018-07-24 22:35:07 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:35:07 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:07 -==> Parameters: 1(Long), admin(String), 更新用户(String), 6(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:35:07.638(Timestamp)
2018-07-24 22:35:07 -<==    Updates: 1
2018-07-24 22:35:07 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:07 -HTTP METHOD : GET
2018-07-24 22:35:07 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:07 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:35:07 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:07 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:35:07 -<==      Total: 10
2018-07-24 22:35:07 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:07 -==> Parameters: 
2018-07-24 22:35:07 -<==      Total: 1
2018-07-24 22:35:07 -耗时 : 7
2018-07-24 22:35:07 -返回值 : com.bootdo.common.utils.PageUtils@310232c9
2018-07-24 22:35:09 -请求地址 : http://localhost/sys/user/edit/123
2018-07-24 22:35:09 -HTTP METHOD : GET
2018-07-24 22:35:09 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:35:09 -参数 : [{}, 123]
2018-07-24 22:35:09 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:09 -==> Parameters: 123(Long)
2018-07-24 22:35:09 -<==      Total: 1
2018-07-24 22:35:09 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:35:09 -==> Parameters: 123(Long)
2018-07-24 22:35:09 -<==      Total: 1
2018-07-24 22:35:09 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:35:09 -==> Parameters: 6(Long)
2018-07-24 22:35:09 -<==      Total: 1
2018-07-24 22:35:09 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:09 -==> Parameters: 123(Long)
2018-07-24 22:35:09 -<==      Total: 1
2018-07-24 22:35:09 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:35:09 -==> Parameters: 
2018-07-24 22:35:09 -<==      Total: 3
2018-07-24 22:35:09 -耗时 : 13
2018-07-24 22:35:09 -返回值 : system/user/edit
2018-07-24 22:35:09 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:09 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 14(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:35:09.925(Timestamp)
2018-07-24 22:35:09 -<==    Updates: 1
2018-07-24 22:35:11 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:35:11 -HTTP METHOD : POST
2018-07-24 22:35:11 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:35:11 -参数 : [UserDO{userId=123, username='zxy', name='张学友', password='null', deptId=6, deptName='研发部', email='zxy@bootdo', mobile='null', status=1, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:35:11 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:35:11 -==> Parameters: zxy(String), 张学友(String), 6(Long), zxy@bootdo(String), 1(Integer), 123(Long)
2018-07-24 22:35:11 -<==    Updates: 1
2018-07-24 22:35:11 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:35:11 -==> Parameters: 123(Long)
2018-07-24 22:35:11 -<==    Updates: 1
2018-07-24 22:35:11 -耗时 : 6
2018-07-24 22:35:11 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:35:11 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:11 -==> Parameters: 1(Long), admin(String), 更新用户(String), 7(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:35:11.949(Timestamp)
2018-07-24 22:35:11 -<==    Updates: 1
2018-07-24 22:35:11 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:11 -HTTP METHOD : GET
2018-07-24 22:35:11 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:11 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:35:11 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:11 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:35:11 -<==      Total: 10
2018-07-24 22:35:11 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:11 -==> Parameters: 
2018-07-24 22:35:11 -<==      Total: 1
2018-07-24 22:35:11 -耗时 : 6
2018-07-24 22:35:11 -返回值 : com.bootdo.common.utils.PageUtils@2560eeec
2018-07-24 22:35:13 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:13 -HTTP METHOD : GET
2018-07-24 22:35:13 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:13 -参数 : [{limit=10, offset=10, name=, deptId=}]
2018-07-24 22:35:13 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:13 -==> Parameters: 10(Integer), 10(Integer)
2018-07-24 22:35:13 -<==      Total: 2
2018-07-24 22:35:13 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:13 -==> Parameters: 
2018-07-24 22:35:13 -<==      Total: 1
2018-07-24 22:35:13 -耗时 : 5
2018-07-24 22:35:13 -返回值 : com.bootdo.common.utils.PageUtils@19a02eea
2018-07-24 22:35:15 -请求地址 : http://localhost/sys/user/edit/1
2018-07-24 22:35:15 -HTTP METHOD : GET
2018-07-24 22:35:15 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:35:15 -参数 : [{}, 1]
2018-07-24 22:35:15 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:15 -==> Parameters: 1(Long)
2018-07-24 22:35:15 -<==      Total: 1
2018-07-24 22:35:15 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:35:15 -==> Parameters: 1(Long)
2018-07-24 22:35:15 -<==      Total: 1
2018-07-24 22:35:15 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:35:15 -==> Parameters: 6(Long)
2018-07-24 22:35:15 -<==      Total: 1
2018-07-24 22:35:15 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:15 -==> Parameters: 1(Long)
2018-07-24 22:35:15 -<==      Total: 1
2018-07-24 22:35:15 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:35:15 -==> Parameters: 
2018-07-24 22:35:15 -<==      Total: 3
2018-07-24 22:35:15 -耗时 : 13
2018-07-24 22:35:15 -返回值 : system/user/edit
2018-07-24 22:35:15 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:15 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 14(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:35:15.474(Timestamp)
2018-07-24 22:35:15 -<==    Updates: 1
2018-07-24 22:35:17 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:35:17 -HTTP METHOD : POST
2018-07-24 22:35:17 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:35:17 -参数 : [UserDO{userId=1, username='admin', name='超级管理员', password='null', deptId=6, deptName='研发部', email='admin@example.com', mobile='null', status=0, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[1], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:35:17 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:35:17 -==> Parameters: admin(String), 超级管理员(String), 6(Long), admin@example.com(String), 0(Integer), 1(Long)
2018-07-24 22:35:17 -<==    Updates: 1
2018-07-24 22:35:17 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:35:17 -==> Parameters: 1(Long)
2018-07-24 22:35:17 -<==    Updates: 1
2018-07-24 22:35:17 -==>  Preparing: INSERT INTO sys_user_role(user_id, role_id) values (?,?) 
2018-07-24 22:35:17 -==> Parameters: 1(Long), 1(Long)
2018-07-24 22:35:17 -<==    Updates: 1
2018-07-24 22:35:17 -耗时 : 11
2018-07-24 22:35:17 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:35:17 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:17 -==> Parameters: 1(Long), admin(String), 更新用户(String), 11(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:35:17.64(Timestamp)
2018-07-24 22:35:17 -<==    Updates: 1
2018-07-24 22:35:17 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:17 -HTTP METHOD : GET
2018-07-24 22:35:17 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:17 -参数 : [{limit=10, offset=10, name=, deptId=}]
2018-07-24 22:35:17 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:17 -==> Parameters: 10(Integer), 10(Integer)
2018-07-24 22:35:17 -<==      Total: 2
2018-07-24 22:35:17 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:17 -==> Parameters: 
2018-07-24 22:35:17 -<==      Total: 1
2018-07-24 22:35:17 -耗时 : 8
2018-07-24 22:35:17 -返回值 : com.bootdo.common.utils.PageUtils@75d7158c
2018-07-24 22:35:21 -请求地址 : http://localhost/sys/user/edit/1
2018-07-24 22:35:21 -HTTP METHOD : GET
2018-07-24 22:35:21 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:35:21 -参数 : [{}, 1]
2018-07-24 22:35:21 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:21 -==> Parameters: 1(Long)
2018-07-24 22:35:21 -<==      Total: 1
2018-07-24 22:35:21 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:35:21 -==> Parameters: 1(Long)
2018-07-24 22:35:21 -<==      Total: 1
2018-07-24 22:35:21 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:35:21 -==> Parameters: 6(Long)
2018-07-24 22:35:21 -<==      Total: 1
2018-07-24 22:35:21 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:21 -==> Parameters: 1(Long)
2018-07-24 22:35:21 -<==      Total: 1
2018-07-24 22:35:21 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:35:21 -==> Parameters: 
2018-07-24 22:35:21 -<==      Total: 3
2018-07-24 22:35:21 -耗时 : 15
2018-07-24 22:35:21 -返回值 : system/user/edit
2018-07-24 22:35:21 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:21 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 15(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:35:21.891(Timestamp)
2018-07-24 22:35:21 -<==    Updates: 1
2018-07-24 22:35:23 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:35:23 -HTTP METHOD : POST
2018-07-24 22:35:23 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:35:23 -参数 : [UserDO{userId=1, username='admin', name='超级管理员', password='null', deptId=6, deptName='研发部', email='admin@example.com', mobile='null', status=1, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[1], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:35:23 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:35:23 -==> Parameters: admin(String), 超级管理员(String), 6(Long), admin@example.com(String), 1(Integer), 1(Long)
2018-07-24 22:35:23 -<==    Updates: 1
2018-07-24 22:35:23 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:35:23 -==> Parameters: 1(Long)
2018-07-24 22:35:23 -<==    Updates: 1
2018-07-24 22:35:23 -==>  Preparing: INSERT INTO sys_user_role(user_id, role_id) values (?,?) 
2018-07-24 22:35:23 -==> Parameters: 1(Long), 1(Long)
2018-07-24 22:35:23 -<==    Updates: 1
2018-07-24 22:35:23 -耗时 : 10
2018-07-24 22:35:23 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:35:23 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:23 -==> Parameters: 1(Long), admin(String), 更新用户(String), 11(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:35:23.793(Timestamp)
2018-07-24 22:35:23 -<==    Updates: 1
2018-07-24 22:35:23 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:23 -HTTP METHOD : GET
2018-07-24 22:35:23 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:23 -参数 : [{limit=10, offset=10, name=, deptId=}]
2018-07-24 22:35:23 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:23 -==> Parameters: 10(Integer), 10(Integer)
2018-07-24 22:35:23 -<==      Total: 2
2018-07-24 22:35:23 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:23 -==> Parameters: 
2018-07-24 22:35:23 -<==      Total: 1
2018-07-24 22:35:23 -耗时 : 8
2018-07-24 22:35:23 -返回值 : com.bootdo.common.utils.PageUtils@1e228705
2018-07-24 22:35:25 -请求地址 : http://localhost/sys/user/edit/2
2018-07-24 22:35:25 -HTTP METHOD : GET
2018-07-24 22:35:25 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:35:25 -参数 : [{}, 2]
2018-07-24 22:35:25 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:25 -==> Parameters: 2(Long)
2018-07-24 22:35:25 -<==      Total: 1
2018-07-24 22:35:25 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:35:25 -==> Parameters: 2(Long)
2018-07-24 22:35:25 -<==      Total: 1
2018-07-24 22:35:25 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:35:25 -==> Parameters: 6(Long)
2018-07-24 22:35:25 -<==      Total: 1
2018-07-24 22:35:25 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:25 -==> Parameters: 2(Long)
2018-07-24 22:35:25 -<==      Total: 1
2018-07-24 22:35:25 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:35:25 -==> Parameters: 
2018-07-24 22:35:25 -<==      Total: 3
2018-07-24 22:35:25 -耗时 : 13
2018-07-24 22:35:25 -返回值 : system/user/edit
2018-07-24 22:35:25 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:25 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 13(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:35:25.62(Timestamp)
2018-07-24 22:35:25 -<==    Updates: 1
2018-07-24 22:35:27 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:35:27 -HTTP METHOD : POST
2018-07-24 22:35:27 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:35:27 -参数 : [UserDO{userId=2, username='test', name='临时用户', password='null', deptId=6, deptName='研发部', email='test@bootdo.com', mobile='null', status=0, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[1], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:35:27 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:35:27 -==> Parameters: test(String), 临时用户(String), 6(Long), test@bootdo.com(String), 0(Integer), 2(Long)
2018-07-24 22:35:27 -<==    Updates: 1
2018-07-24 22:35:27 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:35:27 -==> Parameters: 2(Long)
2018-07-24 22:35:27 -<==    Updates: 1
2018-07-24 22:35:27 -==>  Preparing: INSERT INTO sys_user_role(user_id, role_id) values (?,?) 
2018-07-24 22:35:27 -==> Parameters: 2(Long), 1(Long)
2018-07-24 22:35:27 -<==    Updates: 1
2018-07-24 22:35:27 -耗时 : 12
2018-07-24 22:35:27 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:35:27 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:27 -==> Parameters: 1(Long), admin(String), 更新用户(String), 12(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:35:27.561(Timestamp)
2018-07-24 22:35:27 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:27 -HTTP METHOD : GET
2018-07-24 22:35:27 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:27 -参数 : [{limit=10, offset=10, name=, deptId=}]
2018-07-24 22:35:27 -<==    Updates: 1
2018-07-24 22:35:27 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:27 -==> Parameters: 10(Integer), 10(Integer)
2018-07-24 22:35:27 -<==      Total: 2
2018-07-24 22:35:27 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:27 -==> Parameters: 
2018-07-24 22:35:27 -<==      Total: 1
2018-07-24 22:35:27 -耗时 : 10
2018-07-24 22:35:27 -返回值 : com.bootdo.common.utils.PageUtils@d1e9e28
2018-07-24 22:35:29 -请求地址 : http://localhost/sys/user/edit/2
2018-07-24 22:35:29 -HTTP METHOD : GET
2018-07-24 22:35:29 -CLASS_METHOD : com.bootdo.system.controller.UserController.edit
2018-07-24 22:35:29 -参数 : [{}, 2]
2018-07-24 22:35:29 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:29 -==> Parameters: 2(Long)
2018-07-24 22:35:29 -<==      Total: 1
2018-07-24 22:35:29 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:35:29 -==> Parameters: 2(Long)
2018-07-24 22:35:29 -<==      Total: 1
2018-07-24 22:35:29 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:35:29 -==> Parameters: 6(Long)
2018-07-24 22:35:29 -<==      Total: 1
2018-07-24 22:35:29 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:35:29 -==> Parameters: 2(Long)
2018-07-24 22:35:29 -<==      Total: 1
2018-07-24 22:35:29 -==>  Preparing: select `role_id`,`role_name`,`role_sign`,`remark`,`user_id_create`,`gmt_create`,`gmt_modified` from sys_role order by role_id desc 
2018-07-24 22:35:29 -==> Parameters: 
2018-07-24 22:35:29 -<==      Total: 3
2018-07-24 22:35:29 -耗时 : 9
2018-07-24 22:35:29 -返回值 : system/user/edit
2018-07-24 22:35:29 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:29 -==> Parameters: 1(Long), admin(String), 编辑用户(String), 10(Integer), com.bootdo.system.controller.UserController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:35:29.337(Timestamp)
2018-07-24 22:35:29 -<==    Updates: 1
2018-07-24 22:35:31 -请求地址 : http://localhost/sys/user/update
2018-07-24 22:35:31 -HTTP METHOD : POST
2018-07-24 22:35:31 -CLASS_METHOD : com.bootdo.system.controller.UserController.update
2018-07-24 22:35:31 -参数 : [UserDO{userId=2, username='test', name='临时用户', password='null', deptId=6, deptName='研发部', email='test@bootdo.com', mobile='null', status=1, userIdCreate=null, gmtCreate=null, gmtModified=null, roleIds=[1], sex=null, birth=null, picId=null, liveAddress='null', hobby='null', province='null', city='null', district='null'}]
2018-07-24 22:35:31 -==>  Preparing: update sys_user SET `username` = ?, `name` = ?, `dept_id` = ?, `email` = ?, `status` = ? where user_id = ? 
2018-07-24 22:35:31 -==> Parameters: test(String), 临时用户(String), 6(Long), test@bootdo.com(String), 1(Integer), 2(Long)
2018-07-24 22:35:31 -<==    Updates: 1
2018-07-24 22:35:31 -==>  Preparing: delete from sys_user_role where user_id=? 
2018-07-24 22:35:31 -==> Parameters: 2(Long)
2018-07-24 22:35:31 -<==    Updates: 1
2018-07-24 22:35:31 -==>  Preparing: INSERT INTO sys_user_role(user_id, role_id) values (?,?) 
2018-07-24 22:35:31 -==> Parameters: 2(Long), 1(Long)
2018-07-24 22:35:31 -<==    Updates: 1
2018-07-24 22:35:31 -耗时 : 11
2018-07-24 22:35:31 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:35:31 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:35:31 -==> Parameters: 1(Long), admin(String), 更新用户(String), 12(Integer), com.bootdo.system.controller.UserController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:35:31.434(Timestamp)
2018-07-24 22:35:31 -<==    Updates: 1
2018-07-24 22:35:31 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:31 -HTTP METHOD : GET
2018-07-24 22:35:31 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:31 -参数 : [{limit=10, offset=10, name=, deptId=}]
2018-07-24 22:35:31 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:31 -==> Parameters: 10(Integer), 10(Integer)
2018-07-24 22:35:31 -<==      Total: 2
2018-07-24 22:35:31 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:31 -==> Parameters: 
2018-07-24 22:35:31 -<==      Total: 1
2018-07-24 22:35:31 -耗时 : 8
2018-07-24 22:35:31 -返回值 : com.bootdo.common.utils.PageUtils@7df87db6
2018-07-24 22:35:40 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:40 -HTTP METHOD : GET
2018-07-24 22:35:40 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:40 -参数 : [{limit=10, offset=10, name=刘德华, deptId=}]
2018-07-24 22:35:40 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE name = ? order by user_id desc limit ?, ? 
2018-07-24 22:35:40 -==> Parameters: 刘德华(String), 10(Integer), 10(Integer)
2018-07-24 22:35:40 -<==      Total: 0
2018-07-24 22:35:40 -==>  Preparing: select count(*) from sys_user WHERE name = ? 
2018-07-24 22:35:40 -==> Parameters: 刘德华(String)
2018-07-24 22:35:40 -<==      Total: 1
2018-07-24 22:35:40 -耗时 : 10
2018-07-24 22:35:40 -返回值 : com.bootdo.common.utils.PageUtils@1493b291
2018-07-24 22:35:42 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:42 -HTTP METHOD : GET
2018-07-24 22:35:42 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:42 -参数 : [{limit=10, offset=0, name=刘德, deptId=}]
2018-07-24 22:35:42 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE name = ? order by user_id desc limit ?, ? 
2018-07-24 22:35:42 -==> Parameters: 刘德(String), 0(Integer), 10(Integer)
2018-07-24 22:35:42 -<==      Total: 0
2018-07-24 22:35:42 -==>  Preparing: select count(*) from sys_user WHERE name = ? 
2018-07-24 22:35:42 -==> Parameters: 刘德(String)
2018-07-24 22:35:42 -<==      Total: 1
2018-07-24 22:35:42 -耗时 : 9
2018-07-24 22:35:42 -返回值 : com.bootdo.common.utils.PageUtils@3ba7ecb
2018-07-24 22:35:44 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:44 -HTTP METHOD : GET
2018-07-24 22:35:44 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:44 -参数 : [{limit=10, offset=0, name=刘, deptId=}]
2018-07-24 22:35:44 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE name = ? order by user_id desc limit ?, ? 
2018-07-24 22:35:44 -==> Parameters: 刘(String), 0(Integer), 10(Integer)
2018-07-24 22:35:44 -<==      Total: 0
2018-07-24 22:35:44 -==>  Preparing: select count(*) from sys_user WHERE name = ? 
2018-07-24 22:35:44 -==> Parameters: 刘(String)
2018-07-24 22:35:44 -<==      Total: 1
2018-07-24 22:35:44 -耗时 : 7
2018-07-24 22:35:44 -返回值 : com.bootdo.common.utils.PageUtils@60380558
2018-07-24 22:35:47 -请求地址 : http://localhost/sys/user/list
2018-07-24 22:35:47 -HTTP METHOD : GET
2018-07-24 22:35:47 -CLASS_METHOD : com.bootdo.system.controller.UserController.list
2018-07-24 22:35:47 -参数 : [{limit=10, offset=0, name=, deptId=}]
2018-07-24 22:35:47 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user order by user_id desc limit ?, ? 
2018-07-24 22:35:47 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:35:47 -<==      Total: 10
2018-07-24 22:35:47 -==>  Preparing: select count(*) from sys_user 
2018-07-24 22:35:47 -==> Parameters: 
2018-07-24 22:35:47 -<==      Total: 1
2018-07-24 22:35:47 -耗时 : 10
2018-07-24 22:35:47 -返回值 : com.bootdo.common.utils.PageUtils@119c612e
2018-07-24 22:36:19 -请求地址 : http://localhost/common/dict
2018-07-24 22:36:19 -HTTP METHOD : GET
2018-07-24 22:36:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.dict
2018-07-24 22:36:19 -参数 : []
2018-07-24 22:36:19 -耗时 : 0
2018-07-24 22:36:19 -返回值 : common/dict/dict
2018-07-24 22:36:19 -请求地址 : http://localhost/common/dict/type
2018-07-24 22:36:19 -HTTP METHOD : GET
2018-07-24 22:36:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.listType
2018-07-24 22:36:19 -参数 : []
2018-07-24 22:36:19 -==>  Preparing: select distinct `type` , description from sys_dict 
2018-07-24 22:36:19 -==> Parameters: 
2018-07-24 22:36:19 -<==      Total: 31
2018-07-24 22:36:19 -耗时 : 9
2018-07-24 22:36:19 -返回值 : [DictDO{id=null, name='null', value='null', type='del_flag', description='删除标记', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='show_hide', description='显示/隐藏', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='yes_no', description='是/否', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='color', description='颜色值', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='theme', description='主题方案', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_area_type', description='区域类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_type', description='机构类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_common', description='快捷通用部门', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_grade', description='机构等级', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_data_scope', description='数据范围', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_user_type', description='用户类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_theme', description='站点主题', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_module', description='栏目模型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_show_modes', description='展现方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_del_flag', description='内容状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_posid', description='推荐位', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_guestbook', description='留言板分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_leave_type', description='请假类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_log_type', description='日志类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='act_type', description='流程类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='act_category', description='流程分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_category', description='代码生成分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_query_type', description='查询方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_show_type', description='字段生成方案', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_java_type', description='Java类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sex', description='性别', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_type', description='通知通告类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_status', description='通知通告状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_read', description='通知通告状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='blog_type', description='博客类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='hobby', description='爱好', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}]
2018-07-24 22:36:19 -请求地址 : http://localhost/common/dict/list
2018-07-24 22:36:19 -HTTP METHOD : GET
2018-07-24 22:36:19 -CLASS_METHOD : com.bootdo.common.controller.DictController.list
2018-07-24 22:36:19 -参数 : [{limit=10, offset=0}]
2018-07-24 22:36:19 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict order by id desc limit ?, ? 
2018-07-24 22:36:19 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:36:19 -<==      Total: 10
2018-07-24 22:36:19 -==>  Preparing: select count(*) from sys_dict 
2018-07-24 22:36:19 -==> Parameters: 
2018-07-24 22:36:19 -<==      Total: 1
2018-07-24 22:36:19 -耗时 : 5
2018-07-24 22:36:19 -返回值 : com.bootdo.common.utils.PageUtils@523125e5
2018-07-24 22:36:20 -请求地址 : http://localhost/common/sysFile
2018-07-24 22:36:20 -HTTP METHOD : GET
2018-07-24 22:36:20 -CLASS_METHOD : com.bootdo.common.controller.FileController.sysFile
2018-07-24 22:36:20 -参数 : [{}]
2018-07-24 22:36:20 -耗时 : 0
2018-07-24 22:36:20 -返回值 : common/file/file
2018-07-24 22:36:20 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:20 -HTTP METHOD : GET
2018-07-24 22:36:20 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:20 -参数 : [{limit=12, offset=0, type=}]
2018-07-24 22:36:20 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file order by id desc limit ?, ? 
2018-07-24 22:36:20 -==> Parameters: 0(Integer), 12(Integer)
2018-07-24 22:36:20 -<==      Total: 4
2018-07-24 22:36:20 -==>  Preparing: select count(*) from sys_file 
2018-07-24 22:36:20 -==> Parameters: 
2018-07-24 22:36:20 -<==      Total: 1
2018-07-24 22:36:20 -耗时 : 11
2018-07-24 22:36:20 -返回值 : com.bootdo.common.utils.PageUtils@341dfebd
2018-07-24 22:36:22 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:22 -HTTP METHOD : GET
2018-07-24 22:36:22 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:22 -参数 : [{limit=12, offset=0, type=1}]
2018-07-24 22:36:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:22 -==> Parameters: 1(String), 0(Integer), 12(Integer)
2018-07-24 22:36:22 -<==      Total: 0
2018-07-24 22:36:22 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:22 -==> Parameters: 1(String)
2018-07-24 22:36:22 -<==      Total: 1
2018-07-24 22:36:22 -耗时 : 6
2018-07-24 22:36:22 -返回值 : com.bootdo.common.utils.PageUtils@7d83f6e9
2018-07-24 22:36:23 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:23 -HTTP METHOD : GET
2018-07-24 22:36:23 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:23 -参数 : [{limit=12, offset=0, type=2}]
2018-07-24 22:36:23 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:23 -==> Parameters: 2(String), 0(Integer), 12(Integer)
2018-07-24 22:36:23 -<==      Total: 0
2018-07-24 22:36:23 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:23 -==> Parameters: 2(String)
2018-07-24 22:36:23 -<==      Total: 1
2018-07-24 22:36:23 -耗时 : 4
2018-07-24 22:36:23 -返回值 : com.bootdo.common.utils.PageUtils@71be4ba3
2018-07-24 22:36:24 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:24 -HTTP METHOD : GET
2018-07-24 22:36:24 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:24 -参数 : [{limit=12, offset=0, type=2}]
2018-07-24 22:36:24 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:24 -==> Parameters: 2(String), 0(Integer), 12(Integer)
2018-07-24 22:36:24 -<==      Total: 0
2018-07-24 22:36:24 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:24 -==> Parameters: 2(String)
2018-07-24 22:36:24 -<==      Total: 1
2018-07-24 22:36:24 -耗时 : 4
2018-07-24 22:36:24 -返回值 : com.bootdo.common.utils.PageUtils@69a7ecd9
2018-07-24 22:36:27 -请求地址 : http://localhost/common/sysFile/upload
2018-07-24 22:36:27 -HTTP METHOD : POST
2018-07-24 22:36:27 -CLASS_METHOD : com.bootdo.common.controller.FileController.upload
2018-07-24 22:36:27 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@f581aa7, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@4efb2a4]
2018-07-24 22:36:27 -==>  Preparing: insert into sys_file ( `type`, `url`, `create_date` ) values ( ?, ?, ? ) 
2018-07-24 22:36:27 -==> Parameters: 0(Integer), /files/988f9fa0-b766-4a92-90b5-53dd342e10c9.jpg(String), 2018-07-24 22:36:27.915(Timestamp)
2018-07-24 22:36:27 -<==    Updates: 1
2018-07-24 22:36:27 -耗时 : 24
2018-07-24 22:36:27 -返回值 : {msg=操作成功, fileName=/files/988f9fa0-b766-4a92-90b5-53dd342e10c9.jpg, code=0}
2018-07-24 22:36:27 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:27 -HTTP METHOD : GET
2018-07-24 22:36:27 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:27 -参数 : [{limit=12, offset=0, type=2}]
2018-07-24 22:36:27 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:27 -==> Parameters: 2(String), 0(Integer), 12(Integer)
2018-07-24 22:36:27 -<==      Total: 0
2018-07-24 22:36:27 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:27 -==> Parameters: 2(String)
2018-07-24 22:36:27 -<==      Total: 1
2018-07-24 22:36:27 -耗时 : 3
2018-07-24 22:36:27 -返回值 : com.bootdo.common.utils.PageUtils@46f6b902
2018-07-24 22:36:30 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:30 -HTTP METHOD : GET
2018-07-24 22:36:30 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:30 -参数 : [{limit=12, offset=0, type=1}]
2018-07-24 22:36:30 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:30 -==> Parameters: 1(String), 0(Integer), 12(Integer)
2018-07-24 22:36:30 -<==      Total: 0
2018-07-24 22:36:30 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:30 -==> Parameters: 1(String)
2018-07-24 22:36:30 -<==      Total: 1
2018-07-24 22:36:30 -耗时 : 5
2018-07-24 22:36:30 -返回值 : com.bootdo.common.utils.PageUtils@dc530ce
2018-07-24 22:36:31 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:31 -HTTP METHOD : GET
2018-07-24 22:36:31 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:31 -参数 : [{limit=12, offset=0, type=2}]
2018-07-24 22:36:31 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:31 -==> Parameters: 2(String), 0(Integer), 12(Integer)
2018-07-24 22:36:31 -<==      Total: 0
2018-07-24 22:36:31 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:31 -==> Parameters: 2(String)
2018-07-24 22:36:31 -<==      Total: 1
2018-07-24 22:36:31 -耗时 : 4
2018-07-24 22:36:31 -返回值 : com.bootdo.common.utils.PageUtils@18d794fe
2018-07-24 22:36:32 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:32 -HTTP METHOD : GET
2018-07-24 22:36:32 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:32 -参数 : [{limit=12, offset=0, type=}]
2018-07-24 22:36:32 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file order by id desc limit ?, ? 
2018-07-24 22:36:32 -==> Parameters: 0(Integer), 12(Integer)
2018-07-24 22:36:32 -<==      Total: 5
2018-07-24 22:36:32 -==>  Preparing: select count(*) from sys_file 
2018-07-24 22:36:32 -==> Parameters: 
2018-07-24 22:36:32 -<==      Total: 1
2018-07-24 22:36:32 -耗时 : 5
2018-07-24 22:36:32 -返回值 : com.bootdo.common.utils.PageUtils@149ca4dd
2018-07-24 22:36:33 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:33 -HTTP METHOD : GET
2018-07-24 22:36:33 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:33 -参数 : [{limit=12, offset=0, type=0}]
2018-07-24 22:36:33 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:33 -==> Parameters: 0(String), 0(Integer), 12(Integer)
2018-07-24 22:36:33 -<==      Total: 5
2018-07-24 22:36:33 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:33 -==> Parameters: 0(String)
2018-07-24 22:36:33 -<==      Total: 1
2018-07-24 22:36:33 -耗时 : 6
2018-07-24 22:36:33 -返回值 : com.bootdo.common.utils.PageUtils@6d99475f
2018-07-24 22:36:34 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:34 -HTTP METHOD : GET
2018-07-24 22:36:34 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:34 -参数 : [{limit=12, offset=0, type=}]
2018-07-24 22:36:34 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file order by id desc limit ?, ? 
2018-07-24 22:36:34 -==> Parameters: 0(Integer), 12(Integer)
2018-07-24 22:36:34 -<==      Total: 5
2018-07-24 22:36:34 -==>  Preparing: select count(*) from sys_file 
2018-07-24 22:36:34 -==> Parameters: 
2018-07-24 22:36:34 -<==      Total: 1
2018-07-24 22:36:34 -耗时 : 9
2018-07-24 22:36:34 -返回值 : com.bootdo.common.utils.PageUtils@2700de1c
2018-07-24 22:36:35 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:35 -HTTP METHOD : GET
2018-07-24 22:36:35 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:35 -参数 : [{limit=12, offset=0, type=0}]
2018-07-24 22:36:35 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:35 -==> Parameters: 0(String), 0(Integer), 12(Integer)
2018-07-24 22:36:35 -<==      Total: 5
2018-07-24 22:36:35 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:35 -==> Parameters: 0(String)
2018-07-24 22:36:35 -<==      Total: 1
2018-07-24 22:36:35 -耗时 : 6
2018-07-24 22:36:35 -返回值 : com.bootdo.common.utils.PageUtils@3f85bc16
2018-07-24 22:36:35 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:35 -HTTP METHOD : GET
2018-07-24 22:36:35 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:35 -参数 : [{limit=12, offset=0, type=1}]
2018-07-24 22:36:35 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:35 -==> Parameters: 1(String), 0(Integer), 12(Integer)
2018-07-24 22:36:35 -<==      Total: 0
2018-07-24 22:36:35 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:35 -==> Parameters: 1(String)
2018-07-24 22:36:35 -<==      Total: 1
2018-07-24 22:36:35 -耗时 : 5
2018-07-24 22:36:35 -返回值 : com.bootdo.common.utils.PageUtils@7061a4ab
2018-07-24 22:36:36 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:36 -HTTP METHOD : GET
2018-07-24 22:36:36 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:36 -参数 : [{limit=12, offset=0, type=2}]
2018-07-24 22:36:36 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:36 -==> Parameters: 2(String), 0(Integer), 12(Integer)
2018-07-24 22:36:36 -<==      Total: 0
2018-07-24 22:36:36 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:36 -==> Parameters: 2(String)
2018-07-24 22:36:36 -<==      Total: 1
2018-07-24 22:36:36 -耗时 : 5
2018-07-24 22:36:36 -返回值 : com.bootdo.common.utils.PageUtils@25c77609
2018-07-24 22:36:36 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:36 -HTTP METHOD : GET
2018-07-24 22:36:36 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:36 -参数 : [{limit=12, offset=0, type=3}]
2018-07-24 22:36:36 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:36 -==> Parameters: 3(String), 0(Integer), 12(Integer)
2018-07-24 22:36:36 -<==      Total: 0
2018-07-24 22:36:36 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:36 -==> Parameters: 3(String)
2018-07-24 22:36:36 -<==      Total: 1
2018-07-24 22:36:36 -耗时 : 5
2018-07-24 22:36:36 -返回值 : com.bootdo.common.utils.PageUtils@47f93d55
2018-07-24 22:36:36 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:36:36 -HTTP METHOD : GET
2018-07-24 22:36:36 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:36:36 -参数 : [{limit=12, offset=0, type=99}]
2018-07-24 22:36:36 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file WHERE type = ? order by id desc limit ?, ? 
2018-07-24 22:36:36 -==> Parameters: 99(String), 0(Integer), 12(Integer)
2018-07-24 22:36:36 -<==      Total: 0
2018-07-24 22:36:36 -==>  Preparing: select count(*) from sys_file WHERE type = ? 
2018-07-24 22:36:36 -==> Parameters: 99(String)
2018-07-24 22:36:36 -<==      Total: 1
2018-07-24 22:36:36 -耗时 : 5
2018-07-24 22:36:36 -返回值 : com.bootdo.common.utils.PageUtils@30a018dd
2018-07-24 22:37:04 -请求地址 : http://localhost/sys/user/personal
2018-07-24 22:37:04 -HTTP METHOD : GET
2018-07-24 22:37:04 -CLASS_METHOD : com.bootdo.system.controller.UserController.personal
2018-07-24 22:37:04 -参数 : [{}]
2018-07-24 22:37:04 -==>  Preparing: select role_id from sys_user_role where user_id=? 
2018-07-24 22:37:04 -==> Parameters: 1(Long)
2018-07-24 22:37:04 -<==      Total: 1
2018-07-24 22:37:04 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user where user_id = ? 
2018-07-24 22:37:04 -==> Parameters: 1(Long)
2018-07-24 22:37:04 -<==      Total: 1
2018-07-24 22:37:04 -==>  Preparing: select `dept_id`,`parent_id`,`name`,`order_num`,`del_flag` from sys_dept where dept_id = ? 
2018-07-24 22:37:04 -==> Parameters: 6(Long)
2018-07-24 22:37:04 -<==      Total: 1
2018-07-24 22:37:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 22:37:04 -==> Parameters: hobby(String)
2018-07-24 22:37:04 -<==      Total: 2
2018-07-24 22:37:04 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict WHERE type = ? order by id desc 
2018-07-24 22:37:04 -==> Parameters: sex(String)
2018-07-24 22:37:04 -<==      Total: 2
2018-07-24 22:37:04 -耗时 : 17
2018-07-24 22:37:04 -返回值 : system/user/personal
2018-07-24 22:37:43 -请求地址 : http://localhost/sys/user/uploadImg
2018-07-24 22:37:43 -HTTP METHOD : POST
2018-07-24 22:37:43 -CLASS_METHOD : com.bootdo.system.controller.UserController.uploadImg
2018-07-24 22:37:43 -参数 : [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@65e00319, {"x":7.032967032967009,"y":13.186813186813188,"height":1556.923076923077,"width":1556.923076923077,"rotate":0}, org.springframework.web.multipart.support.StandardMultipartHttpServletRequest@5a2a16f4]
2018-07-24 22:37:44 -==>  Preparing: insert into sys_file ( `type`, `url`, `create_date` ) values ( ?, ?, ? ) 
2018-07-24 22:37:44 -==> Parameters: 0(Integer), /files/170b11f7-494e-415d-bcdd-53c2697e228c.jpg(String), 2018-07-24 22:37:43.028(Timestamp)
2018-07-24 22:37:44 -<==    Updates: 1
2018-07-24 22:37:44 -==>  Preparing: update sys_user SET `pic_id` = ? where user_id = ? 
2018-07-24 22:37:44 -==> Parameters: 146(Long), 1(Long)
2018-07-24 22:37:44 -<==    Updates: 1
2018-07-24 22:37:44 -耗时 : 1872
2018-07-24 22:37:44 -返回值 : {msg=操作成功, code=0, url=/files/170b11f7-494e-415d-bcdd-53c2697e228c.jpg}
2018-07-24 22:37:53 -请求地址 : http://localhost/index
2018-07-24 22:37:53 -HTTP METHOD : GET
2018-07-24 22:37:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 22:37:53 -参数 : [{}]
2018-07-24 22:37:53 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 22:37:53 -==> Parameters: 1(Long)
2018-07-24 22:37:53 -<==      Total: 27
2018-07-24 22:37:53 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 22:37:53 -==> Parameters: 138(Long)
2018-07-24 22:37:53 -<==      Total: 0
2018-07-24 22:37:53 -耗时 : 12
2018-07-24 22:37:53 -返回值 : index_v1
2018-07-24 22:37:53 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:37:53 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 12(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 22:37:53.411(Timestamp)
2018-07-24 22:37:53 -<==    Updates: 1
2018-07-24 22:37:53 -请求地址 : http://localhost/main
2018-07-24 22:37:53 -HTTP METHOD : GET
2018-07-24 22:37:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:37:53 -参数 : []
2018-07-24 22:37:53 -耗时 : 0
2018-07-24 22:37:53 -返回值 : main
2018-07-24 22:37:53 -请求地址 : http://localhost/oa/notify/message
2018-07-24 22:37:53 -HTTP METHOD : GET
2018-07-24 22:37:53 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 22:37:53 -参数 : []
2018-07-24 22:37:53 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:37:53 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 22:37:53 -<==      Total: 0
2018-07-24 22:37:53 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:37:53 -==> Parameters: 1(Long), 0(String)
2018-07-24 22:37:53 -<==      Total: 1
2018-07-24 22:37:53 -耗时 : 5
2018-07-24 22:37:53 -返回值 : com.bootdo.common.utils.PageUtils@16491d77
2018-07-24 22:37:53 -请求地址 : http://localhost/main
2018-07-24 22:37:53 -HTTP METHOD : GET
2018-07-24 22:37:53 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:37:53 -参数 : []
2018-07-24 22:37:53 -耗时 : 0
2018-07-24 22:37:53 -返回值 : main
2018-07-24 22:37:55 -请求地址 : http://localhost/
2018-07-24 22:37:55 -HTTP METHOD : GET
2018-07-24 22:37:55 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 22:37:55 -参数 : [{}]
2018-07-24 22:37:55 -耗时 : 0
2018-07-24 22:37:55 -返回值 : redirect:/blog
2018-07-24 22:37:55 -请求地址 : http://localhost/blog
2018-07-24 22:37:55 -HTTP METHOD : GET
2018-07-24 22:37:55 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 22:37:55 -参数 : []
2018-07-24 22:37:55 -耗时 : 1
2018-07-24 22:37:55 -返回值 : blog/index/main
2018-07-24 22:37:55 -请求地址 : http://localhost/blog/open/list
2018-07-24 22:37:55 -HTTP METHOD : GET
2018-07-24 22:37:55 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 22:37:55 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 22:37:55 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 22:37:55 -==> Parameters: article(String)
2018-07-24 22:37:55 -<==      Total: 10
2018-07-24 22:37:55 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 22:37:55 -==> Parameters: article(String)
2018-07-24 22:37:55 -<==      Total: 1
2018-07-24 22:37:55 -耗时 : 15
2018-07-24 22:37:55 -返回值 : com.bootdo.common.utils.PageUtils@4a514bd5
2018-07-24 22:37:57 -请求地址 : http://localhost/login
2018-07-24 22:37:57 -HTTP METHOD : GET
2018-07-24 22:37:57 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2018-07-24 22:37:57 -参数 : []
2018-07-24 22:37:57 -耗时 : 1
2018-07-24 22:37:57 -返回值 : login
2018-07-24 22:37:58 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 22:37:58 -==> Parameters: admin(String)
2018-07-24 22:37:58 -<==      Total: 1
2018-07-24 22:37:58 -请求地址 : http://localhost/login
2018-07-24 22:37:58 -HTTP METHOD : POST
2018-07-24 22:37:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 22:37:58 -参数 : [admin, 111111]
2018-07-24 22:37:58 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 22:37:58 -==> Parameters: admin(String)
2018-07-24 22:37:58 -<==      Total: 1
2018-07-24 22:37:58 -耗时 : 3
2018-07-24 22:37:58 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:37:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:37:58 -==> Parameters: 1(Long), admin(String), 登录(String), 3(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 22:37:58.385(Timestamp)
2018-07-24 22:37:58 -<==    Updates: 1
2018-07-24 22:37:58 -请求地址 : http://localhost/index
2018-07-24 22:37:58 -HTTP METHOD : GET
2018-07-24 22:37:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 22:37:58 -参数 : [{}]
2018-07-24 22:37:58 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 22:37:58 -==> Parameters: 1(Long)
2018-07-24 22:37:58 -<==      Total: 27
2018-07-24 22:37:58 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 22:37:58 -==> Parameters: 146(Long)
2018-07-24 22:37:58 -<==      Total: 1
2018-07-24 22:37:58 -耗时 : 7
2018-07-24 22:37:58 -返回值 : index_v1
2018-07-24 22:37:58 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:37:58 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 7(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 22:37:58.406(Timestamp)
2018-07-24 22:37:58 -<==    Updates: 1
2018-07-24 22:37:58 -请求地址 : http://localhost/main
2018-07-24 22:37:58 -HTTP METHOD : GET
2018-07-24 22:37:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:37:58 -参数 : []
2018-07-24 22:37:58 -耗时 : 0
2018-07-24 22:37:58 -返回值 : main
2018-07-24 22:37:58 -请求地址 : http://localhost/oa/notify/message
2018-07-24 22:37:58 -HTTP METHOD : GET
2018-07-24 22:37:58 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 22:37:58 -参数 : []
2018-07-24 22:37:58 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:37:58 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 22:37:58 -<==      Total: 0
2018-07-24 22:37:58 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:37:58 -==> Parameters: 1(Long), 0(String)
2018-07-24 22:37:58 -<==      Total: 1
2018-07-24 22:37:58 -耗时 : 3
2018-07-24 22:37:58 -返回值 : com.bootdo.common.utils.PageUtils@44e7211e
2018-07-24 22:37:58 -请求地址 : http://localhost/main
2018-07-24 22:37:58 -HTTP METHOD : GET
2018-07-24 22:37:58 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:37:58 -参数 : []
2018-07-24 22:37:58 -耗时 : 1
2018-07-24 22:37:58 -返回值 : main
2018-07-24 22:38:08 -请求地址 : http://localhost/main
2018-07-24 22:38:08 -HTTP METHOD : GET
2018-07-24 22:38:08 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:38:08 -参数 : []
2018-07-24 22:38:08 -耗时 : 1
2018-07-24 22:38:08 -返回值 : main
2018-07-24 22:38:20 -请求地址 : http://localhost/main
2018-07-24 22:38:20 -HTTP METHOD : GET
2018-07-24 22:38:20 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:38:20 -参数 : []
2018-07-24 22:38:20 -耗时 : 0
2018-07-24 22:38:20 -返回值 : main
2018-07-24 22:38:24 -请求地址 : http://localhost/main
2018-07-24 22:38:24 -HTTP METHOD : GET
2018-07-24 22:38:24 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:38:24 -参数 : []
2018-07-24 22:38:24 -耗时 : 0
2018-07-24 22:38:24 -返回值 : main
2018-07-24 22:38:43 -请求地址 : http://localhost/index
2018-07-24 22:38:43 -HTTP METHOD : GET
2018-07-24 22:38:43 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 22:38:43 -参数 : [{}]
2018-07-24 22:38:43 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 22:38:43 -==> Parameters: 1(Long)
2018-07-24 22:38:43 -<==      Total: 27
2018-07-24 22:38:43 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 22:38:43 -==> Parameters: 146(Long)
2018-07-24 22:38:43 -<==      Total: 1
2018-07-24 22:38:43 -耗时 : 8
2018-07-24 22:38:43 -返回值 : index_v1
2018-07-24 22:38:43 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:38:43 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 8(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 22:38:43.94(Timestamp)
2018-07-24 22:38:43 -<==    Updates: 1
2018-07-24 22:38:44 -请求地址 : http://localhost/main
2018-07-24 22:38:44 -HTTP METHOD : GET
2018-07-24 22:38:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:38:44 -参数 : []
2018-07-24 22:38:44 -耗时 : 1
2018-07-24 22:38:44 -返回值 : main
2018-07-24 22:38:44 -请求地址 : http://localhost/oa/notify/message
2018-07-24 22:38:44 -HTTP METHOD : GET
2018-07-24 22:38:44 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 22:38:44 -参数 : []
2018-07-24 22:38:44 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:38:44 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 22:38:44 -<==      Total: 0
2018-07-24 22:38:44 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:38:44 -==> Parameters: 1(Long), 0(String)
2018-07-24 22:38:44 -<==      Total: 1
2018-07-24 22:38:44 -耗时 : 4
2018-07-24 22:38:44 -返回值 : com.bootdo.common.utils.PageUtils@7a7a6b3f
2018-07-24 22:38:44 -请求地址 : http://localhost/main
2018-07-24 22:38:44 -HTTP METHOD : GET
2018-07-24 22:38:44 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:38:44 -参数 : []
2018-07-24 22:38:44 -耗时 : 0
2018-07-24 22:38:44 -返回值 : main
2018-07-24 22:38:47 -请求地址 : http://localhost/main
2018-07-24 22:38:47 -HTTP METHOD : GET
2018-07-24 22:38:47 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:38:47 -参数 : []
2018-07-24 22:38:47 -耗时 : 1
2018-07-24 22:38:47 -返回值 : main
2018-07-24 22:38:49 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2018-07-24 22:38:49 -==> Parameters: 1(Long)
2018-07-24 22:38:49 -<==      Total: 47
2018-07-24 22:38:49 -请求地址 : http://localhost/common/dict
2018-07-24 22:38:49 -HTTP METHOD : GET
2018-07-24 22:38:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.dict
2018-07-24 22:38:49 -参数 : []
2018-07-24 22:38:49 -耗时 : 1
2018-07-24 22:38:49 -返回值 : common/dict/dict
2018-07-24 22:38:49 -请求地址 : http://localhost/common/dict/type
2018-07-24 22:38:49 -HTTP METHOD : GET
2018-07-24 22:38:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.listType
2018-07-24 22:38:49 -参数 : []
2018-07-24 22:38:49 -==>  Preparing: select distinct `type` , description from sys_dict 
2018-07-24 22:38:49 -==> Parameters: 
2018-07-24 22:38:49 -<==      Total: 31
2018-07-24 22:38:49 -耗时 : 3
2018-07-24 22:38:49 -返回值 : [DictDO{id=null, name='null', value='null', type='del_flag', description='删除标记', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='show_hide', description='显示/隐藏', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='yes_no', description='是/否', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='color', description='颜色值', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='theme', description='主题方案', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_area_type', description='区域类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_type', description='机构类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_common', description='快捷通用部门', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_grade', description='机构等级', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_data_scope', description='数据范围', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_user_type', description='用户类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_theme', description='站点主题', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_module', description='栏目模型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_show_modes', description='展现方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_del_flag', description='内容状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_posid', description='推荐位', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_guestbook', description='留言板分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_leave_type', description='请假类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_log_type', description='日志类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='act_type', description='流程类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='act_category', description='流程分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_category', description='代码生成分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_query_type', description='查询方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_show_type', description='字段生成方案', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_java_type', description='Java类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sex', description='性别', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_type', description='通知通告类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_status', description='通知通告状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_read', description='通知通告状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='blog_type', description='博客类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='hobby', description='爱好', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}]
2018-07-24 22:38:49 -请求地址 : http://localhost/common/dict/list
2018-07-24 22:38:49 -HTTP METHOD : GET
2018-07-24 22:38:49 -CLASS_METHOD : com.bootdo.common.controller.DictController.list
2018-07-24 22:38:49 -参数 : [{limit=10, offset=0}]
2018-07-24 22:38:49 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict order by id desc limit ?, ? 
2018-07-24 22:38:49 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:38:49 -<==      Total: 10
2018-07-24 22:38:49 -==>  Preparing: select count(*) from sys_dict 
2018-07-24 22:38:49 -==> Parameters: 
2018-07-24 22:38:49 -<==      Total: 1
2018-07-24 22:38:49 -耗时 : 4
2018-07-24 22:38:49 -返回值 : com.bootdo.common.utils.PageUtils@48747857
2018-07-24 22:39:08 -请求地址 : http://localhost/common/dict/add
2018-07-24 22:39:08 -HTTP METHOD : GET
2018-07-24 22:39:08 -CLASS_METHOD : com.bootdo.common.controller.DictController.add
2018-07-24 22:39:08 -参数 : []
2018-07-24 22:39:08 -耗时 : 1
2018-07-24 22:39:08 -返回值 : common/dict/add
2018-07-24 22:39:17 -请求地址 : http://localhost/common/dict/edit/122
2018-07-24 22:39:17 -HTTP METHOD : GET
2018-07-24 22:39:17 -CLASS_METHOD : com.bootdo.common.controller.DictController.edit
2018-07-24 22:39:17 -参数 : [122, {}]
2018-07-24 22:39:17 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict where id = ? 
2018-07-24 22:39:17 -==> Parameters: 122(Long)
2018-07-24 22:39:17 -<==      Total: 1
2018-07-24 22:39:17 -耗时 : 4
2018-07-24 22:39:17 -返回值 : common/dict/edit
2018-07-24 22:39:33 -请求地址 : http://localhost/common/sysFile
2018-07-24 22:39:33 -HTTP METHOD : GET
2018-07-24 22:39:33 -CLASS_METHOD : com.bootdo.common.controller.FileController.sysFile
2018-07-24 22:39:33 -参数 : [{}]
2018-07-24 22:39:33 -耗时 : 0
2018-07-24 22:39:33 -返回值 : common/file/file
2018-07-24 22:39:33 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:39:33 -HTTP METHOD : GET
2018-07-24 22:39:33 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:39:33 -参数 : [{limit=12, offset=0, type=}]
2018-07-24 22:39:33 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file order by id desc limit ?, ? 
2018-07-24 22:39:33 -==> Parameters: 0(Integer), 12(Integer)
2018-07-24 22:39:33 -<==      Total: 6
2018-07-24 22:39:33 -==>  Preparing: select count(*) from sys_file 
2018-07-24 22:39:33 -==> Parameters: 
2018-07-24 22:39:33 -<==      Total: 1
2018-07-24 22:39:33 -耗时 : 3
2018-07-24 22:39:33 -返回值 : com.bootdo.common.utils.PageUtils@683dab85
2018-07-24 22:39:40 -请求地址 : http://localhost/sys/menu/
2018-07-24 22:39:40 -HTTP METHOD : GET
2018-07-24 22:39:40 -CLASS_METHOD : com.bootdo.system.controller.MenuController.menu
2018-07-24 22:39:40 -参数 : [{}]
2018-07-24 22:39:40 -耗时 : 0
2018-07-24 22:39:40 -返回值 : system/menu/menu
2018-07-24 22:39:40 -请求地址 : http://localhost/sys/menu/list
2018-07-24 22:39:40 -HTTP METHOD : GET
2018-07-24 22:39:40 -CLASS_METHOD : com.bootdo.system.controller.MenuController.list
2018-07-24 22:39:40 -参数 : [{sort=order_num}]
2018-07-24 22:39:40 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by order_num 
2018-07-24 22:39:40 -==> Parameters: 
2018-07-24 22:39:40 -<==      Total: 61
2018-07-24 22:39:40 -耗时 : 9
2018-07-24 22:39:40 -返回值 : [MenuDO{menuId=51, parentId=50, name='新增', url='', perms='blog:bContent:add', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=55, parentId=7, name='编辑', url='', perms='sys:role:edit', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=56, parentId=7, name='删除', url='', perms='sys:role:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=58, parentId=50, name='编辑', url='', perms='blog:bContent:edit', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=59, parentId=50, name='删除', url='', perms='blog:bContent:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=60, parentId=50, name='批量删除', url='', perms='blog:bContent:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=61, parentId=2, name='批量删除', url='', perms='sys:menu:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=62, parentId=7, name='批量删除', url='', perms='sys:role:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=85, parentId=84, name='通知公告', url='oa/notify', perms='oa:notify:notify', type=1, icon='fa fa-pencil-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=88, parentId=85, name='删除', url='oa/notify/remove', perms='oa:notify:remove', type=2, icon='fa fa-minus', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=89, parentId=85, name='批量删除', url='oa/notify/batchRemove', perms='oa:notify:batchRemove', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=90, parentId=84, name='我的通知', url='oa/notify/selfNotify', perms='', type=1, icon='fa fa-envelope-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=92, parentId=91, name='在线用户', url='sys/online', perms='', type=1, icon='fa fa-user', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=94, parentId=93, name='模型管理', url='activiti/model', perms='', type=1, icon='fa fa-sort-amount-asc', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=95, parentId=94, name='全部权限', url='', perms='activiti:model', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=96, parentId=93, name='流程管理', url='activiti/process', perms='', type=1, icon='fa fa-flag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=98, parentId=97, name='百度chart', url='/chart/graph_echarts.html', perms='', type=1, icon='fa fa-area-chart', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=99, parentId=96, name='所有权限', url='', perms='act:process', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=101, parentId=93, name='待办任务', url='activiti/task/todo', perms='', type=1, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=1, parentId=0, name='基础管理', url='', perms='', type=0, icon='fa fa-bars', orderNum=0, gmtCreate=Wed Aug 09 22:49:47 CST 2017, gmtModified=null}, MenuDO{menuId=6, parentId=3, name='用户管理', url='sys/user/', perms='sys:user:user', type=1, icon='fa fa-user', orderNum=0, gmtCreate=Thu Aug 10 14:12:11 CST 2017, gmtModified=null}, MenuDO{menuId=12, parentId=6, name='新增', url='', perms='sys:user:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:51:35 CST 2017, gmtModified=null}, MenuDO{menuId=13, parentId=6, name='编辑', url='', perms='sys:user:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:52:06 CST 2017, gmtModified=null}, MenuDO{menuId=14, parentId=6, name='删除', url='null', perms='sys:user:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 10:52:24 CST 2017, gmtModified=null}, MenuDO{menuId=15, parentId=7, name='新增', url='', perms='sys:role:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:56:37 CST 2017, gmtModified=null}, MenuDO{menuId=20, parentId=2, name='新增', url='', perms='sys:menu:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:32 CST 2017, gmtModified=null}, MenuDO{menuId=21, parentId=2, name='编辑', url='', perms='sys:menu:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:56 CST 2017, gmtModified=null}, MenuDO{menuId=22, parentId=2, name='删除', url='', perms='sys:menu:remove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 11:00:26 CST 2017, gmtModified=null}, MenuDO{menuId=24, parentId=6, name='批量删除', url='', perms='sys:user:batchRemove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:27:18 CST 2017, gmtModified=null}, MenuDO{menuId=25, parentId=6, name='停用', url='null', perms='sys:user:disable', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 17:27:43 CST 2017, gmtModified=null}, MenuDO{menuId=26, parentId=6, name='重置密码', url='', perms='sys:user:resetPwd', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:28:34 CST 2017, gmtModified=null}, MenuDO{menuId=27, parentId=91, name='系统日志', url='common/log', perms='common:log', type=1, icon='fa fa-warning', orderNum=0, gmtCreate=Mon Aug 14 22:11:53 CST 2017, gmtModified=null}, MenuDO{menuId=28, parentId=27, name='刷新', url='null', perms='sys:log:list', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:22 CST 2017, gmtModified=null}, MenuDO{menuId=29, parentId=27, name='删除', url='null', perms='sys:log:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:43 CST 2017, gmtModified=null}, MenuDO{menuId=30, parentId=27, name='清空', url='null', perms='sys:log:clear', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:31:02 CST 2017, gmtModified=null}, MenuDO{menuId=68, parentId=49, name='发布文章', url='/blog/bContent/add', perms='blog:bContent:add', type=1, icon='fa fa-edit', orderNum=0, gmtCreate=null, gmtModified=null}, MenuDO{menuId=3, parentId=0, name='系统管理', url='null', perms='null', type=0, icon='fa fa-desktop', orderNum=1, gmtCreate=Wed Aug 09 23:06:55 CST 2017, gmtModified=Mon Aug 14 14:13:43 CST 2017}, MenuDO{menuId=7, parentId=3, name='角色管理', url='sys/role', perms='sys:role:role', type=1, icon='fa fa-paw', orderNum=1, gmtCreate=Thu Aug 10 14:13:19 CST 2017, gmtModified=null}, MenuDO{menuId=50, parentId=49, name='文章列表', url='blog/bContent', perms='blog:bContent:bContent', type=1, icon='fa fa-file-image-o', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=57, parentId=91, name='运行监控', url='/druid/index.html', perms='', type=1, icon='fa fa-caret-square-o-right', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=74, parentId=73, name='增加', url='/system/sysDept/add', perms='system:sysDept:add', type=2, icon='null', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=78, parentId=1, name='数据字典', url='/common/dict', perms='common:dict:dict', type=1, icon='fa fa-book', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=86, parentId=85, name='新增', url='oa/notify/add', perms='oa:notify:add', type=2, icon='fa fa-plus', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=2, parentId=3, name='系统菜单', url='sys/menu/', perms='sys:menu:menu', type=1, icon='fa fa-th-list', orderNum=2, gmtCreate=Wed Aug 09 22:55:15 CST 2017, gmtModified=null}, MenuDO{menuId=71, parentId=1, name='文件管理', url='/common/sysFile', perms='common:sysFile:sysFile', type=1, icon='fa fa-folder-open', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=75, parentId=73, name='刪除', url='system/sysDept/remove', perms='system:sysDept:remove', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=79, parentId=78, name='增加', url='/common/dict/add', perms='common:dict:add', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=80, parentId=78, name='编辑', url='/common/dict/edit', perms='common:dict:edit', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=87, parentId=85, name='编辑', url='oa/notify/edit', perms='oa:notify:edit', type=2, icon='fa fa-pencil-square-o', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=48, parentId=77, name='代码生成', url='common/generator', perms='common:generator', type=1, icon='fa fa-code', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=73, parentId=3, name='部门管理', url='/system/sysDept', perms='system:sysDept:sysDept', type=1, icon='fa fa-users', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=76, parentId=73, name='编辑', url='/system/sysDept/edit', perms='system:sysDept:edit', type=2, icon='null', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=81, parentId=78, name='删除', url='/common/dict/remove', perms='common:dict:remove', type=2, icon='', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=72, parentId=77, name='计划任务', url='common/job', perms='common:taskScheduleJob', type=1, icon='fa fa-hourglass-1', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=77, parentId=0, name='系统工具', url='', perms='', type=0, icon='fa fa-gear', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=83, parentId=78, name='批量删除', url='/common/dict/batchRemove', perms='common:dict:batchRemove', type=2, icon='', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=84, parentId=0, name='办公管理', url='', perms='', type=0, icon='fa fa-laptop', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=91, parentId=0, name='系统监控', url='', perms='', type=0, icon='fa fa-video-camera', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=49, parentId=0, name='博客管理', url='', perms='', type=0, icon='fa fa-rss', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=93, parentId=0, name='工作流程', url='', perms='', type=0, icon='fa fa-print', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=97, parentId=0, name='图表管理', url='', perms='', type=0, icon='fa fa-bar-chart', orderNum=7, gmtCreate=null, gmtModified=null}]
2018-07-24 22:39:55 -请求地址 : http://localhost/sys/menu/add/1
2018-07-24 22:39:55 -HTTP METHOD : GET
2018-07-24 22:39:55 -CLASS_METHOD : com.bootdo.system.controller.MenuController.add
2018-07-24 22:39:55 -参数 : [{}, 1]
2018-07-24 22:39:55 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu where menu_id = ? 
2018-07-24 22:39:55 -==> Parameters: 1(Long)
2018-07-24 22:39:55 -<==      Total: 1
2018-07-24 22:39:55 -耗时 : 4
2018-07-24 22:39:55 -返回值 : system/menu/add
2018-07-24 22:39:55 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:39:55 -==> Parameters: 1(Long), admin(String), 添加菜单(String), 4(Integer), com.bootdo.system.controller.MenuController.add()(String), null, 127.0.0.1(String), 2018-07-24 22:39:55.131(Timestamp)
2018-07-24 22:39:55 -<==    Updates: 1
2018-07-24 22:40:20 -请求地址 : http://localhost/sys/menu/add/1
2018-07-24 22:40:20 -HTTP METHOD : GET
2018-07-24 22:40:20 -CLASS_METHOD : com.bootdo.system.controller.MenuController.add
2018-07-24 22:40:20 -参数 : [{}, 1]
2018-07-24 22:40:20 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu where menu_id = ? 
2018-07-24 22:40:20 -==> Parameters: 1(Long)
2018-07-24 22:40:20 -<==      Total: 1
2018-07-24 22:40:20 -耗时 : 4
2018-07-24 22:40:20 -返回值 : system/menu/add
2018-07-24 22:40:20 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:40:20 -==> Parameters: 1(Long), admin(String), 添加菜单(String), 5(Integer), com.bootdo.system.controller.MenuController.add()(String), null, 127.0.0.1(String), 2018-07-24 22:40:20.29(Timestamp)
2018-07-24 22:40:20 -<==    Updates: 1
2018-07-24 22:41:13 -请求地址 : http://localhost/sys/menu/save
2018-07-24 22:41:13 -HTTP METHOD : POST
2018-07-24 22:41:13 -CLASS_METHOD : com.bootdo.system.controller.MenuController.save
2018-07-24 22:41:13 -参数 : [MenuDO{menuId=null, parentId=1, name='数据字典类型', url='', perms='', type=1, icon='fa fa-hashtag', orderNum=null, gmtCreate=null, gmtModified=null}]
2018-07-24 22:41:13 -==>  Preparing: insert into sys_menu ( `parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`, `gmt_create`, `gmt_modified` ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:13 -==> Parameters: 1(Long), 数据字典类型(String), (String), (String), 1(Integer), fa fa-hashtag(String), null, null, null
2018-07-24 22:41:13 -<==    Updates: 1
2018-07-24 22:41:13 -耗时 : 7
2018-07-24 22:41:13 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:41:13 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:13 -==> Parameters: 1(Long), admin(String), 保存菜单(String), 8(Integer), com.bootdo.system.controller.MenuController.save()(String), null, 127.0.0.1(String), 2018-07-24 22:41:13.944(Timestamp)
2018-07-24 22:41:13 -<==    Updates: 1
2018-07-24 22:41:13 -请求地址 : http://localhost/sys/menu/list
2018-07-24 22:41:13 -HTTP METHOD : GET
2018-07-24 22:41:13 -CLASS_METHOD : com.bootdo.system.controller.MenuController.list
2018-07-24 22:41:13 -参数 : [{sort=order_num}]
2018-07-24 22:41:13 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by order_num 
2018-07-24 22:41:13 -==> Parameters: 
2018-07-24 22:41:13 -<==      Total: 62
2018-07-24 22:41:13 -耗时 : 6
2018-07-24 22:41:13 -返回值 : [MenuDO{menuId=51, parentId=50, name='新增', url='', perms='blog:bContent:add', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=55, parentId=7, name='编辑', url='', perms='sys:role:edit', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=56, parentId=7, name='删除', url='', perms='sys:role:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=58, parentId=50, name='编辑', url='', perms='blog:bContent:edit', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=59, parentId=50, name='删除', url='', perms='blog:bContent:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=60, parentId=50, name='批量删除', url='', perms='blog:bContent:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=61, parentId=2, name='批量删除', url='', perms='sys:menu:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=62, parentId=7, name='批量删除', url='', perms='sys:role:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=85, parentId=84, name='通知公告', url='oa/notify', perms='oa:notify:notify', type=1, icon='fa fa-pencil-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=88, parentId=85, name='删除', url='oa/notify/remove', perms='oa:notify:remove', type=2, icon='fa fa-minus', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=89, parentId=85, name='批量删除', url='oa/notify/batchRemove', perms='oa:notify:batchRemove', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=90, parentId=84, name='我的通知', url='oa/notify/selfNotify', perms='', type=1, icon='fa fa-envelope-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=92, parentId=91, name='在线用户', url='sys/online', perms='', type=1, icon='fa fa-user', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=94, parentId=93, name='模型管理', url='activiti/model', perms='', type=1, icon='fa fa-sort-amount-asc', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=95, parentId=94, name='全部权限', url='', perms='activiti:model', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=96, parentId=93, name='流程管理', url='activiti/process', perms='', type=1, icon='fa fa-flag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=98, parentId=97, name='百度chart', url='/chart/graph_echarts.html', perms='', type=1, icon='fa fa-area-chart', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=99, parentId=96, name='所有权限', url='', perms='act:process', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=101, parentId=93, name='待办任务', url='activiti/task/todo', perms='', type=1, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=102, parentId=1, name='数据字典类型', url='', perms='', type=1, icon='fa fa-hashtag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=1, parentId=0, name='基础管理', url='', perms='', type=0, icon='fa fa-bars', orderNum=0, gmtCreate=Wed Aug 09 22:49:47 CST 2017, gmtModified=null}, MenuDO{menuId=6, parentId=3, name='用户管理', url='sys/user/', perms='sys:user:user', type=1, icon='fa fa-user', orderNum=0, gmtCreate=Thu Aug 10 14:12:11 CST 2017, gmtModified=null}, MenuDO{menuId=12, parentId=6, name='新增', url='', perms='sys:user:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:51:35 CST 2017, gmtModified=null}, MenuDO{menuId=13, parentId=6, name='编辑', url='', perms='sys:user:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:52:06 CST 2017, gmtModified=null}, MenuDO{menuId=14, parentId=6, name='删除', url='null', perms='sys:user:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 10:52:24 CST 2017, gmtModified=null}, MenuDO{menuId=15, parentId=7, name='新增', url='', perms='sys:role:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:56:37 CST 2017, gmtModified=null}, MenuDO{menuId=20, parentId=2, name='新增', url='', perms='sys:menu:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:32 CST 2017, gmtModified=null}, MenuDO{menuId=21, parentId=2, name='编辑', url='', perms='sys:menu:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:56 CST 2017, gmtModified=null}, MenuDO{menuId=22, parentId=2, name='删除', url='', perms='sys:menu:remove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 11:00:26 CST 2017, gmtModified=null}, MenuDO{menuId=24, parentId=6, name='批量删除', url='', perms='sys:user:batchRemove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:27:18 CST 2017, gmtModified=null}, MenuDO{menuId=25, parentId=6, name='停用', url='null', perms='sys:user:disable', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 17:27:43 CST 2017, gmtModified=null}, MenuDO{menuId=26, parentId=6, name='重置密码', url='', perms='sys:user:resetPwd', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:28:34 CST 2017, gmtModified=null}, MenuDO{menuId=27, parentId=91, name='系统日志', url='common/log', perms='common:log', type=1, icon='fa fa-warning', orderNum=0, gmtCreate=Mon Aug 14 22:11:53 CST 2017, gmtModified=null}, MenuDO{menuId=28, parentId=27, name='刷新', url='null', perms='sys:log:list', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:22 CST 2017, gmtModified=null}, MenuDO{menuId=29, parentId=27, name='删除', url='null', perms='sys:log:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:43 CST 2017, gmtModified=null}, MenuDO{menuId=30, parentId=27, name='清空', url='null', perms='sys:log:clear', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:31:02 CST 2017, gmtModified=null}, MenuDO{menuId=68, parentId=49, name='发布文章', url='/blog/bContent/add', perms='blog:bContent:add', type=1, icon='fa fa-edit', orderNum=0, gmtCreate=null, gmtModified=null}, MenuDO{menuId=3, parentId=0, name='系统管理', url='null', perms='null', type=0, icon='fa fa-desktop', orderNum=1, gmtCreate=Wed Aug 09 23:06:55 CST 2017, gmtModified=Mon Aug 14 14:13:43 CST 2017}, MenuDO{menuId=7, parentId=3, name='角色管理', url='sys/role', perms='sys:role:role', type=1, icon='fa fa-paw', orderNum=1, gmtCreate=Thu Aug 10 14:13:19 CST 2017, gmtModified=null}, MenuDO{menuId=50, parentId=49, name='文章列表', url='blog/bContent', perms='blog:bContent:bContent', type=1, icon='fa fa-file-image-o', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=57, parentId=91, name='运行监控', url='/druid/index.html', perms='', type=1, icon='fa fa-caret-square-o-right', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=74, parentId=73, name='增加', url='/system/sysDept/add', perms='system:sysDept:add', type=2, icon='null', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=78, parentId=1, name='数据字典', url='/common/dict', perms='common:dict:dict', type=1, icon='fa fa-book', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=86, parentId=85, name='新增', url='oa/notify/add', perms='oa:notify:add', type=2, icon='fa fa-plus', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=2, parentId=3, name='系统菜单', url='sys/menu/', perms='sys:menu:menu', type=1, icon='fa fa-th-list', orderNum=2, gmtCreate=Wed Aug 09 22:55:15 CST 2017, gmtModified=null}, MenuDO{menuId=71, parentId=1, name='文件管理', url='/common/sysFile', perms='common:sysFile:sysFile', type=1, icon='fa fa-folder-open', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=75, parentId=73, name='刪除', url='system/sysDept/remove', perms='system:sysDept:remove', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=79, parentId=78, name='增加', url='/common/dict/add', perms='common:dict:add', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=80, parentId=78, name='编辑', url='/common/dict/edit', perms='common:dict:edit', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=87, parentId=85, name='编辑', url='oa/notify/edit', perms='oa:notify:edit', type=2, icon='fa fa-pencil-square-o', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=48, parentId=77, name='代码生成', url='common/generator', perms='common:generator', type=1, icon='fa fa-code', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=73, parentId=3, name='部门管理', url='/system/sysDept', perms='system:sysDept:sysDept', type=1, icon='fa fa-users', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=76, parentId=73, name='编辑', url='/system/sysDept/edit', perms='system:sysDept:edit', type=2, icon='null', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=81, parentId=78, name='删除', url='/common/dict/remove', perms='common:dict:remove', type=2, icon='', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=72, parentId=77, name='计划任务', url='common/job', perms='common:taskScheduleJob', type=1, icon='fa fa-hourglass-1', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=77, parentId=0, name='系统工具', url='', perms='', type=0, icon='fa fa-gear', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=83, parentId=78, name='批量删除', url='/common/dict/batchRemove', perms='common:dict:batchRemove', type=2, icon='', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=84, parentId=0, name='办公管理', url='', perms='', type=0, icon='fa fa-laptop', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=91, parentId=0, name='系统监控', url='', perms='', type=0, icon='fa fa-video-camera', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=49, parentId=0, name='博客管理', url='', perms='', type=0, icon='fa fa-rss', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=93, parentId=0, name='工作流程', url='', perms='', type=0, icon='fa fa-print', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=97, parentId=0, name='图表管理', url='', perms='', type=0, icon='fa fa-bar-chart', orderNum=7, gmtCreate=null, gmtModified=null}]
2018-07-24 22:41:22 -请求地址 : http://localhost/index
2018-07-24 22:41:22 -HTTP METHOD : GET
2018-07-24 22:41:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 22:41:22 -参数 : [{}]
2018-07-24 22:41:22 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 22:41:22 -==> Parameters: 1(Long)
2018-07-24 22:41:22 -<==      Total: 27
2018-07-24 22:41:22 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 22:41:22 -==> Parameters: 146(Long)
2018-07-24 22:41:22 -<==      Total: 1
2018-07-24 22:41:22 -耗时 : 11
2018-07-24 22:41:22 -返回值 : index_v1
2018-07-24 22:41:22 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:22 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 11(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 22:41:22.027(Timestamp)
2018-07-24 22:41:22 -<==    Updates: 1
2018-07-24 22:41:22 -请求地址 : http://localhost/main
2018-07-24 22:41:22 -HTTP METHOD : GET
2018-07-24 22:41:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:41:22 -参数 : []
2018-07-24 22:41:22 -耗时 : 0
2018-07-24 22:41:22 -返回值 : main
2018-07-24 22:41:22 -请求地址 : http://localhost/oa/notify/message
2018-07-24 22:41:22 -HTTP METHOD : GET
2018-07-24 22:41:22 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 22:41:22 -参数 : []
2018-07-24 22:41:22 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:41:22 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 22:41:22 -<==      Total: 0
2018-07-24 22:41:22 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:41:22 -==> Parameters: 1(Long), 0(String)
2018-07-24 22:41:22 -<==      Total: 1
2018-07-24 22:41:22 -耗时 : 4
2018-07-24 22:41:22 -返回值 : com.bootdo.common.utils.PageUtils@68e74cb1
2018-07-24 22:41:22 -请求地址 : http://localhost/main
2018-07-24 22:41:22 -HTTP METHOD : GET
2018-07-24 22:41:22 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:41:22 -参数 : []
2018-07-24 22:41:22 -耗时 : 0
2018-07-24 22:41:22 -返回值 : main
2018-07-24 22:41:25 -请求地址 : http://localhost/
2018-07-24 22:41:25 -HTTP METHOD : GET
2018-07-24 22:41:25 -CLASS_METHOD : com.bootdo.system.controller.LoginController.welcome
2018-07-24 22:41:25 -参数 : [{}]
2018-07-24 22:41:25 -耗时 : 0
2018-07-24 22:41:25 -返回值 : redirect:/blog
2018-07-24 22:41:25 -请求地址 : http://localhost/blog
2018-07-24 22:41:25 -HTTP METHOD : GET
2018-07-24 22:41:25 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.blog
2018-07-24 22:41:25 -参数 : []
2018-07-24 22:41:25 -耗时 : 0
2018-07-24 22:41:25 -返回值 : blog/index/main
2018-07-24 22:41:25 -请求地址 : http://localhost/blog/open/list
2018-07-24 22:41:25 -HTTP METHOD : GET
2018-07-24 22:41:25 -CLASS_METHOD : com.bootdo.blog.controller.BlogController.opentList
2018-07-24 22:41:25 -参数 : [{type=article, limit=10, offset=0}]
2018-07-24 22:41:25 -==>  Preparing: select `cid`,`title`,`slug`,`created`,`modified`,`content`,`type`,`tags`,`categories`,`hits`,`comments_num`,`allow_comment`,`allow_ping`,`allow_feed`,`status`,`author`,`gtm_create`,`gtm_modified` from blog_content WHERE type = ? order by cid desc limit 0, 10 
2018-07-24 22:41:25 -==> Parameters: article(String)
2018-07-24 22:41:25 -<==      Total: 10
2018-07-24 22:41:25 -==>  Preparing: select count(*) from blog_content WHERE type = ? 
2018-07-24 22:41:25 -==> Parameters: article(String)
2018-07-24 22:41:25 -<==      Total: 1
2018-07-24 22:41:25 -耗时 : 14
2018-07-24 22:41:25 -返回值 : com.bootdo.common.utils.PageUtils@157d4f
2018-07-24 22:41:27 -请求地址 : http://localhost/login
2018-07-24 22:41:27 -HTTP METHOD : GET
2018-07-24 22:41:27 -CLASS_METHOD : com.bootdo.system.controller.LoginController.login
2018-07-24 22:41:27 -参数 : []
2018-07-24 22:41:27 -耗时 : 0
2018-07-24 22:41:27 -返回值 : login
2018-07-24 22:41:28 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 22:41:28 -==> Parameters: admin(String)
2018-07-24 22:41:28 -<==      Total: 1
2018-07-24 22:41:28 -请求地址 : http://localhost/login
2018-07-24 22:41:28 -HTTP METHOD : POST
2018-07-24 22:41:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.ajaxLogin
2018-07-24 22:41:28 -参数 : [admin, 111111]
2018-07-24 22:41:28 -==>  Preparing: select `user_id`,`username`,`name`,`password`,`dept_id`,`email`,`mobile`,`status`,`user_id_create`,`gmt_create`,`gmt_modified`,`sex`,`birth`,`pic_id`,`live_address`,`hobby`,`province`,`city`,`district` from sys_user WHERE username = ? order by user_id desc 
2018-07-24 22:41:28 -==> Parameters: admin(String)
2018-07-24 22:41:28 -<==      Total: 1
2018-07-24 22:41:28 -耗时 : 3
2018-07-24 22:41:28 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:41:28 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:28 -==> Parameters: 1(Long), admin(String), 登录(String), 3(Integer), com.bootdo.system.controller.LoginController.ajaxLogin()(String), null, 127.0.0.1(String), 2018-07-24 22:41:28.667(Timestamp)
2018-07-24 22:41:28 -<==    Updates: 1
2018-07-24 22:41:28 -请求地址 : http://localhost/index
2018-07-24 22:41:28 -HTTP METHOD : GET
2018-07-24 22:41:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.index
2018-07-24 22:41:28 -参数 : [{}]
2018-07-24 22:41:28 -==>  Preparing: select distinct m.menu_id , parent_id, name, url, perms,`type`,icon,order_num,gmt_create, gmt_modified from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id =ur.role_id where ur.user_id = ? and m.type in(0,1) order by m.order_num 
2018-07-24 22:41:28 -==> Parameters: 1(Long)
2018-07-24 22:41:28 -<==      Total: 27
2018-07-24 22:41:28 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file where id = ? 
2018-07-24 22:41:28 -==> Parameters: 146(Long)
2018-07-24 22:41:28 -<==      Total: 1
2018-07-24 22:41:28 -耗时 : 8
2018-07-24 22:41:28 -返回值 : index_v1
2018-07-24 22:41:28 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:28 -==> Parameters: 1(Long), admin(String), 请求访问主页(String), 8(Integer), com.bootdo.system.controller.LoginController.index()(String), null, 127.0.0.1(String), 2018-07-24 22:41:28.695(Timestamp)
2018-07-24 22:41:28 -<==    Updates: 1
2018-07-24 22:41:28 -请求地址 : http://localhost/main
2018-07-24 22:41:28 -HTTP METHOD : GET
2018-07-24 22:41:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:41:28 -参数 : []
2018-07-24 22:41:28 -耗时 : 3
2018-07-24 22:41:28 -返回值 : main
2018-07-24 22:41:28 -请求地址 : http://localhost/oa/notify/message
2018-07-24 22:41:28 -HTTP METHOD : GET
2018-07-24 22:41:28 -CLASS_METHOD : com.bootdo.oa.controller.NotifyController.message
2018-07-24 22:41:28 -参数 : []
2018-07-24 22:41:28 -==>  Preparing: select DISTINCT n.id ,`type`,`title`,`content`,`files`,r.is_read,`status`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id WHERE r.is_read = ? and r.user_id = ? order by is_read ASC, update_date DESC limit ?, ? 
2018-07-24 22:41:28 -==> Parameters: 0(String), 1(Long), 0(Integer), 3(Integer)
2018-07-24 22:41:28 -<==      Total: 0
2018-07-24 22:41:28 -==>  Preparing: select count(*) from oa_notify_record r right JOIN oa_notify n on r.notify_id = n.id where r.user_id =? and r.is_read = ? 
2018-07-24 22:41:28 -==> Parameters: 1(Long), 0(String)
2018-07-24 22:41:28 -<==      Total: 1
2018-07-24 22:41:28 -耗时 : 4
2018-07-24 22:41:28 -返回值 : com.bootdo.common.utils.PageUtils@74edf603
2018-07-24 22:41:28 -请求地址 : http://localhost/main
2018-07-24 22:41:28 -HTTP METHOD : GET
2018-07-24 22:41:28 -CLASS_METHOD : com.bootdo.system.controller.LoginController.main
2018-07-24 22:41:28 -参数 : []
2018-07-24 22:41:28 -耗时 : 0
2018-07-24 22:41:28 -返回值 : main
2018-07-24 22:41:33 -==>  Preparing: select distinct m.perms from sys_menu m left join sys_role_menu rm on m.menu_id = rm.menu_id left join sys_user_role ur on rm.role_id = ur.role_id where ur.user_id = ? 
2018-07-24 22:41:33 -==> Parameters: 1(Long)
2018-07-24 22:41:33 -<==      Total: 47
2018-07-24 22:41:33 -请求地址 : http://localhost/common/dict
2018-07-24 22:41:33 -HTTP METHOD : GET
2018-07-24 22:41:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.dict
2018-07-24 22:41:33 -参数 : []
2018-07-24 22:41:33 -耗时 : 1
2018-07-24 22:41:33 -返回值 : common/dict/dict
2018-07-24 22:41:33 -请求地址 : http://localhost/common/dict/type
2018-07-24 22:41:33 -HTTP METHOD : GET
2018-07-24 22:41:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.listType
2018-07-24 22:41:33 -参数 : []
2018-07-24 22:41:33 -==>  Preparing: select distinct `type` , description from sys_dict 
2018-07-24 22:41:33 -==> Parameters: 
2018-07-24 22:41:33 -<==      Total: 31
2018-07-24 22:41:33 -耗时 : 3
2018-07-24 22:41:33 -返回值 : [DictDO{id=null, name='null', value='null', type='del_flag', description='删除标记', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='show_hide', description='显示/隐藏', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='yes_no', description='是/否', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='color', description='颜色值', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='theme', description='主题方案', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_area_type', description='区域类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_type', description='机构类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_common', description='快捷通用部门', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_office_grade', description='机构等级', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_data_scope', description='数据范围', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_user_type', description='用户类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_theme', description='站点主题', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_module', description='栏目模型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_show_modes', description='展现方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_del_flag', description='内容状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_posid', description='推荐位', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='cms_guestbook', description='留言板分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_leave_type', description='请假类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sys_log_type', description='日志类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='act_type', description='流程类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='act_category', description='流程分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_category', description='代码生成分类', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_query_type', description='查询方式', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_show_type', description='字段生成方案', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='gen_java_type', description='Java类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='sex', description='性别', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_type', description='通知通告类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_status', description='通知通告状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='oa_notify_read', description='通知通告状态', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='blog_type', description='博客类型', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}, DictDO{id=null, name='null', value='null', type='hobby', description='爱好', sort=null, parentId=null, createBy=null, createDate=null, updateBy=null, updateDate=null, remarks='null', delFlag='null'}]
2018-07-24 22:41:33 -请求地址 : http://localhost/common/dict/list
2018-07-24 22:41:33 -HTTP METHOD : GET
2018-07-24 22:41:33 -CLASS_METHOD : com.bootdo.common.controller.DictController.list
2018-07-24 22:41:33 -参数 : [{limit=10, offset=0}]
2018-07-24 22:41:33 -==>  Preparing: select `id`,`name`,`value`,`type`,`description`,`sort`,`parent_id`,`create_by`,`create_date`,`update_by`,`update_date`,`remarks`,`del_flag` from sys_dict order by id desc limit ?, ? 
2018-07-24 22:41:33 -==> Parameters: 0(Integer), 10(Integer)
2018-07-24 22:41:33 -<==      Total: 10
2018-07-24 22:41:33 -==>  Preparing: select count(*) from sys_dict 
2018-07-24 22:41:33 -==> Parameters: 
2018-07-24 22:41:33 -<==      Total: 1
2018-07-24 22:41:33 -耗时 : 5
2018-07-24 22:41:33 -返回值 : com.bootdo.common.utils.PageUtils@7ca5ddc2
2018-07-24 22:41:33 -请求地址 : http://localhost/common/sysFile
2018-07-24 22:41:33 -HTTP METHOD : GET
2018-07-24 22:41:33 -CLASS_METHOD : com.bootdo.common.controller.FileController.sysFile
2018-07-24 22:41:33 -参数 : [{}]
2018-07-24 22:41:33 -耗时 : 0
2018-07-24 22:41:33 -返回值 : common/file/file
2018-07-24 22:41:34 -请求地址 : http://localhost/common/sysFile/list
2018-07-24 22:41:34 -HTTP METHOD : GET
2018-07-24 22:41:34 -CLASS_METHOD : com.bootdo.common.controller.FileController.list
2018-07-24 22:41:34 -参数 : [{limit=12, offset=0, type=}]
2018-07-24 22:41:34 -==>  Preparing: select `id`,`type`,`url`,`create_date` from sys_file order by id desc limit ?, ? 
2018-07-24 22:41:34 -==> Parameters: 0(Integer), 12(Integer)
2018-07-24 22:41:34 -<==      Total: 6
2018-07-24 22:41:34 -==>  Preparing: select count(*) from sys_file 
2018-07-24 22:41:34 -==> Parameters: 
2018-07-24 22:41:34 -<==      Total: 1
2018-07-24 22:41:34 -耗时 : 3
2018-07-24 22:41:34 -返回值 : com.bootdo.common.utils.PageUtils@2ca989e4
2018-07-24 22:41:40 -请求地址 : http://localhost/sys/menu/
2018-07-24 22:41:40 -HTTP METHOD : GET
2018-07-24 22:41:40 -CLASS_METHOD : com.bootdo.system.controller.MenuController.menu
2018-07-24 22:41:40 -参数 : [{}]
2018-07-24 22:41:40 -耗时 : 1
2018-07-24 22:41:40 -返回值 : system/menu/menu
2018-07-24 22:41:40 -请求地址 : http://localhost/sys/menu/list
2018-07-24 22:41:40 -HTTP METHOD : GET
2018-07-24 22:41:40 -CLASS_METHOD : com.bootdo.system.controller.MenuController.list
2018-07-24 22:41:40 -参数 : [{sort=order_num}]
2018-07-24 22:41:40 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by order_num 
2018-07-24 22:41:40 -==> Parameters: 
2018-07-24 22:41:40 -<==      Total: 62
2018-07-24 22:41:40 -耗时 : 7
2018-07-24 22:41:40 -返回值 : [MenuDO{menuId=51, parentId=50, name='新增', url='', perms='blog:bContent:add', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=55, parentId=7, name='编辑', url='', perms='sys:role:edit', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=56, parentId=7, name='删除', url='', perms='sys:role:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=58, parentId=50, name='编辑', url='', perms='blog:bContent:edit', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=59, parentId=50, name='删除', url='', perms='blog:bContent:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=60, parentId=50, name='批量删除', url='', perms='blog:bContent:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=61, parentId=2, name='批量删除', url='', perms='sys:menu:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=62, parentId=7, name='批量删除', url='', perms='sys:role:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=85, parentId=84, name='通知公告', url='oa/notify', perms='oa:notify:notify', type=1, icon='fa fa-pencil-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=88, parentId=85, name='删除', url='oa/notify/remove', perms='oa:notify:remove', type=2, icon='fa fa-minus', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=89, parentId=85, name='批量删除', url='oa/notify/batchRemove', perms='oa:notify:batchRemove', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=90, parentId=84, name='我的通知', url='oa/notify/selfNotify', perms='', type=1, icon='fa fa-envelope-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=92, parentId=91, name='在线用户', url='sys/online', perms='', type=1, icon='fa fa-user', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=94, parentId=93, name='模型管理', url='activiti/model', perms='', type=1, icon='fa fa-sort-amount-asc', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=95, parentId=94, name='全部权限', url='', perms='activiti:model', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=96, parentId=93, name='流程管理', url='activiti/process', perms='', type=1, icon='fa fa-flag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=98, parentId=97, name='百度chart', url='/chart/graph_echarts.html', perms='', type=1, icon='fa fa-area-chart', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=99, parentId=96, name='所有权限', url='', perms='act:process', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=101, parentId=93, name='待办任务', url='activiti/task/todo', perms='', type=1, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=102, parentId=1, name='数据字典类型', url='', perms='', type=1, icon='fa fa-hashtag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=1, parentId=0, name='基础管理', url='', perms='', type=0, icon='fa fa-bars', orderNum=0, gmtCreate=Wed Aug 09 22:49:47 CST 2017, gmtModified=null}, MenuDO{menuId=6, parentId=3, name='用户管理', url='sys/user/', perms='sys:user:user', type=1, icon='fa fa-user', orderNum=0, gmtCreate=Thu Aug 10 14:12:11 CST 2017, gmtModified=null}, MenuDO{menuId=12, parentId=6, name='新增', url='', perms='sys:user:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:51:35 CST 2017, gmtModified=null}, MenuDO{menuId=13, parentId=6, name='编辑', url='', perms='sys:user:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:52:06 CST 2017, gmtModified=null}, MenuDO{menuId=14, parentId=6, name='删除', url='null', perms='sys:user:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 10:52:24 CST 2017, gmtModified=null}, MenuDO{menuId=15, parentId=7, name='新增', url='', perms='sys:role:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:56:37 CST 2017, gmtModified=null}, MenuDO{menuId=20, parentId=2, name='新增', url='', perms='sys:menu:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:32 CST 2017, gmtModified=null}, MenuDO{menuId=21, parentId=2, name='编辑', url='', perms='sys:menu:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:56 CST 2017, gmtModified=null}, MenuDO{menuId=22, parentId=2, name='删除', url='', perms='sys:menu:remove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 11:00:26 CST 2017, gmtModified=null}, MenuDO{menuId=24, parentId=6, name='批量删除', url='', perms='sys:user:batchRemove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:27:18 CST 2017, gmtModified=null}, MenuDO{menuId=25, parentId=6, name='停用', url='null', perms='sys:user:disable', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 17:27:43 CST 2017, gmtModified=null}, MenuDO{menuId=26, parentId=6, name='重置密码', url='', perms='sys:user:resetPwd', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:28:34 CST 2017, gmtModified=null}, MenuDO{menuId=27, parentId=91, name='系统日志', url='common/log', perms='common:log', type=1, icon='fa fa-warning', orderNum=0, gmtCreate=Mon Aug 14 22:11:53 CST 2017, gmtModified=null}, MenuDO{menuId=28, parentId=27, name='刷新', url='null', perms='sys:log:list', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:22 CST 2017, gmtModified=null}, MenuDO{menuId=29, parentId=27, name='删除', url='null', perms='sys:log:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:43 CST 2017, gmtModified=null}, MenuDO{menuId=30, parentId=27, name='清空', url='null', perms='sys:log:clear', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:31:02 CST 2017, gmtModified=null}, MenuDO{menuId=68, parentId=49, name='发布文章', url='/blog/bContent/add', perms='blog:bContent:add', type=1, icon='fa fa-edit', orderNum=0, gmtCreate=null, gmtModified=null}, MenuDO{menuId=3, parentId=0, name='系统管理', url='null', perms='null', type=0, icon='fa fa-desktop', orderNum=1, gmtCreate=Wed Aug 09 23:06:55 CST 2017, gmtModified=Mon Aug 14 14:13:43 CST 2017}, MenuDO{menuId=7, parentId=3, name='角色管理', url='sys/role', perms='sys:role:role', type=1, icon='fa fa-paw', orderNum=1, gmtCreate=Thu Aug 10 14:13:19 CST 2017, gmtModified=null}, MenuDO{menuId=50, parentId=49, name='文章列表', url='blog/bContent', perms='blog:bContent:bContent', type=1, icon='fa fa-file-image-o', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=57, parentId=91, name='运行监控', url='/druid/index.html', perms='', type=1, icon='fa fa-caret-square-o-right', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=74, parentId=73, name='增加', url='/system/sysDept/add', perms='system:sysDept:add', type=2, icon='null', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=78, parentId=1, name='数据字典', url='/common/dict', perms='common:dict:dict', type=1, icon='fa fa-book', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=86, parentId=85, name='新增', url='oa/notify/add', perms='oa:notify:add', type=2, icon='fa fa-plus', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=2, parentId=3, name='系统菜单', url='sys/menu/', perms='sys:menu:menu', type=1, icon='fa fa-th-list', orderNum=2, gmtCreate=Wed Aug 09 22:55:15 CST 2017, gmtModified=null}, MenuDO{menuId=71, parentId=1, name='文件管理', url='/common/sysFile', perms='common:sysFile:sysFile', type=1, icon='fa fa-folder-open', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=75, parentId=73, name='刪除', url='system/sysDept/remove', perms='system:sysDept:remove', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=79, parentId=78, name='增加', url='/common/dict/add', perms='common:dict:add', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=80, parentId=78, name='编辑', url='/common/dict/edit', perms='common:dict:edit', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=87, parentId=85, name='编辑', url='oa/notify/edit', perms='oa:notify:edit', type=2, icon='fa fa-pencil-square-o', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=48, parentId=77, name='代码生成', url='common/generator', perms='common:generator', type=1, icon='fa fa-code', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=73, parentId=3, name='部门管理', url='/system/sysDept', perms='system:sysDept:sysDept', type=1, icon='fa fa-users', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=76, parentId=73, name='编辑', url='/system/sysDept/edit', perms='system:sysDept:edit', type=2, icon='null', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=81, parentId=78, name='删除', url='/common/dict/remove', perms='common:dict:remove', type=2, icon='', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=72, parentId=77, name='计划任务', url='common/job', perms='common:taskScheduleJob', type=1, icon='fa fa-hourglass-1', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=77, parentId=0, name='系统工具', url='', perms='', type=0, icon='fa fa-gear', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=83, parentId=78, name='批量删除', url='/common/dict/batchRemove', perms='common:dict:batchRemove', type=2, icon='', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=84, parentId=0, name='办公管理', url='', perms='', type=0, icon='fa fa-laptop', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=91, parentId=0, name='系统监控', url='', perms='', type=0, icon='fa fa-video-camera', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=49, parentId=0, name='博客管理', url='', perms='', type=0, icon='fa fa-rss', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=93, parentId=0, name='工作流程', url='', perms='', type=0, icon='fa fa-print', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=97, parentId=0, name='图表管理', url='', perms='', type=0, icon='fa fa-bar-chart', orderNum=7, gmtCreate=null, gmtModified=null}]
2018-07-24 22:41:50 -请求地址 : http://localhost/sys/menu/edit/102
2018-07-24 22:41:50 -HTTP METHOD : GET
2018-07-24 22:41:50 -CLASS_METHOD : com.bootdo.system.controller.MenuController.edit
2018-07-24 22:41:50 -参数 : [{}, 102]
2018-07-24 22:41:50 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu where menu_id = ? 
2018-07-24 22:41:50 -==> Parameters: 102(Long)
2018-07-24 22:41:50 -<==      Total: 1
2018-07-24 22:41:50 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu where menu_id = ? 
2018-07-24 22:41:50 -==> Parameters: 1(Long)
2018-07-24 22:41:50 -<==      Total: 1
2018-07-24 22:41:50 -耗时 : 6
2018-07-24 22:41:50 -返回值 : system/menu/edit
2018-07-24 22:41:50 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:50 -==> Parameters: 1(Long), admin(String), 编辑菜单(String), 6(Integer), com.bootdo.system.controller.MenuController.edit()(String), null, 127.0.0.1(String), 2018-07-24 22:41:50.024(Timestamp)
2018-07-24 22:41:50 -<==    Updates: 1
2018-07-24 22:41:54 -请求地址 : http://localhost/sys/menu/update
2018-07-24 22:41:54 -HTTP METHOD : POST
2018-07-24 22:41:54 -CLASS_METHOD : com.bootdo.system.controller.MenuController.update
2018-07-24 22:41:54 -参数 : [MenuDO{menuId=102, parentId=1, name='数据字典类型', url='', perms='', type=1, icon='fa fa-hashtag', orderNum=null, gmtCreate=null, gmtModified=null}]
2018-07-24 22:41:54 -==>  Preparing: update sys_menu SET `parent_id` = ?, `name` = ?, `url` = ?, `perms` = ?, `type` = ?, `icon` = ? where menu_id = ? 
2018-07-24 22:41:54 -==> Parameters: 1(Long), 数据字典类型(String), (String), (String), 1(Integer), fa fa-hashtag(String), 102(Long)
2018-07-24 22:41:54 -<==    Updates: 1
2018-07-24 22:41:54 -耗时 : 10
2018-07-24 22:41:54 -返回值 : {msg=操作成功, code=0}
2018-07-24 22:41:54 -==>  Preparing: insert into sys_log ( `user_id`, `username`, `operation`, `time`, `method`, `params`, `ip`, `gmt_create` ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2018-07-24 22:41:54 -==> Parameters: 1(Long), admin(String), 更新菜单(String), 10(Integer), com.bootdo.system.controller.MenuController.update()(String), null, 127.0.0.1(String), 2018-07-24 22:41:54.848(Timestamp)
2018-07-24 22:41:54 -<==    Updates: 1
2018-07-24 22:41:54 -请求地址 : http://localhost/sys/menu/list
2018-07-24 22:41:54 -HTTP METHOD : GET
2018-07-24 22:41:54 -CLASS_METHOD : com.bootdo.system.controller.MenuController.list
2018-07-24 22:41:54 -参数 : [{sort=order_num}]
2018-07-24 22:41:54 -==>  Preparing: select `menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`,`gmt_create`,`gmt_modified` from sys_menu order by order_num 
2018-07-24 22:41:54 -==> Parameters: 
2018-07-24 22:41:54 -<==      Total: 62
2018-07-24 22:41:54 -耗时 : 7
2018-07-24 22:41:54 -返回值 : [MenuDO{menuId=51, parentId=50, name='新增', url='', perms='blog:bContent:add', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=55, parentId=7, name='编辑', url='', perms='sys:role:edit', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=56, parentId=7, name='删除', url='', perms='sys:role:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=58, parentId=50, name='编辑', url='', perms='blog:bContent:edit', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=59, parentId=50, name='删除', url='', perms='blog:bContent:remove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=60, parentId=50, name='批量删除', url='', perms='blog:bContent:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=61, parentId=2, name='批量删除', url='', perms='sys:menu:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=62, parentId=7, name='批量删除', url='', perms='sys:role:batchRemove', type=2, icon='null', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=85, parentId=84, name='通知公告', url='oa/notify', perms='oa:notify:notify', type=1, icon='fa fa-pencil-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=88, parentId=85, name='删除', url='oa/notify/remove', perms='oa:notify:remove', type=2, icon='fa fa-minus', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=89, parentId=85, name='批量删除', url='oa/notify/batchRemove', perms='oa:notify:batchRemove', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=90, parentId=84, name='我的通知', url='oa/notify/selfNotify', perms='', type=1, icon='fa fa-envelope-square', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=92, parentId=91, name='在线用户', url='sys/online', perms='', type=1, icon='fa fa-user', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=94, parentId=93, name='模型管理', url='activiti/model', perms='', type=1, icon='fa fa-sort-amount-asc', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=95, parentId=94, name='全部权限', url='', perms='activiti:model', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=96, parentId=93, name='流程管理', url='activiti/process', perms='', type=1, icon='fa fa-flag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=98, parentId=97, name='百度chart', url='/chart/graph_echarts.html', perms='', type=1, icon='fa fa-area-chart', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=99, parentId=96, name='所有权限', url='', perms='act:process', type=2, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=101, parentId=93, name='待办任务', url='activiti/task/todo', perms='', type=1, icon='', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=102, parentId=1, name='数据字典类型', url='', perms='', type=1, icon='fa fa-hashtag', orderNum=null, gmtCreate=null, gmtModified=null}, MenuDO{menuId=1, parentId=0, name='基础管理', url='', perms='', type=0, icon='fa fa-bars', orderNum=0, gmtCreate=Wed Aug 09 22:49:47 CST 2017, gmtModified=null}, MenuDO{menuId=6, parentId=3, name='用户管理', url='sys/user/', perms='sys:user:user', type=1, icon='fa fa-user', orderNum=0, gmtCreate=Thu Aug 10 14:12:11 CST 2017, gmtModified=null}, MenuDO{menuId=12, parentId=6, name='新增', url='', perms='sys:user:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:51:35 CST 2017, gmtModified=null}, MenuDO{menuId=13, parentId=6, name='编辑', url='', perms='sys:user:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:52:06 CST 2017, gmtModified=null}, MenuDO{menuId=14, parentId=6, name='删除', url='null', perms='sys:user:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 10:52:24 CST 2017, gmtModified=null}, MenuDO{menuId=15, parentId=7, name='新增', url='', perms='sys:role:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:56:37 CST 2017, gmtModified=null}, MenuDO{menuId=20, parentId=2, name='新增', url='', perms='sys:menu:add', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:32 CST 2017, gmtModified=null}, MenuDO{menuId=21, parentId=2, name='编辑', url='', perms='sys:menu:edit', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 10:59:56 CST 2017, gmtModified=null}, MenuDO{menuId=22, parentId=2, name='删除', url='', perms='sys:menu:remove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 11:00:26 CST 2017, gmtModified=null}, MenuDO{menuId=24, parentId=6, name='批量删除', url='', perms='sys:user:batchRemove', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:27:18 CST 2017, gmtModified=null}, MenuDO{menuId=25, parentId=6, name='停用', url='null', perms='sys:user:disable', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 17:27:43 CST 2017, gmtModified=null}, MenuDO{menuId=26, parentId=6, name='重置密码', url='', perms='sys:user:resetPwd', type=2, icon='', orderNum=0, gmtCreate=Mon Aug 14 17:28:34 CST 2017, gmtModified=null}, MenuDO{menuId=27, parentId=91, name='系统日志', url='common/log', perms='common:log', type=1, icon='fa fa-warning', orderNum=0, gmtCreate=Mon Aug 14 22:11:53 CST 2017, gmtModified=null}, MenuDO{menuId=28, parentId=27, name='刷新', url='null', perms='sys:log:list', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:22 CST 2017, gmtModified=null}, MenuDO{menuId=29, parentId=27, name='删除', url='null', perms='sys:log:remove', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:30:43 CST 2017, gmtModified=null}, MenuDO{menuId=30, parentId=27, name='清空', url='null', perms='sys:log:clear', type=2, icon='null', orderNum=0, gmtCreate=Mon Aug 14 22:31:02 CST 2017, gmtModified=null}, MenuDO{menuId=68, parentId=49, name='发布文章', url='/blog/bContent/add', perms='blog:bContent:add', type=1, icon='fa fa-edit', orderNum=0, gmtCreate=null, gmtModified=null}, MenuDO{menuId=3, parentId=0, name='系统管理', url='null', perms='null', type=0, icon='fa fa-desktop', orderNum=1, gmtCreate=Wed Aug 09 23:06:55 CST 2017, gmtModified=Mon Aug 14 14:13:43 CST 2017}, MenuDO{menuId=7, parentId=3, name='角色管理', url='sys/role', perms='sys:role:role', type=1, icon='fa fa-paw', orderNum=1, gmtCreate=Thu Aug 10 14:13:19 CST 2017, gmtModified=null}, MenuDO{menuId=50, parentId=49, name='文章列表', url='blog/bContent', perms='blog:bContent:bContent', type=1, icon='fa fa-file-image-o', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=57, parentId=91, name='运行监控', url='/druid/index.html', perms='', type=1, icon='fa fa-caret-square-o-right', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=74, parentId=73, name='增加', url='/system/sysDept/add', perms='system:sysDept:add', type=2, icon='null', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=78, parentId=1, name='数据字典', url='/common/dict', perms='common:dict:dict', type=1, icon='fa fa-book', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=86, parentId=85, name='新增', url='oa/notify/add', perms='oa:notify:add', type=2, icon='fa fa-plus', orderNum=1, gmtCreate=null, gmtModified=null}, MenuDO{menuId=2, parentId=3, name='系统菜单', url='sys/menu/', perms='sys:menu:menu', type=1, icon='fa fa-th-list', orderNum=2, gmtCreate=Wed Aug 09 22:55:15 CST 2017, gmtModified=null}, MenuDO{menuId=71, parentId=1, name='文件管理', url='/common/sysFile', perms='common:sysFile:sysFile', type=1, icon='fa fa-folder-open', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=75, parentId=73, name='刪除', url='system/sysDept/remove', perms='system:sysDept:remove', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=79, parentId=78, name='增加', url='/common/dict/add', perms='common:dict:add', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=80, parentId=78, name='编辑', url='/common/dict/edit', perms='common:dict:edit', type=2, icon='null', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=87, parentId=85, name='编辑', url='oa/notify/edit', perms='oa:notify:edit', type=2, icon='fa fa-pencil-square-o', orderNum=2, gmtCreate=null, gmtModified=null}, MenuDO{menuId=48, parentId=77, name='代码生成', url='common/generator', perms='common:generator', type=1, icon='fa fa-code', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=73, parentId=3, name='部门管理', url='/system/sysDept', perms='system:sysDept:sysDept', type=1, icon='fa fa-users', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=76, parentId=73, name='编辑', url='/system/sysDept/edit', perms='system:sysDept:edit', type=2, icon='null', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=81, parentId=78, name='删除', url='/common/dict/remove', perms='common:dict:remove', type=2, icon='', orderNum=3, gmtCreate=null, gmtModified=null}, MenuDO{menuId=72, parentId=77, name='计划任务', url='common/job', perms='common:taskScheduleJob', type=1, icon='fa fa-hourglass-1', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=77, parentId=0, name='系统工具', url='', perms='', type=0, icon='fa fa-gear', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=83, parentId=78, name='批量删除', url='/common/dict/batchRemove', perms='common:dict:batchRemove', type=2, icon='', orderNum=4, gmtCreate=null, gmtModified=null}, MenuDO{menuId=84, parentId=0, name='办公管理', url='', perms='', type=0, icon='fa fa-laptop', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=91, parentId=0, name='系统监控', url='', perms='', type=0, icon='fa fa-video-camera', orderNum=5, gmtCreate=null, gmtModified=null}, MenuDO{menuId=49, parentId=0, name='博客管理', url='', perms='', type=0, icon='fa fa-rss', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=93, parentId=0, name='工作流程', url='', perms='', type=0, icon='fa fa-print', orderNum=6, gmtCreate=null, gmtModified=null}, MenuDO{menuId=97, parentId=0, name='图表管理', url='', perms='', type=0, icon='fa fa-bar-chart', orderNum=7, gmtCreate=null, gmtModified=null}]
